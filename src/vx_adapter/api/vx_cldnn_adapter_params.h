#pragma once

#include "vx_cldnn_adapter_types.h"

namespace clDNN
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // KernelType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    enum class KernelType
    {
        UNKNOWN,
        CONVOLUTION,
        NORMALIZATION,
        POOLING,
        FULLY_CONNECTED,
        LOCALLY_CONNECTED,
        ACTIVATION,
        SOFT_MAX,
        BINARY_OP,
        TABLE_LOOKUP,
        REORDER,
    };

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Datatype
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    enum class Datatype
    {
        UNSUPPORTED,
        F16,
        F32
    };

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // NonLinearActivation
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    enum class ActivationFunction
    {
        LOGISTIC,
        HYPERBOLIC_TAN,
        RELU,
        BRELU,
        SOFTRELU,
        ABS,
        SQUARE,
        SQRT,
        LINEAR,
        NONE
    };

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // PoolType
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    enum class PoolType
    {
        MAX,
        AVG,
    };

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // PoolRemainder
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    enum class PoolRemainder
    {
        FLOOR,
        CEIL
    };

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // NormalizationMode
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    enum class NormalizationMode
    {
        ACROSS_CHANNELS,
        WITHIN_CHANNEL
    };

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // BinaryOpMode
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    enum class BinaryOpMode
    {
        ADD,
        SUB,
        MUL,
        DIV,
    };

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // ReorderMode
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    enum class ReorderMode
    {
        xyzw, // Do nothing
        xywz,
        xwyz,
        wxyz,
        xzyw,
        zxyw,
        yxzw,
    };

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // NonLinearParams
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct NonLinearParams
    {
        int m = 1;
        int n = 0;

        NonLinearParams() = default;
        NonLinearParams(const NonLinearParams&) = default;
        NonLinearParams(int m, int n) : m(m), n(n) {}
    };

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Params
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct Params
    {
        virtual ~Params() {}

        KernelType GetType() const { return kType; }

    protected:
        Params(KernelType kt) : kType(kt) {}
        KernelType kType;
    };

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // BaseParams
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct BaseParams : public Params
    {
        virtual ~BaseParams() {}

        Datatype            inputType = Datatype::F16;
        ActivationFunction  activationFunc = ActivationFunction::NONE;
        NonLinearParams     nlParams;
        uDims               inDims;
        TensorDesc          inDesc;
        uDims               outDims;
        TensorDesc          outDesc;
        bool                bAllowChangeInputTensor = false;

    protected:

        BaseParams(KernelType kt) : Params(kt) {}
    };

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // ConvolutionParams
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct ConvolutionParams : public BaseParams
    {
        ConvolutionParams() : BaseParams(KernelType::CONVOLUTION) {}
    
        struct DedicatedParams
        {
            uSize filterSize;
            uSize stride;
            uSize padding;
        };

        DedicatedParams convParams;
    };

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // NormalizationParams
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct NormalizationParams : public BaseParams
    {
        NormalizationParams() : BaseParams(KernelType::NORMALIZATION) {}

        struct DedicatedParams
        {
            NormalizationMode normMode = NormalizationMode::ACROSS_CHANNELS;
            float             alpha = 0.f;
            float             beta = 0.f;
            uint              localSize = 0;
        };

        DedicatedParams normParams;
    };

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // PoolingParams
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct PoolingParams : public BaseParams
    {
        PoolingParams() : BaseParams(KernelType::POOLING) {}

        struct DedicatedParams
        {
            PoolType      poolType = PoolType::MAX;
            uSize         poolSize;
            uSize         poolStride;
            uSize         poolPad;
            PoolRemainder remainderAction = PoolRemainder::FLOOR;
        };

        DedicatedParams poolParams;
    };

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // FullyConnectedParams
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct FullyConnectedParams : public BaseParams
    {
        FullyConnectedParams() : BaseParams(KernelType::FULLY_CONNECTED) {}
    };

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // LocallyConnectedParams
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct LocallyConnectedParams : public BaseParams
    {
        LocallyConnectedParams() : BaseParams(KernelType::LOCALLY_CONNECTED) {}

        struct DedicatedParams
        {
            uSize filterSize;
            uSize stride;
            uSize padding;
        };

        DedicatedParams lcParams;
    };

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // ActivationParams
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct ActivationParams : public BaseParams
    {
        ActivationParams() : BaseParams(KernelType::ACTIVATION) {}
    };

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // SoftMaxParams
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct SoftMaxParams : public BaseParams
    {
        SoftMaxParams() : BaseParams(KernelType::SOFT_MAX) {}
    };

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // SoftMaxParams
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct BinaryOpParams : public BaseParams
    {
        BinaryOpParams() : BaseParams(KernelType::BINARY_OP) {}

        struct DedicatedParams
        {
            BinaryOpMode mode = BinaryOpMode::ADD;
            float scalar = 0;
        };

        DedicatedParams binaryOpParams;
    };

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // SoftMaxParams
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct TableLookupParams : public BaseParams
    {
        TableLookupParams() : BaseParams(KernelType::TABLE_LOOKUP) {}

        struct DedicatedParams
        {
            Datatype tableFormat = Datatype::F16;
            uSize tableSize;
        };

        DedicatedParams lookupParams;
    };

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // SoftMaxParams
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct ReorderParams : public BaseParams
    {
        ReorderParams() : BaseParams(KernelType::REORDER) {}

        struct DedicatedParams
        {
            ReorderMode mode = ReorderMode::xyzw;
        };

        DedicatedParams reorderParams;
    };
}