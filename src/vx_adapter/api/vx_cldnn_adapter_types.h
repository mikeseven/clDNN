#pragma once

namespace clDNN
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Size
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    template <typename T>
    struct Size {
        T x = 0;
        T y = 0;

        Size() = default;
        Size(const Size&) = default;
        Size(T x, T y) : x(x), y(y) {}
    };


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Dims
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    template <typename T>
    struct Dims 
    {
        T x = 0;
        T y = 0;
        T z = 0;
        T w = 0;

        Dims() = default;
        Dims(const Dims& dim) = default;

        Dims(T x) : x(x) {}
        Dims(T x, T y) : x(x), y(y) {}
        Dims(T x, T y, T z) : x(x), y(y), z(z) {}
        Dims(T x, T y, T z, T w) : x(x), y(y), z(z), w(w) {}

        inline T Length() const { return x*y*z*w; }

        inline Dims& operator+=(const Dims& v)
        {
            x += v.x;
            y += v.y;
            z += v.z;
            w += v.w;
            return *this;
        }

        inline Dims& operator-=(const Dims& v)
        {
            x -= v.x;
            y -= v.y;
            z -= v.z;
            w -= v.w;
            return *this;
        }

        inline friend Dims operator+(Dims v1, const Dims& v2)
        {
            v1 += v2;
            return v1;
        }

        inline friend Dims operator-(Dims v1, const Dims& v2)
        {
            v1 -= v2;
            return v1;
        }
    };

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // typedefs
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    typedef unsigned int uint;
    typedef unsigned char uchar;
    typedef Size<uint> uSize;
    typedef Dims<uint> uDims;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Padding
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct TensorDesc
    {
        std::size_t offset;
        uDims pitches;
    };

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // WorkGroup
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct WorkGroup
    {
        uint x = 0;
        uint y = 0;
        uint z = 0;
        bool NullRange = true;

        WorkGroup() = default;
        WorkGroup(const WorkGroup& dim) = default;
        WorkGroup(uint x, uint y, uint z) : x(x), y(y), z(z), NullRange(false) {}
    };

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // WorkGroups
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct WorkGroups
    {
        WorkGroup global, local;
    };

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // BinaryDesc
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    struct BinaryDesc
    {
        BinaryDesc() = default;
        BinaryDesc(const char* b, const std::size_t s) : binary(b), size(s) {}
        const char* binary = nullptr;
        const std::size_t size = 0;
    };
}