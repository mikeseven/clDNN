/*
// Copyright (c) 2016 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
*/

#include "common/common_tools.h"
#include "file.h"
#include <string>
#include <api/CPP/input_layout.hpp>
#include <api/CPP/reorder.hpp>
#include <api/CPP/convolution.hpp>
#include <api/CPP/pooling.hpp>
#include <api/CPP/concatenation.hpp>
#include <api/CPP/softmax.hpp>

using namespace cldnn;


template<typename T>
void set_values(const cldnn::memory& mem,const std::vector<T>& args) {
    auto ptr = mem.pointer<T>();

    auto it = ptr.begin();
    for (auto x : args)
        *it++ = x;
}

const std::vector<float> fire2_expand3x3_calib = {
    0.250784f,  0.944659f,  0.333702f,  0.278448f,  0.273874f,  0.307862f,  0.309262f,  0.191347f,  0.491642f,  0.633319f,  0.258157f,  0.353441f,  0.174657f,  0.230369f,  0.279611f,  0.327134f,  0.349897f,  0.323109f,  0.313405f,  0.264041f,  0.348698f,  0.344927f,  0.578158f,  0.278347f,  0.25161f,  0.19068f,  0.180951f,  0.248012f,  0.476078f,  0.191614f,  0.399854f,  0.186012f,  0.299024f,  0.247966f,  0.25616f,  0.356563f,  0.28476f,  0.172865f,  0.545788f,  0.411313f,  0.304394f,  0.598331f,  0.275352f,  0.240105f,  0.139793f,  0.185885f,  0.262357f,  0.257269f,  0.296313f,  0.16406f,  0.320436f,  0.307312f,  0.148052f,  0.206332f,  0.643041f,  0.112421f,  0.175075f,  0.399287f,  0.886581f,  0.288937f,  0.329382f,  0.188917f,  0.353981f,  0.211148f, };
const std::vector<float> fire2_squeeze1x1_calib = {
    0.130631f,  0.37167f,  0.193429f,  0.266593f,  0.108089f,  0.22462f,  0.152844f,  0.118435f,  0.105069f,  0.2999f,  0.125504f,  0.194036f,  0.207808f,  0.104406f,  0.137607f,  0.19219f, };
const std::vector<float> fire7_expand1x1_calib = {
    0.398817f,  0.7567f,  0.471896f,  1.023616f,  0.3821f,  0.596432f,  0.543751f,  0.644762f,  0.606524f,  0.425569f,  0.899943f,  0.838112f,  0.716143f,  0.679348f,  0.530159f,  0.774027f,  0.621623f,  0.591995f,  0.460881f,  0.570817f,  0.713724f,  0.893265f,  0.853334f,  0.599908f,  0.476798f,  0.636317f,  0.734779f,  0.577761f,  0.47505f,  0.510278f,  0.268602f,  0.380085f,  0.50037f,  0.633767f,  0.532194f,  0.717555f,  0.5725f,  0.504585f,  0.489599f,  0.505889f,  0.726636f,  0.505575f,  0.38816f,  0.726861f,  0.524637f,  0.635547f,  1.014272f,  0.917524f,  0.648773f,  0.43486f,  0.837946f,  0.465186f,  0.762172f,  0.665667f,  0.42745f,  0.545223f,  0.60173f,  0.535648f,  0.475038f,  0.675018f,  0.636215f,  0.774754f,  0.580402f,  0.934717f,  0.546467f,  0.541552f,  0.519353f,  0.684238f,  0.373245f,  0.805899f,  0.527102f,  1.004699f,  0.50158f,  0.682939f,  0.399292f,  0.527836f,  0.503068f,  0.622665f,  0.628632f,  0.667066f,  0.439926f,  0.421394f,  0.916915f,  0.792388f,  0.649912f,  0.572567f,  0.438248f,  0.394423f,  0.633344f,  0.820154f,  0.490202f,  0.531576f,  0.59767f,  0.632842f,  0.637029f,  0.461139f,  0.770379f,  0.485211f,  0.542723f,  0.536164f,  0.600493f,  0.616667f,  0.768249f,  0.723952f,  0.793026f,  0.493484f,  0.691179f,  0.735149f,  0.696306f,  0.786763f,  0.512731f,  0.409799f,  0.442461f,  0.716304f,  0.742096f,  0.72094f,  0.468348f,  0.613788f,  0.581483f,  0.670482f,  0.545385f,  0.69234f,  0.539746f,  0.367672f,  0.691676f,  0.407884f,  0.806426f,  0.510307f,  0.625412f,  0.751239f,  0.277989f,  0.375499f,  0.466005f,  0.579007f,  0.819011f,  0.757156f,  0.542547f,  0.477002f,  0.414709f,  0.643781f,  0.514212f,  0.530391f,  0.403477f,  0.704346f,  0.583072f,  0.368938f,  0.535888f,  0.645959f,  0.588099f,  0.454266f,  0.459117f,  0.407838f,  0.546749f,  0.504751f,  0.498786f,  0.475242f,  0.732094f,  0.336025f,  0.788443f,  0.797038f,  0.771858f,  0.559397f,  0.44074f,  0.933151f,  0.458745f,  0.579435f,  0.572934f,  0.556983f,  0.871283f,  0.941885f,  0.740542f,  0.731685f,  0.563088f,  0.887448f,  0.523873f,  0.883527f,  0.532144f,  0.787216f,  0.576371f,  0.552186f,  0.578949f,  0.401497f,  0.999017f,  0.478238f,  0.884247f,  0.618309f,  0.305461f,  0.429362f,  0.391805f,  0.491758f,  0.332758f,  0.58046f, };
const std::vector<float> fire6_concat_calib = {
    0.63027f,  0.613372f,  0.370905f,  0.252769f,  0.454661f,  0.485372f,  0.388163f,  0.653111f,  0.649324f,  0.292343f,  0.350184f,  0.44189f,  0.433697f,  0.48642f,  0.645969f,  0.616565f,  0.449927f,  0.50568f,  0.359209f,  0.845207f,  0.465447f,  0.466852f,  0.503341f,  0.549163f,  0.583715f,  0.332716f,  0.399369f,  0.308467f,  0.344715f,  0.371065f,  0.502133f,  0.464399f,  0.365634f,  0.44831f,  0.622903f,  0.432311f,  0.607772f,  0.429279f,  0.655538f,  0.306611f,  0.583227f,  0.4626f,  0.817704f,  0.855444f,  0.276609f,  0.337557f,  0.48985f,  0.431908f,  0.69847f,  0.195282f,  0.344356f,  0.34196f,  0.5852f,  0.328309f,  0.70784f,  0.341647f,  0.282724f,  0.728913f,  0.591523f,  0.354174f,  0.452173f,  0.622937f,  0.484555f,  0.512136f,  0.716947f,  0.624284f,  0.542461f,  0.534931f,  0.659727f,  0.373481f,  0.30083f,  0.360903f,  0.500504f,  0.26897f,  0.759565f,  0.740914f,  0.63839f,  0.276242f,  0.630229f,  0.549474f,  0.547327f,  0.495521f,  0.287575f,  0.410172f,  0.363216f,  0.46163f,  0.426056f,  0.477478f,  0.370454f,  0.343648f,  0.343673f,  0.454524f,  0.467348f,  0.422646f,  0.622943f,  0.449779f,  0.407713f,  0.348672f,  0.406387f,  0.334711f,  0.413799f,  0.701646f,  0.478741f,  0.55996f,  0.397627f,  0.322355f,  0.466295f,  0.343139f,  0.483382f,  0.321212f,  0.606982f,  0.459423f,  0.411753f,  0.446642f,  0.30618f,  0.541423f,  0.346053f,  0.627672f,  0.532774f,  0.336277f,  0.547506f,  0.318133f,  0.305321f,  0.48177f,  0.994075f,  0.283258f,  0.363096f,  0.423504f,  0.540274f,  0.407518f,  0.697247f,  0.32097f,  0.503156f,  0.333982f,  0.528056f,  0.432083f,  0.280229f,  0.28691f,  0.378152f,  0.271529f,  0.451546f,  0.522892f,  0.34315f,  0.371816f,  0.48138f,  0.543632f,  0.503565f,  0.591945f,  0.485081f,  0.328431f,  0.363844f,  0.322864f,  0.811595f,  0.301402f,  0.367496f,  0.37877f,  0.433073f,  0.620129f,  0.317561f,  0.477551f,  0.620702f,  0.565002f,  0.756434f,  0.530639f,  0.485389f,  0.376881f,  0.450604f,  0.493599f,  0.569183f,  0.294466f,  0.430013f,  0.412975f,  0.200754f,  0.339768f,  0.407964f,  0.506301f,  0.693663f,  0.387206f,  0.376393f,  0.412905f,  0.526599f,  0.292671f,  0.351489f,  0.414064f,  0.643501f,  0.395518f,  0.461166f,  0.661376f,  0.260611f,  0.34555f,  0.670822f,  0.680688f,  0.171339f,  0.198047f,  0.237298f,  0.243882f,  0.216157f,  0.234368f,  0.280218f,  0.209647f,  0.158544f,  0.245536f,  0.219623f,  0.164168f,  0.139698f,  0.184933f,  0.286547f,  0.247462f,  0.511241f,  0.153075f,  0.168094f,  0.200455f,  0.134494f,  0.200544f,  0.317416f,  0.339273f,  0.32451f,  0.22674f,  0.163108f,  0.234086f,  0.159797f,  0.116855f,  0.264208f,  0.242581f,  0.146453f,  0.222931f,  0.202592f,  0.206735f,  0.182588f,  0.218614f,  0.486558f,  0.215884f,  0.112691f,  0.177224f,  0.181218f,  0.197377f,  0.263083f,  0.235079f,  0.183638f,  0.316185f,  0.114951f,  0.270318f,  0.155119f,  0.24976f,  0.207527f,  0.333179f,  0.178441f,  0.25644f,  0.230347f,  0.391657f,  0.222008f,  0.231886f,  0.190878f,  0.201436f,  0.185425f,  0.122558f,  0.122171f,  0.184159f,  0.169345f,  0.409035f,  0.360517f,  0.265902f,  0.203906f,  0.238751f,  0.124198f,  0.254904f,  0.222763f,  0.297098f,  0.199294f,  0.185213f,  0.193679f,  0.163248f,  0.103104f,  0.226564f,  0.134883f,  0.17874f,  0.225255f,  0.278602f,  0.273535f,  0.25854f,  0.342487f,  0.11164f,  0.172878f,  0.242545f,  0.136386f,  0.229574f,  0.169426f,  0.229649f,  0.190396f,  0.209056f,  0.207677f,  0.136753f,  0.180097f,  0.275733f,  0.179376f,  0.127839f,  0.21142f,  0.263033f,  0.16959f,  0.206247f,  0.296107f,  0.219683f,  0.113561f,  0.303773f,  0.203517f,  0.172951f,  0.147004f,  0.217044f,  0.14957f,  0.421399f,  0.114415f,  0.289329f,  0.293385f,  0.243323f,  0.239383f,  0.191187f,  0.254676f,  0.189099f,  0.16106f,  0.328757f,  0.097796f,  0.172762f,  0.15182f,  0.198723f,  0.244513f,  0.15899f,  0.269355f,  0.265876f,  0.253057f,  0.372059f,  0.174403f,  0.162646f,  0.232907f,  0.215447f,  0.206982f,  0.217224f,  0.330807f,  0.241222f,  0.214798f,  0.18811f,  0.197799f,  0.104951f,  0.26966f,  0.148317f,  0.192659f,  0.324012f,  0.203361f,  0.24168f,  0.200104f,  0.321465f,  0.167535f,  0.212307f,  0.246251f,  0.191539f,  0.1768f,  0.231408f,  0.168118f,  0.148614f,  0.223364f,  0.14753f,  0.245694f,  0.207963f,  0.277434f,  0.17517f,  0.303072f,  0.297879f,  0.277831f,  0.188596f,  0.163582f,  0.222829f,  0.226111f,  0.506715f,  0.130175f,  0.161842f,  0.274369f,  0.240818f,  0.149912f,  0.155725f,  0.316412f,  0.274718f,  0.260009f,  0.270591f,  0.135479f,  0.251911f, };
const std::vector<float> fire9_expand3x3_calib = {
    0.693432f,  0.719702f,  0.917703f,  0.620141f,  0.600268f,  0.61861f,  1.063206f,  3.560066f,  0.750729f,  0.877708f,  1.903748f,  0.841177f,  0.772892f,  2.059789f,  0.725399f,  0.459062f,  0.742564f,  0.548094f,  0.635216f,  0.76494f,  0.591399f,  1.471249f,  0.84863f,  0.623325f,  0.881027f,  1.025981f,  0.453847f,  0.860568f,  0.487253f,  0.637192f,  0.783042f,  0.434545f,  0.349903f,  0.560066f,  0.682f,  0.544368f,  0.764204f,  1.883661f,  0.367006f,  0.284172f,  2.754229f,  0.446386f,  0.437756f,  0.830701f,  1.292005f,  0.239646f,  0.545287f,  0.652765f,  1.341658f,  1.780412f,  0.920977f,  0.732812f,  0.393809f,  0.507251f,  1.239206f,  0.516876f,  0.862408f,  0.229518f,  0.490037f,  0.614262f,  0.78931f,  0.750108f,  0.789305f,  0.693413f,  0.508449f,  0.822635f,  0.635486f,  0.32923f,  1.442916f,  0.868697f,  1.361265f,  0.302552f,  0.290945f,  1.86876f,  0.532368f,  0.702636f,  1.081928f,  0.499184f,  0.646999f,  0.413011f,  0.435923f,  0.512463f,  3.07381f,  1.034699f,  0.7993f,  0.34729f,  0.690319f,  0.623249f,  2.274461f,  1.196353f,  0.671535f,  0.879349f,  1.114808f,  0.928546f,  0.46428f,  1.056775f,  0.735567f,  0.608864f,  1.067317f,  1.348615f,  1.520577f,  0.784319f,  0.358237f,  0.532091f,  1.861774f,  1.187837f,  0.943298f,  0.789462f,  0.349226f,  0.475978f,  0.867907f,  0.68746f,  0.842891f,  0.374346f,  0.313281f,  1.464512f,  0.97775f,  0.852177f,  1.092765f,  0.380453f,  1.404925f,  0.680783f,  1.194934f,  0.525671f,  0.804062f,  0.349001f,  1.96819f,  0.508769f,  0.411381f,  0.28401f,  1.039824f,  0.330475f,  0.645735f,  0.700682f,  0.429514f,  0.81254f,  1.59104f,  0.740395f,  0.720723f,  0.577761f,  0.545718f,  0.566845f,  0.94613f,  0.955872f,  0.463795f,  0.559967f,  0.54383f,  0.384442f,  1.067846f,  1.011122f,  0.412122f,  0.839115f,  1.040941f,  0.35322f,  1.307938f,  0.354527f,  0.646304f,  2.912236f,  0.520626f,  1.188593f,  2.670856f,  0.675349f,  0.369278f,  0.254915f,  0.478757f,  0.772393f,  0.712099f,  0.849942f,  1.437601f,  1.013891f,  0.406221f,  0.427722f,  0.455779f,  2.825563f,  0.692434f,  0.559819f,  0.472854f,  0.507383f,  0.499096f,  0.827044f,  0.354759f,  0.317128f,  0.528192f,  1.612043f,  0.454503f,  0.358132f,  0.423855f,  0.649347f,  0.237891f,  0.464449f,  0.682968f,  0.790524f,  0.399913f,  0.608751f,  1.87607f,  0.610392f,  0.555395f,  1.332862f,  0.590012f,  1.410227f,  1.312539f,  1.077678f,  0.559296f,  0.711824f,  0.923589f,  0.475695f,  1.148718f,  0.537143f,  0.571567f,  0.575974f,  0.340498f,  0.870054f,  1.156006f,  0.560848f,  0.317867f,  0.507503f,  1.034194f,  0.698635f,  1.227646f,  2.553082f,  0.910753f,  0.857546f,  0.545882f,  0.431373f,  1.316332f,  1.300149f,  2.503534f,  0.685098f,  0.514866f,  1.247826f,  0.772285f,  0.88818f,  0.850369f,  0.726636f,  0.551924f,  0.795884f,  0.662051f,  0.744414f,  0.483064f,  1.168042f,  0.44774f,  1.349998f,  0.676633f,  0.812696f,  0.697419f,  0.715199f,  0.48205f,  0.880434f,  0.904256f,  0.510009f,  0.73472f,  0.75791f,  0.599908f,  0.826871f,  0.56359f,  0.852635f, };
const std::vector<float> fire2_concat_calib = {
    0.215361f,  0.871283f,  0.369596f,  0.492804f,  16.952773f,  0.615632f,  0.303109f,  0.508248f,  0.273892f,  0.19117f,  1.00693f,  0.700493f,  0.27378f,  0.416551f,  0.350341f,  0.58661f,  0.602427f,  0.510069f,  0.192527f,  0.828906f,  0.164113f,  0.243816f,  0.511509f,  0.319154f,  0.543092f,  1.10135f,  0.417947f,  0.571766f,  0.187726f,  0.348053f,  0.32787f,  0.180991f,  0.492599f,  0.618453f,  0.672987f,  0.8535f,  0.386298f,  0.424812f,  1.682193f,  0.708713f,  0.250697f,  0.439048f,  0.411541f,  0.353132f,  0.525684f,  0.272616f,  0.49133f,  0.314826f,  0.497942f,  0.281453f,  0.963823f,  0.329133f,  0.300962f,  0.891597f,  0.367091f,  0.245822f,  0.684234f,  0.299994f,  0.599968f,  0.453674f,  0.438807f,  0.44254f,  0.618803f,  0.621404f,  0.250784f,  0.944659f,  0.333702f,  0.278448f,  0.273874f,  0.307862f,  0.309262f,  0.191347f,  0.491642f,  0.633319f,  0.258157f,  0.353441f,  0.174657f,  0.230369f,  0.279611f,  0.327134f,  0.349897f,  0.323109f,  0.313405f,  0.264041f,  0.348698f,  0.344927f,  0.578158f,  0.278347f,  0.25161f,  0.19068f,  0.180951f,  0.248012f,  0.476078f,  0.191614f,  0.399854f,  0.186012f,  0.299024f,  0.247966f,  0.25616f,  0.356563f,  0.28476f,  0.172865f,  0.545788f,  0.411313f,  0.304394f,  0.598331f,  0.275352f,  0.240105f,  0.139793f,  0.185885f,  0.262357f,  0.257269f,  0.296313f,  0.16406f,  0.320436f,  0.307312f,  0.148052f,  0.206332f,  0.643041f,  0.112421f,  0.175075f,  0.399287f,  0.886581f,  0.288937f,  0.329382f,  0.188917f,  0.353981f,  0.211148f, };
const std::vector<float> fire8_expand1x1_calib = {
    0.955318f,  0.879702f,  1.022363f,  1.162386f,  0.490037f,  0.378152f,  0.44476f,  0.859816f,  0.643938f,  0.59089f,  1.462862f,  0.663241f,  1.323394f,  1.020892f,  0.420609f,  0.727685f,  0.898288f,  0.796573f,  1.04937f,  1.149613f,  0.927413f,  0.621973f,  0.936012f,  14.344577f,  0.875198f,  3.139422f,  0.70903f,  0.476512f,  3.447396f,  0.757725f,  0.730183f,  1.938047f,  0.928335f,  1.438215f,  4.522615f,  1.03107f,  0.894606f,  1.330903f,  0.855017f,  0.686153f,  0.799265f,  1.913665f,  2.093174f,  4.311515f,  0.459792f,  1.493963f,  0.437028f,  1.05791f,  1.376106f,  1.109228f,  0.542976f,  1.266846f,  1.676426f,  0.732719f,  2.543546f,  1.260046f,  1.2661f,  1.253603f,  1.330261f,  1.066967f,  0.560464f,  1.197876f,  0.623041f,  1.335934f,  0.748962f,  1.000307f,  1.569754f,  2.043144f,  0.798361f,  2.585163f,  1.529809f,  0.640916f,  0.953747f,  0.756754f,  2.357939f,  1.09253f,  0.461958f,  0.601064f,  1.508396f,  0.526013f,  1.141081f,  1.098027f,  0.764337f,  0.967826f,  5.22249f,  0.512336f,  1.022388f,  1.313706f,  0.939613f,  0.732871f,  0.943396f,  1.011855f,  1.151071f,  1.146685f,  1.548865f,  1.237648f,  0.82564f,  1.584114f,  1.152691f,  0.920817f,  1.362063f,  1.427757f,  0.83217f,  1.083895f,  0.88503f,  0.846187f,  4.06741f,  0.962427f,  0.987589f,  1.515983f,  4.360635f,  1.185066f,  1.185929f,  0.554559f,  0.720927f,  1.017449f,  1.248096f,  0.834352f,  1.022495f,  0.864734f,  1.971428f,  0.503503f,  8.110714f,  2.582902f,  0.660382f,  0.316546f,  0.569389f,  0.789909f,  1.344536f,  0.719347f,  0.644722f,  0.344046f,  0.758952f,  0.995711f,  1.070871f,  1.075897f,  1.172236f,  24.98962f,  1.052719f,  2.171872f,  0.679003f,  5.930423f,  2.545065f,  2.7132f,  1.358946f,  1.020769f,  1.093527f,  2.171382f,  1.100282f,  1.143794f,  0.957472f,  1.8955f,  1.128608f,  0.801985f,  0.482787f,  0.485587f,  1.089998f,  0.85931f,  0.920363f,  2.482908f,  0.587528f,  0.545263f,  2.760407f,  0.954815f,  1.173123f,  0.78268f,  0.726911f,  0.641414f,  0.847633f,  0.815048f,  0.921639f,  0.710824f,  1.058757f,  0.7497f,  0.861964f,  0.838754f,  0.589251f,  0.681283f,  1.546651f,  0.929776f,  0.456419f,  0.707706f,  1.336466f,  1.162599f,  1.569424f,  1.159404f,  62.35118f,  1.50128f,  0.697032f,  0.713952f,  2.408793f,  0.422982f,  0.672274f,  0.759211f,  1.630004f,  0.938003f,  0.552626f,  1.099205f,  1.166679f,  1.009828f,  0.917736f,  2.992432f,  1.062415f,  1.48105f,  1.129602f,  2.780332f,  1.141789f,  1.340262f,  1.166475f,  1.133868f,  0.64879f,  1.06532f,  1.274193f,  1.228513f,  1.096813f,  6.063326f,  1.855944f,  1.110509f,  1.344402f,  1.461514f,  0.97103f,  0.863693f,  1.387549f,  0.529246f,  1.086826f,  0.876951f,  1.24015f,  1.411415f,  0.798115f,  1.63099f,  1.140363f,  1.228703f,  1.983486f,  0.812644f,  1.218564f,  0.584295f,  1.017253f,  1.425187f,  0.599023f,  0.395868f,  1.098949f,  0.560165f,  2.192562f,  0.910349f,  0.242041f,  0.441208f,  1.163366f,  0.754623f,  1.158252f,  0.812618f,  1.365509f,  1.613799f,  0.934346f,  1.379141f,  0.704073f,  0.984107f, };
const std::vector<float> fire6_expand1x1_calib = {
    0.63027f,  0.613372f,  0.370905f,  0.252769f,  0.454661f,  0.485372f,  0.388163f,  0.653111f,  0.649324f,  0.292343f,  0.350184f,  0.44189f,  0.433697f,  0.48642f,  0.645969f,  0.616565f,  0.449927f,  0.50568f,  0.359209f,  0.845207f,  0.465447f,  0.466852f,  0.503341f,  0.549163f,  0.583715f,  0.332716f,  0.399369f,  0.308467f,  0.344715f,  0.371065f,  0.502133f,  0.464399f,  0.365634f,  0.44831f,  0.622903f,  0.432311f,  0.607772f,  0.429279f,  0.655538f,  0.306611f,  0.583227f,  0.4626f,  0.817704f,  0.855444f,  0.276609f,  0.337557f,  0.48985f,  0.431908f,  0.69847f,  0.195282f,  0.344356f,  0.34196f,  0.5852f,  0.328309f,  0.70784f,  0.341647f,  0.282724f,  0.728913f,  0.591523f,  0.354174f,  0.452173f,  0.622937f,  0.484555f,  0.512136f,  0.716947f,  0.624284f,  0.542461f,  0.534931f,  0.659727f,  0.373481f,  0.30083f,  0.360903f,  0.500504f,  0.26897f,  0.759565f,  0.740914f,  0.63839f,  0.276242f,  0.630229f,  0.549474f,  0.547327f,  0.495521f,  0.287575f,  0.410172f,  0.363216f,  0.46163f,  0.426056f,  0.477478f,  0.370454f,  0.343648f,  0.343673f,  0.454524f,  0.467348f,  0.422646f,  0.622943f,  0.449779f,  0.407713f,  0.348672f,  0.406387f,  0.334711f,  0.413799f,  0.701646f,  0.478741f,  0.55996f,  0.397627f,  0.322355f,  0.466295f,  0.343139f,  0.483382f,  0.321212f,  0.606982f,  0.459423f,  0.411753f,  0.446642f,  0.30618f,  0.541423f,  0.346053f,  0.627672f,  0.532774f,  0.336277f,  0.547506f,  0.318133f,  0.305321f,  0.48177f,  0.994075f,  0.283258f,  0.363096f,  0.423504f,  0.540274f,  0.407518f,  0.697247f,  0.32097f,  0.503156f,  0.333982f,  0.528056f,  0.432083f,  0.280229f,  0.28691f,  0.378152f,  0.271529f,  0.451546f,  0.522892f,  0.34315f,  0.371816f,  0.48138f,  0.543632f,  0.503565f,  0.591945f,  0.485081f,  0.328431f,  0.363844f,  0.322864f,  0.811595f,  0.301402f,  0.367496f,  0.37877f,  0.433073f,  0.620129f,  0.317561f,  0.477551f,  0.620702f,  0.565002f,  0.756434f,  0.530639f,  0.485389f,  0.376881f,  0.450604f,  0.493599f,  0.569183f,  0.294466f,  0.430013f,  0.412975f,  0.200754f,  0.339768f,  0.407964f,  0.506301f,  0.693663f,  0.387206f,  0.376393f,  0.412905f,  0.526599f,  0.292671f,  0.351489f,  0.414064f,  0.643501f,  0.395518f,  0.461166f,  0.661376f,  0.260611f,  0.34555f,  0.670822f,  0.680688f, };
const std::vector<float> fire9_concat_calib = {
    0.941047f,  0.737335f,  1.483896f,  0.690649f,  1.287108f,  1.798806f,  0.882183f,  1.624768f,  0.999819f,  1.596233f,  0.965846f,  2.384524f,  1.619421f,  2.576577f,  1.46545f,  1.486014f,  1.784224f,  0.719237f,  1.102526f,  1.008593f,  1.238215f,  1.870447f,  1.183322f,  1.875876f,  3.234202f,  1.026329f,  1.541406f,  1.538691f,  1.149904f,  1.114162f,  3.020789f,  0.489067f,  1.441626f,  1.158421f,  1.168687f,  1.864105f,  0.664257f,  0.863118f,  1.940125f,  2.066284f,  0.753566f,  1.56918f,  1.69447f,  0.609352f,  0.509932f,  2.550759f,  0.654009f,  8.808923f,  1.795495f,  0.941745f,  0.656534f,  0.786689f,  0.933165f,  0.838538f,  1.658659f,  0.595322f,  0.992614f,  0.514977f,  1.839231f,  0.981597f,  0.480696f,  0.862151f,  1.356097f,  1.552488f,  1.589443f,  1.496309f,  1.003191f,  1.433261f,  1.498636f,  0.843972f,  0.68327f,  1.949832f,  1.089736f,  1.865751f,  0.777167f,  1.14401f,  0.800005f,  1.503519f,  1.296825f,  0.680352f,  1.29973f,  2.403141f,  1.405545f,  3.693224f,  0.727969f,  0.561425f,  0.683446f,  0.705113f,  0.692226f,  2.073209f,  1.762366f,  0.301492f,  1.177955f,  2.340992f,  0.811362f,  1.67634f,  0.942969f,  1.045224f,  0.916769f,  2.005188f,  1.526257f,  0.967634f,  1.990524f,  0.917325f,  1.388301f,  0.52617f,  1.297253f,  1.759936f,  0.59276f,  0.889287f,  0.653191f,  0.945757f,  1.143742f,  1.672025f,  0.975392f,  0.865659f,  0.725345f,  1.581384f,  0.519625f,  1.796546f,  1.076874f,  2.467999f,  0.891791f,  1.233668f,  1.256766f,  0.499349f,  2.668269f,  0.747595f,  0.750015f,  2.704147f,  1.825229f,  0.98455f,  1.449765f,  1.263958f,  2.135793f,  0.531712f,  5.53107f,  2.394902f,  0.711832f,  0.848012f,  1.976481f,  1.52676f,  0.571431f,  0.718448f,  2.102865f,  1.422359f,  1.166733f,  1.421892f,  2.56782f,  0.478501f,  1.201821f,  0.555653f,  1.417847f,  1.318586f,  1.704035f,  0.707422f,  1.3428f,  0.643693f,  0.513349f,  1.639285f,  0.443729f,  0.950834f,  0.867919f,  1.927119f,  1.771949f,  2.305126f,  0.971356f,  1.067693f,  1.973699f,  2.05491f,  0.612426f,  0.902386f,  0.893278f,  2.021057f,  0.408873f,  1.281407f,  1.002154f,  2.191601f,  1.008657f,  0.740758f,  1.295328f,  1.274905f,  0.515399f,  2.282272f,  1.763127f,  0.804419f,  2.182416f,  1.740823f,  5.117047f,  0.840937f,  1.214823f,  1.475456f,  0.471712f,  1.342767f,  0.788947f,  0.775881f,  1.020859f,  1.198328f,  1.312929f,  0.992141f,  0.8617f,  2.362993f,  1.6309f,  2.12105f,  0.966588f,  1.645429f,  1.384711f,  0.980634f,  1.682587f,  0.741195f,  1.465609f,  1.427406f,  2.152207f,  1.526009f,  1.165801f,  1.385772f,  1.571271f,  3.524801f,  1.906217f,  3.048517f,  0.803564f,  0.83612f,  1.232029f,  0.9241f,  3.401752f,  0.731626f,  1.158347f,  1.392295f,  0.601266f,  1.628683f,  0.810569f,  0.544471f,  0.403166f,  3.298359f,  0.800792f,  1.47572f,  0.674749f,  1.0548f,  1.102096f,  0.699482f,  0.590725f,  1.844306f,  2.023176f,  1.262614f,  1.144093f,  1.412942f,  3.213498f,  0.958816f,  1.807243f,  1.107825f,  0.433021f,  0.367751f,  1.061908f,  0.466845f,  0.649985f,  0.784251f,  0.693432f,  0.719702f,  0.917703f,  0.620141f,  0.600268f,  0.61861f,  1.063206f,  3.560066f,  0.750729f,  0.877708f,  1.903748f,  0.841177f,  0.772892f,  2.059789f,  0.725399f,  0.459062f,  0.742564f,  0.548094f,  0.635216f,  0.76494f,  0.591399f,  1.471249f,  0.84863f,  0.623325f,  0.881027f,  1.025981f,  0.453847f,  0.860568f,  0.487253f,  0.637192f,  0.783042f,  0.434545f,  0.349903f,  0.560066f,  0.682f,  0.544368f,  0.764204f,  1.883661f,  0.367006f,  0.284172f,  2.754229f,  0.446386f,  0.437756f,  0.830701f,  1.292005f,  0.239646f,  0.545287f,  0.652765f,  1.341658f,  1.780412f,  0.920977f,  0.732812f,  0.393809f,  0.507251f,  1.239206f,  0.516876f,  0.862408f,  0.229518f,  0.490037f,  0.614262f,  0.78931f,  0.750108f,  0.789305f,  0.693413f,  0.508449f,  0.822635f,  0.635486f,  0.32923f,  1.442916f,  0.868697f,  1.361265f,  0.302552f,  0.290945f,  1.86876f,  0.532368f,  0.702636f,  1.081928f,  0.499184f,  0.646999f,  0.413011f,  0.435923f,  0.512463f,  3.07381f,  1.034699f,  0.7993f,  0.34729f,  0.690319f,  0.623249f,  2.274461f,  1.196353f,  0.671535f,  0.879349f,  1.114808f,  0.928546f,  0.46428f,  1.056775f,  0.735567f,  0.608864f,  1.067317f,  1.348615f,  1.520577f,  0.784319f,  0.358237f,  0.532091f,  1.861774f,  1.187837f,  0.943298f,  0.789462f,  0.349226f,  0.475978f,  0.867907f,  0.68746f,  0.842891f,  0.374346f,  0.313281f,  1.464512f,  0.97775f,  0.852177f,  1.092765f,  0.380453f,  1.404925f,  0.680783f,  1.194934f,  0.525671f,  0.804062f,  0.349001f,  1.96819f,  0.508769f,  0.411381f,  0.28401f,  1.039824f,  0.330475f,  0.645735f,  0.700682f,  0.429514f,  0.81254f,  1.59104f,  0.740395f,  0.720723f,  0.577761f,  0.545718f,  0.566845f,  0.94613f,  0.955872f,  0.463795f,  0.559967f,  0.54383f,  0.384442f,  1.067846f,  1.011122f,  0.412122f,  0.839115f,  1.040941f,  0.35322f,  1.307938f,  0.354527f,  0.646304f,  2.912236f,  0.520626f,  1.188593f,  2.670856f,  0.675349f,  0.369278f,  0.254915f,  0.478757f,  0.772393f,  0.712099f,  0.849942f,  1.437601f,  1.013891f,  0.406221f,  0.427722f,  0.455779f,  2.825563f,  0.692434f,  0.559819f,  0.472854f,  0.507383f,  0.499096f,  0.827044f,  0.354759f,  0.317128f,  0.528192f,  1.612043f,  0.454503f,  0.358132f,  0.423855f,  0.649347f,  0.237891f,  0.464449f,  0.682968f,  0.790524f,  0.399913f,  0.608751f,  1.87607f,  0.610392f,  0.555395f,  1.332862f,  0.590012f,  1.410227f,  1.312539f,  1.077678f,  0.559296f,  0.711824f,  0.923589f,  0.475695f,  1.148718f,  0.537143f,  0.571567f,  0.575974f,  0.340498f,  0.870054f,  1.156006f,  0.560848f,  0.317867f,  0.507503f,  1.034194f,  0.698635f,  1.227646f,  2.553082f,  0.910753f,  0.857546f,  0.545882f,  0.431373f,  1.316332f,  1.300149f,  2.503534f,  0.685098f,  0.514866f,  1.247826f,  0.772285f,  0.88818f,  0.850369f,  0.726636f,  0.551924f,  0.795884f,  0.662051f,  0.744414f,  0.483064f,  1.168042f,  0.44774f,  1.349998f,  0.676633f,  0.812696f,  0.697419f,  0.715199f,  0.48205f,  0.880434f,  0.904256f,  0.510009f,  0.73472f,  0.75791f,  0.599908f,  0.826871f,  0.56359f,  0.852635f, };
const std::vector<float> fire2_expand1x1_calib = {
    0.215361f,  0.871283f,  0.369596f,  0.492804f,  16.952773f,  0.615632f,  0.303109f,  0.508248f,  0.273892f,  0.19117f,  1.00693f,  0.700493f,  0.27378f,  0.416551f,  0.350341f,  0.58661f,  0.602427f,  0.510069f,  0.192527f,  0.828906f,  0.164113f,  0.243816f,  0.511509f,  0.319154f,  0.543092f,  1.10135f,  0.417947f,  0.571766f,  0.187726f,  0.348053f,  0.32787f,  0.180991f,  0.492599f,  0.618453f,  0.672987f,  0.8535f,  0.386298f,  0.424812f,  1.682193f,  0.708713f,  0.250697f,  0.439048f,  0.411541f,  0.353132f,  0.525684f,  0.272616f,  0.49133f,  0.314826f,  0.497942f,  0.281453f,  0.963823f,  0.329133f,  0.300962f,  0.891597f,  0.367091f,  0.245822f,  0.684234f,  0.299994f,  0.599968f,  0.453674f,  0.438807f,  0.44254f,  0.618803f,  0.621404f, };
const std::vector<float> conv1_calib = {
    0.166783f,  0.844494f,  0.225297f,  0.454537f,  0.455605f,  0.494342f,  0.334372f,  0.818911f,  0.322933f,  0.70721f,  0.211962f,  0.382437f,  0.514495f,  0.940741f,  0.551644f,  0.254529f,  0.739869f,  0.583425f,  0.828376f,  0.887826f,  0.317261f,  0.29112f,  0.857841f,  0.450526f,  0.745997f,  0.279682f,  0.704628f,  0.356015f,  0.49918f,  0.445741f,  0.878814f,  0.282591f,  0.588783f,  0.796598f,  1.115238f,  0.588189f,  0.557962f,  0.214559f,  0.551977f,  0.713227f,  0.259876f,  0.733612f,  0.603274f,  0.264641f,  0.347606f,  0.678825f,  0.71113f,  0.26693f,  0.256357f,  0.144135f,  0.623032f,  0.367351f,  0.475992f,  0.351492f,  0.281074f,  0.198895f,  0.723667f,  0.686353f,  0.672684f,  0.420994f,  0.197714f,  0.37978f,  0.506588f,  0.316084f, };
const std::vector<float> fire6_expand3x3_calib = {
    0.171339f,  0.198047f,  0.237298f,  0.243882f,  0.216157f,  0.234368f,  0.280218f,  0.209647f,  0.158544f,  0.245536f,  0.219623f,  0.164168f,  0.139698f,  0.184933f,  0.286547f,  0.247462f,  0.511241f,  0.153075f,  0.168094f,  0.200455f,  0.134494f,  0.200544f,  0.317416f,  0.339273f,  0.32451f,  0.22674f,  0.163108f,  0.234086f,  0.159797f,  0.116855f,  0.264208f,  0.242581f,  0.146453f,  0.222931f,  0.202592f,  0.206735f,  0.182588f,  0.218614f,  0.486558f,  0.215884f,  0.112691f,  0.177224f,  0.181218f,  0.197377f,  0.263083f,  0.235079f,  0.183638f,  0.316185f,  0.114951f,  0.270318f,  0.155119f,  0.24976f,  0.207527f,  0.333179f,  0.178441f,  0.25644f,  0.230347f,  0.391657f,  0.222008f,  0.231886f,  0.190878f,  0.201436f,  0.185425f,  0.122558f,  0.122171f,  0.184159f,  0.169345f,  0.409035f,  0.360517f,  0.265902f,  0.203906f,  0.238751f,  0.124198f,  0.254904f,  0.222763f,  0.297098f,  0.199294f,  0.185213f,  0.193679f,  0.163248f,  0.103104f,  0.226564f,  0.134883f,  0.17874f,  0.225255f,  0.278602f,  0.273535f,  0.25854f,  0.342487f,  0.11164f,  0.172878f,  0.242545f,  0.136386f,  0.229574f,  0.169426f,  0.229649f,  0.190396f,  0.209056f,  0.207677f,  0.136753f,  0.180097f,  0.275733f,  0.179376f,  0.127839f,  0.21142f,  0.263033f,  0.16959f,  0.206247f,  0.296107f,  0.219683f,  0.113561f,  0.303773f,  0.203517f,  0.172951f,  0.147004f,  0.217044f,  0.14957f,  0.421399f,  0.114415f,  0.289329f,  0.293385f,  0.243323f,  0.239383f,  0.191187f,  0.254676f,  0.189099f,  0.16106f,  0.328757f,  0.097796f,  0.172762f,  0.15182f,  0.198723f,  0.244513f,  0.15899f,  0.269355f,  0.265876f,  0.253057f,  0.372059f,  0.174403f,  0.162646f,  0.232907f,  0.215447f,  0.206982f,  0.217224f,  0.330807f,  0.241222f,  0.214798f,  0.18811f,  0.197799f,  0.104951f,  0.26966f,  0.148317f,  0.192659f,  0.324012f,  0.203361f,  0.24168f,  0.200104f,  0.321465f,  0.167535f,  0.212307f,  0.246251f,  0.191539f,  0.1768f,  0.231408f,  0.168118f,  0.148614f,  0.223364f,  0.14753f,  0.245694f,  0.207963f,  0.277434f,  0.17517f,  0.303072f,  0.297879f,  0.277831f,  0.188596f,  0.163582f,  0.222829f,  0.226111f,  0.506715f,  0.130175f,  0.161842f,  0.274369f,  0.240818f,  0.149912f,  0.155725f,  0.316412f,  0.274718f,  0.260009f,  0.270591f,  0.135479f,  0.251911f, };
const std::vector<float> fire3_squeeze1x1_calib = {
    0.204002f,  0.210775f,  0.141754f,  0.265f,  0.216307f,  0.171183f,  0.223781f,  0.152294f,  0.235977f,  0.200564f,  0.210186f,  0.103281f,  0.117697f,  0.144294f,  0.144092f,  0.227291f, };
const std::vector<float> fire5_expand1x1_calib = {
    0.356075f,  0.223151f,  0.444757f,  0.459087f,  0.455892f,  0.40031f,  0.471861f,  0.476693f,  0.201117f,  0.0f,  0.293963f,  0.674388f,  0.331788f,  0.703917f,  0.395012f,  0.347526f,  0.43276f,  0.345505f,  0.314199f,  0.286677f,  0.319909f,  0.415728f,  0.555774f,  0.278708f,  0.267095f,  0.328401f,  0.372518f,  0.360529f,  0.389744f,  0.513378f,  0.406093f,  0.461722f,  0.259665f,  0.546669f,  0.357098f,  0.736172f,  0.389865f,  0.431299f,  0.196091f,  0.267045f,  0.318713f,  0.418533f,  0.424955f,  0.418783f,  0.229502f,  0.403654f,  0.278075f,  0.364151f,  0.418727f,  0.648072f,  0.587985f,  0.382003f,  0.400227f,  0.477736f,  0.24472f,  0.465016f,  0.410723f,  0.531899f,  0.324168f,  0.322201f,  0.217874f,  0.528067f,  0.518397f,  0.48402f,  0.270888f,  0.3554f,  0.257511f,  0.455404f,  0.350206f,  0.437631f,  0.5372f,  0.332411f,  0.369721f,  0.280065f,  0.367479f,  0.130734f,  0.332002f,  0.339384f,  0.426782f,  0.350404f,  0.319609f,  0.364658f,  0.398695f,  0.317537f,  0.443004f,  0.263094f,  0.438877f,  0.281275f,  0.301215f,  0.299395f,  0.529118f,  0.488306f,  0.497382f,  0.409555f,  0.314491f,  0.438733f,  0.355244f,  0.669542f,  0.435784f,  0.436953f,  0.272101f,  0.379202f,  0.301376f,  0.266092f,  0.535127f,  0.619425f,  0.379964f,  0.430411f,  0.269258f,  0.362433f,  0.3069f,  0.320903f,  0.36265f,  0.375422f,  0.535251f,  0.299489f,  0.450252f,  0.684943f,  0.201274f,  0.436642f,  0.371104f,  0.407359f,  0.305743f,  0.554852f,  0.368049f,  0.212276f,  0.262319f,  0.378422f, };
const std::vector<float> fire3_concat_calib = {
    0.475022f,  0.36729f,  0.421566f,  0.862297f,  0.226111f,  0.329786f,  0.334109f,  0.260232f,  0.278385f,  0.399287f,  0.181824f,  0.251152f,  0.449246f,  0.449308f,  0.412773f,  0.566062f,  0.309452f,  0.288163f,  0.182527f,  0.285934f,  0.501425f,  0.254681f,  0.453249f,  0.281351f,  0.271383f,  0.430869f,  0.450122f,  0.402119f,  0.374336f,  0.405864f,  0.859938f,  0.367449f,  0.51106f,  0.403226f,  0.368529f,  0.427128f,  0.234753f,  0.288873f,  0.210873f,  0.230082f,  0.302756f,  0.448893f,  0.380353f,  0.214124f,  0.418653f,  0.218128f,  0.876539f,  0.294543f,  0.251351f,  0.720375f,  0.294389f,  0.371774f,  0.361298f,  0.465775f,  0.263785f,  0.450711f,  0.21299f,  0.460302f,  0.527977f,  0.346233f,  0.395253f,  0.282815f,  0.28842f,  0.373228f,  0.221152f,  0.178509f,  0.189918f,  0.308161f,  0.222444f,  0.212792f,  0.190652f,  0.183134f,  0.218319f,  0.203841f,  0.190113f,  0.192115f,  0.22254f,  0.285595f,  0.237557f,  0.232594f,  0.243039f,  0.511626f,  0.157556f,  0.207115f,  0.245151f,  0.266482f,  0.142819f,  0.288569f,  0.210192f,  0.166165f,  0.197039f,  0.197046f,  0.259263f,  0.239229f,  0.240104f,  0.228861f,  0.225564f,  0.145248f,  0.167661f,  0.21488f,  0.178327f,  0.188685f,  0.259146f,  0.172309f,  0.237176f,  0.230242f,  0.226924f,  0.237072f,  0.372315f,  0.169295f,  0.153515f,  0.2658f,  0.367099f,  0.22536f,  0.209245f,  0.218378f,  0.238711f,  0.188833f,  0.197843f,  0.175158f,  0.215141f,  0.165102f,  0.206996f,  0.239426f,  0.338352f,  0.195969f,  0.244593f,  0.210245f, };
const std::vector<float> fire3_expand3x3_calib = {
    0.221152f,  0.178509f,  0.189918f,  0.308161f,  0.222444f,  0.212792f,  0.190652f,  0.183134f,  0.218319f,  0.203841f,  0.190113f,  0.192115f,  0.22254f,  0.285595f,  0.237557f,  0.232594f,  0.243039f,  0.511626f,  0.157556f,  0.207115f,  0.245151f,  0.266482f,  0.142819f,  0.288569f,  0.210192f,  0.166165f,  0.197039f,  0.197046f,  0.259263f,  0.239229f,  0.240104f,  0.228861f,  0.225564f,  0.145248f,  0.167661f,  0.21488f,  0.178327f,  0.188685f,  0.259146f,  0.172309f,  0.237176f,  0.230242f,  0.226924f,  0.237072f,  0.372315f,  0.169295f,  0.153515f,  0.2658f,  0.367099f,  0.22536f,  0.209245f,  0.218378f,  0.238711f,  0.188833f,  0.197843f,  0.175158f,  0.215141f,  0.165102f,  0.206996f,  0.239426f,  0.338352f,  0.195969f,  0.244593f,  0.210245f, };
const std::vector<float> fire5_concat_calib = {
    0.356075f,  0.223151f,  0.444757f,  0.459087f,  0.455892f,  0.40031f,  0.471861f,  0.476693f,  0.201117f,  0.0f,  0.293963f,  0.674388f,  0.331788f,  0.703917f,  0.395012f,  0.347526f,  0.43276f,  0.345505f,  0.314199f,  0.286677f,  0.319909f,  0.415728f,  0.555774f,  0.278708f,  0.267095f,  0.328401f,  0.372518f,  0.360529f,  0.389744f,  0.513378f,  0.406093f,  0.461722f,  0.259665f,  0.546669f,  0.357098f,  0.736172f,  0.389865f,  0.431299f,  0.196091f,  0.267045f,  0.318713f,  0.418533f,  0.424955f,  0.418783f,  0.229502f,  0.403654f,  0.278075f,  0.364151f,  0.418727f,  0.648072f,  0.587985f,  0.382003f,  0.400227f,  0.477736f,  0.24472f,  0.465016f,  0.410723f,  0.531899f,  0.324168f,  0.322201f,  0.217874f,  0.528067f,  0.518397f,  0.48402f,  0.270888f,  0.3554f,  0.257511f,  0.455404f,  0.350206f,  0.437631f,  0.5372f,  0.332411f,  0.369721f,  0.280065f,  0.367479f,  0.130734f,  0.332002f,  0.339384f,  0.426782f,  0.350404f,  0.319609f,  0.364658f,  0.398695f,  0.317537f,  0.443004f,  0.263094f,  0.438877f,  0.281275f,  0.301215f,  0.299395f,  0.529118f,  0.488306f,  0.497382f,  0.409555f,  0.314491f,  0.438733f,  0.355244f,  0.669542f,  0.435784f,  0.436953f,  0.272101f,  0.379202f,  0.301376f,  0.266092f,  0.535127f,  0.619425f,  0.379964f,  0.430411f,  0.269258f,  0.362433f,  0.3069f,  0.320903f,  0.36265f,  0.375422f,  0.535251f,  0.299489f,  0.450252f,  0.684943f,  0.201274f,  0.436642f,  0.371104f,  0.407359f,  0.305743f,  0.554852f,  0.368049f,  0.212276f,  0.262319f,  0.378422f,  0.171899f,  0.197355f,  0.268683f,  0.319805f,  0.255463f,  0.281136f,  0.198552f,  0.172088f,  0.254269f,  0.196144f,  0.132298f,  0.2499f,  0.177286f,  0.208075f,  0.256381f,  0.187988f,  0.234521f,  0.275867f,  0.288544f,  0.152398f,  0.302206f,  0.254999f,  0.247578f,  0.323487f,  0.179654f,  0.234971f,  0.247879f,  0.202144f,  0.230219f,  0.235037f,  0.226587f,  0.266454f,  0.246846f,  0.230201f,  0.219124f,  0.268526f,  0.211523f,  0.191818f,  0.247801f,  0.294594f,  0.192463f,  0.238626f,  0.236472f,  0.123068f,  0.254467f,  0.304649f,  0.211146f,  0.261075f,  0.228861f,  0.18493f,  0.206927f,  0.294455f,  0.165955f,  0.232754f,  0.297902f,  0.167687f,  0.252434f,  0.310732f,  0.25125f,  0.260658f,  0.240692f,  0.155382f,  0.155977f,  0.250112f,  0.276767f,  0.187497f,  0.190637f,  0.17144f,  0.179719f,  0.317211f,  0.376934f,  0.187876f,  0.219515f,  0.271475f,  0.279615f,  0.177072f,  0.250249f,  0.28262f,  0.262093f,  0.230838f,  0.135025f,  0.104407f,  0.249007f,  0.225086f,  0.214948f,  0.142307f,  0.272042f,  0.157757f,  0.214246f,  0.296981f,  0.121525f,  0.221993f,  0.20068f,  0.167416f,  0.246442f,  0.45916f,  0.284301f,  0.255578f,  0.248861f,  0.30405f,  0.229309f,  0.248594f,  0.216987f,  0.267104f,  0.15785f,  0.198377f,  0.223093f,  0.283672f,  0.210328f,  0.255131f,  0.226702f,  0.268639f,  0.223966f,  0.152367f,  0.194082f,  0.226573f,  0.198544f,  0.275495f,  0.195149f,  0.261424f,  0.210903f,  0.290563f,  0.317896f,  0.169861f,  0.171871f,  0.312975f,  0.160234f,  0.184049f, };
const std::vector<float> fire8_expand3x3_calib = {
    0.81367f,  0.262599f,  0.444645f,  0.593949f,  0.321117f,  0.962056f,  0.500757f,  0.413187f,  0.501156f,  0.38779f,  0.366841f,  0.318429f,  0.25277f,  0.42209f,  0.400638f,  0.223331f,  0.440394f,  0.56017f,  0.50418f,  0.584378f,  0.252975f,  0.504645f,  0.572973f,  0.409262f,  0.265363f,  0.397159f,  0.489756f,  0.183497f,  0.340582f,  0.221679f,  0.672424f,  0.647193f,  0.1252f,  0.363561f,  0.385727f,  0.246988f,  0.292425f,  0.37893f,  0.418338f,  0.579496f,  0.315876f,  0.320898f,  0.291626f,  0.337166f,  0.58105f,  0.555886f,  0.493503f,  0.260907f,  0.308261f,  0.46313f,  0.423278f,  0.87941f,  0.438395f,  0.359016f,  0.262422f,  0.824734f,  0.309504f,  0.490886f,  0.540111f,  1.022989f,  0.744113f,  0.443881f,  0.3612f,  0.698117f,  0.215026f,  0.337002f,  0.581656f,  0.490772f,  0.324158f,  0.339324f,  0.448269f,  0.347944f,  0.437946f,  0.17536f,  0.249158f,  0.532535f,  0.783578f,  1.422083f,  0.582499f,  0.729495f,  0.431493f,  0.155954f,  0.415413f,  0.352608f,  0.308105f,  0.841204f,  0.271403f,  0.58042f,  0.387038f,  0.194207f,  0.579324f,  0.806385f,  0.506571f,  0.625486f,  0.954378f,  0.259054f,  0.65937f,  0.222919f,  0.268548f,  0.151281f,  0.600008f,  0.769576f,  0.456427f,  0.366722f,  0.506139f,  0.235656f,  0.43602f,  0.680907f,  0.484228f,  0.278789f,  0.221299f,  0.352203f,  0.504314f,  0.645404f,  0.448397f,  0.551443f,  0.829675f,  0.432365f,  0.468094f,  0.164935f,  0.17385f,  0.352135f,  0.503126f,  0.175628f,  0.586424f,  0.530672f,  0.780146f,  0.793944f,  0.458214f,  0.550236f,  0.426704f,  0.410069f,  0.351163f,  0.964672f,  0.730288f,  0.399893f,  0.348102f,  0.542133f,  0.326404f,  0.651135f,  0.274057f,  0.336166f,  0.302667f,  0.460122f,  0.307624f,  0.328683f,  0.500169f,  0.464975f,  0.430539f,  0.316252f,  0.535756f,  0.289229f,  0.285595f,  0.507663f,  0.652956f,  0.343309f,  0.545425f,  0.306938f,  0.4262f,  1.253875f,  0.158243f,  0.462734f,  0.293715f,  0.648532f,  0.738295f,  0.454539f,  0.298774f,  0.625074f,  0.326501f,  0.510996f,  0.388883f,  0.382185f,  0.34862f,  0.618044f,  0.498067f,  0.26782f,  0.376003f,  0.206249f,  0.526202f,  0.43794f,  0.422055f,  0.43822f,  0.157822f,  0.543634f,  0.390597f,  0.583599f,  0.474864f,  0.427926f,  0.522593f,  0.355473f,  0.426159f,  0.593816f,  0.326197f,  0.481919f,  0.618234f,  0.412344f,  0.57778f,  0.538231f,  0.467486f,  0.256901f,  0.465229f,  0.481066f,  0.489016f,  0.518118f,  0.39004f,  0.64243f,  0.335685f,  0.345906f,  0.222469f,  0.330927f,  0.349512f,  0.602513f,  0.276146f,  0.66528f,  0.525275f,  0.364265f,  0.641541f,  0.293954f,  0.767757f,  0.608523f,  0.457785f,  0.362229f,  0.421396f,  0.620981f,  0.619639f,  0.690465f,  0.319696f,  0.589776f,  0.452592f,  0.521758f,  0.362345f,  0.771502f,  0.329602f,  0.369653f,  0.355572f,  0.153557f,  0.635706f,  0.488445f,  0.675518f,  1.040327f,  0.588925f,  0.957732f,  0.479471f,  0.318407f,  0.463952f,  0.558394f,  0.750077f,  0.741831f,  0.467978f,  0.342059f,  0.540076f,  0.480624f,  0.192633f,  0.621729f,  0.37555f,  0.466776f, };
const std::vector<float> fire9_squeeze1x1_calib = {
    0.290897f,  0.331587f,  0.143285f,  0.342167f,  0.276743f,  0.160615f,  0.25249f,  0.354135f,  0.295421f,  0.379953f,  0.447904f,  0.392123f,  0.306961f,  0.27451f,  0.313354f,  0.25596f,  0.231409f,  0.479676f,  0.193285f,  0.209973f,  0.267127f,  0.389261f,  0.437078f,  0.46029f,  0.453458f,  0.439132f,  0.178353f,  0.445214f,  0.349276f,  0.332638f,  0.376681f,  0.269489f,  0.209376f,  0.400608f,  0.399266f,  0.34672f,  0.156477f,  0.446229f,  0.342147f,  0.368323f,  0.31478f,  0.240043f,  0.249977f,  0.168041f,  0.168027f,  0.153291f,  0.301843f,  0.311696f,  0.428898f,  0.315944f,  0.098757f,  0.26403f,  0.371696f,  0.234207f,  0.337345f,  0.475242f,  0.135017f,  0.310637f,  0.736556f,  0.163092f,  0.272038f,  0.295041f,  0.17845f,  0.238619f, };
const std::vector<float> fire4_expand3x3_calib = {
    0.248077f,  0.162844f,  0.185586f,  0.24288f,  0.121493f,  0.210225f,  0.164909f,  0.164414f,  0.228277f,  0.263168f,  0.072662f,  0.175591f,  0.117153f,  0.167098f,  0.10527f,  0.127777f,  0.17334f,  0.204137f,  0.13532f,  0.091147f,  0.15146f,  0.187867f,  0.287237f,  0.208178f,  0.213533f,  0.254001f,  0.29507f,  0.223477f,  0.148894f,  0.257397f,  0.149546f,  0.105497f,  0.324548f,  0.185868f,  0.210042f,  0.180132f,  0.190172f,  0.2889f,  0.299473f,  0.207385f,  0.269533f,  0.17833f,  0.16405f,  0.253621f,  0.25935f,  0.092026f,  0.180459f,  0.221893f,  0.194679f,  0.357664f,  0.231585f,  0.179269f,  0.267099f,  0.215521f,  0.205109f,  0.134068f,  0.234927f,  0.232878f,  0.147578f,  0.178185f,  0.158946f,  0.238829f,  0.334988f,  0.138153f,  0.224353f,  0.166637f,  0.202598f,  0.201702f,  0.193369f,  0.12887f,  0.187674f,  0.152101f,  0.131985f,  0.193782f,  0.220862f,  0.093956f,  0.142057f,  0.064769f,  0.276337f,  0.233686f,  0.137446f,  0.272808f,  0.145737f,  0.23258f,  0.22529f,  0.214409f,  0.156442f,  0.222366f,  0.298061f,  0.235017f,  0.204338f,  0.164553f,  0.235689f,  0.187057f,  0.322884f,  0.309977f,  0.255204f,  0.256469f,  0.189315f,  0.122077f,  0.1473f,  0.176234f,  0.149738f,  0.187145f,  0.122046f,  0.16437f,  0.152872f,  0.126156f,  0.125871f,  0.220358f,  0.190542f,  0.145284f,  0.175137f,  0.12461f,  0.235898f,  0.127592f,  0.128848f,  0.230933f,  0.171674f,  0.240172f,  0.082744f,  0.136997f,  0.211573f,  0.198347f,  0.175785f,  0.215822f,  0.53705f,  0.117846f, };
const std::vector<float> fire5_squeeze1x1_calib = {
    0.168193f,  0.174408f,  0.144725f,  0.12813f,  0.161687f,  0.169243f,  0.148827f,  0.158771f,  0.1809f,  0.110443f,  0.140036f,  0.132082f,  0.150189f,  0.207386f,  0.167409f,  0.238668f,  0.137582f,  0.094294f,  0.121954f,  0.146717f,  0.11756f,  0.118209f,  0.140669f,  0.1313f,  0.143539f,  0.191396f,  0.115862f,  0.17536f,  0.179743f,  0.093195f,  0.197714f,  0.146386f, };
const std::vector<float> fire6_squeeze1x1_calib = {
    0.235282f,  0.129521f,  0.18727f,  0.133035f,  0.220743f,  0.164026f,  0.134735f,  0.135818f,  0.124903f,  0.1263f,  0.115031f,  0.142152f,  0.162323f,  0.11765f,  0.101159f,  0.191233f,  0.199702f,  0.088953f,  0.113512f,  0.169943f,  0.092098f,  0.16109f,  0.142209f,  0.132393f,  0.140162f,  0.190828f,  0.087247f,  0.162218f,  0.122721f,  0.128182f,  0.175491f,  0.110222f,  0.145842f,  0.1312f,  0.155914f,  0.095258f,  0.164637f,  0.199396f,  0.127835f,  0.09564f,  0.117122f,  0.157854f,  0.143131f,  0.159709f,  0.173701f,  0.150608f,  0.186078f,  0.083163f, };
const std::vector<float> conv10_calib = {
    1.204888f,  1.218997f,  1.214474f,  1.225112f,  1.566464f,  0.775544f,  1.111169f,  0.980347f,  1.05843f,  0.933892f,  1.096103f,  1.348949f,  0.725797f,  1.165512f,  1.377688f,  1.16126f,  0.927766f,  1.176678f,  1.974036f,  1.319105f,  1.161791f,  1.074041f,  0.829453f,  1.083331f,  0.832154f,  1.139044f,  1.171684f,  1.914505f,  1.185431f,  1.196307f,  1.164294f,  1.02869f,  1.050272f,  0.950748f,  1.112698f,  0.966316f,  0.971743f,  0.991281f,  1.179234f,  0.994752f,  2.21242f,  1.023006f,  1.716158f,  1.546969f,  1.105915f,  1.154378f,  1.444272f,  1.045973f,  0.875132f,  1.329743f,  1.474878f,  1.125847f,  1.443093f,  1.70236f,  1.098768f,  2.337115f,  1.49768f,  1.547761f,  1.359724f,  1.846693f,  1.361884f,  1.305917f,  1.380723f,  0.924962f,  1.396988f,  1.82582f,  1.06449f,  1.233022f,  1.095413f,  1.555595f,  1.289796f,  1.614221f,  1.585645f,  1.288923f,  1.514933f,  1.558254f,  1.216126f,  1.41281f,  1.035543f,  1.155943f,  0.945053f,  0.915414f,  0.984534f,  0.965332f,  1.328191f,  1.009066f,  0.99242f,  0.778945f,  1.208419f,  0.977374f,  1.628084f,  1.212052f,  2.191843f,  1.299002f,  1.547848f,  2.298143f,  2.05223f,  1.182881f,  1.30021f,  1.428094f,  1.716469f,  0.945869f,  1.01793f,  0.951639f,  0.771427f,  0.74745f,  0.852f,  1.263468f,  2.017135f,  0.932877f,  1.303262f,  1.610998f,  1.223177f,  1.414821f,  1.44764f,  1.685524f,  1.165245f,  0.921806f,  1.415409f,  1.160824f,  1.200412f,  1.599095f,  1.341484f,  1.565391f,  1.790631f,  1.173037f,  1.280433f,  1.402079f,  1.185797f,  1.843345f,  1.492958f,  2.315241f,  2.501329f,  1.011839f,  1.443896f,  0.951639f,  1.841738f,  1.418022f,  0.904629f,  1.130799f,  0.95379f,  0.984077f,  0.865948f,  1.329819f,  1.180813f,  1.412393f,  1.751792f,  1.262702f,  1.419851f,  0.849669f,  0.958122f,  0.694088f,  0.794753f,  0.704874f,  0.611397f,  0.864381f,  1.360142f,  0.873957f,  0.7927f,  0.8849f,  1.175784f,  0.910368f,  0.816783f,  1.224604f,  0.92089f,  0.935881f,  0.775274f,  0.832776f,  0.984115f,  0.934469f,  0.964057f,  0.769888f,  0.710406f,  1.049882f,  0.755584f,  1.099072f,  0.968298f,  0.997181f,  0.973225f,  1.103916f,  0.893668f,  0.831723f,  0.818441f,  1.133139f,  0.924847f,  1.016106f,  0.725229f,  0.699813f,  0.883269f,  0.911073f,  0.875838f,  0.674019f,  0.808341f,  0.78687f,  0.723296f,  0.843036f,  0.806088f,  0.998247f,  0.915764f,  0.6772f,  0.859316f,  0.871224f,  1.054511f,  0.627625f,  0.746782f,  1.062797f,  0.796758f,  0.760261f,  0.812072f,  0.973247f,  1.251898f,  1.134587f,  0.81619f,  1.04301f,  1.48028f,  1.090784f,  0.772929f,  0.995696f,  1.037785f,  0.959388f,  1.302837f,  0.987712f,  0.818457f,  0.771961f,  0.805786f,  0.796598f,  1.108589f,  0.777424f,  0.864934f,  0.741489f,  0.918526f,  0.845872f,  1.005399f,  1.027974f,  0.986186f,  0.774787f,  0.830152f,  0.97236f,  1.367282f,  1.265482f,  0.743991f,  0.752347f,  0.902424f,  1.070483f,  0.887274f,  0.82096f,  0.922067f,  1.088074f,  0.796378f,  0.7956f,  0.818462f,  0.687702f,  0.902226f,  0.726965f,  0.871995f,  0.998671f,  1.081348f,  0.897856f,  0.545481f,  0.524399f,  0.636888f,  0.625933f,  1.060091f,  0.86972f,  0.909703f,  0.652262f,  0.708745f,  0.684972f,  0.924632f,  0.729332f,  0.648614f,  0.698401f,  0.722223f,  0.650765f,  0.769818f,  0.894133f,  0.792245f,  0.74062f,  0.707718f,  0.721513f,  0.6926f,  0.966485f,  0.97919f,  0.706474f,  0.781308f,  0.834034f,  0.692109f,  0.692914f,  0.513619f,  0.633774f,  0.518547f,  0.925818f,  0.990446f,  0.56837f,  0.728913f,  0.96454f,  0.718574f,  0.845748f,  0.859537f,  0.779246f,  1.888212f,  1.515126f,  1.460154f,  1.499845f,  1.567998f,  1.020474f,  1.161111f,  0.766136f,  1.218623f,  1.234712f,  1.645986f,  1.417694f,  1.593691f,  1.671006f,  1.007369f,  2.03023f,  1.378355f,  1.344437f,  1.393546f,  1.405163f,  1.604088f,  1.637364f,  1.061935f,  1.479109f,  0.970436f,  1.706819f,  0.971587f,  1.193295f,  1.045362f,  1.103455f,  0.918785f,  0.900588f,  0.712367f,  0.988112f,  0.983993f,  0.95369f,  1.079501f,  0.85602f,  1.128107f,  0.963486f,  1.237117f,  0.852818f,  0.82607f,  0.950492f,  1.131292f,  0.960695f,  0.981749f,  0.908993f,  0.827173f,  0.903599f,  1.221518f,  1.352774f,  1.270236f,  1.217711f,  0.998781f,  0.857737f,  0.996657f,  0.952438f,  0.823889f,  0.920477f,  0.843008f,  0.975865f,  0.736689f,  1.108357f,  0.956693f,  0.905513f,  1.005749f,  0.892267f,  0.876418f,  1.048192f,  0.964042f,  0.884857f,  0.946081f,  0.778706f,  0.910675f,  0.914966f,  1.053321f,  0.760292f,  0.693618f,  0.803904f,  0.746879f,  0.908441f,  0.701107f,  1.028523f,  1.058025f,  1.00435f,  1.162205f,  0.670397f,  0.69364f,  0.967118f,  1.052701f,  1.126356f,  1.630404f,  2.433398f,  1.133736f,  1.308311f,  1.568835f,  0.852183f,  1.622298f,  2.347179f,  1.749292f,  1.142847f,  1.706317f,  1.646532f,  0.969044f,  1.554353f,  1.5886f,  2.163805f,  1.649908f,  1.588221f,  1.157692f,  1.704558f,  1.621609f,  2.043993f,  1.380348f,  1.19791f,  1.560952f,  1.176732f,  1.165148f,  1.257052f,  0.903979f,  1.495821f,  1.571331f,  1.503902f,  1.212318f,  1.789552f,  1.123198f,  1.323791f,  1.035281f,  1.418757f,  1.569186f,  1.26725f,  1.2976f,  1.370138f,  1.066958f,  1.089614f,  1.179223f,  1.364542f,  1.365352f,  1.081127f,  1.251922f,  1.186705f,  1.381205f,  1.014839f,  1.297229f,  1.430862f,  1.669519f,  1.06391f,  1.681095f,  2.024417f,  1.651296f,  1.007993f,  1.305482f,  1.491169f,  0.816783f,  1.369485f,  1.32512f,  1.225762f,  1.757525f,  1.280863f,  1.068709f,  1.224132f,  1.369387f,  1.102306f,  0.973404f,  1.237383f,  1.376191f,  1.392136f,  1.575012f,  1.149821f,  0.971758f,  1.335053f,  0.999142f,  1.194934f,  1.235853f,  1.59108f,  1.214045f,  1.718064f,  1.060968f,  1.501992f,  1.607312f,  1.379226f,  1.573496f,  1.272026f,  1.387376f,  1.773983f,  1.494805f,  1.269898f,  2.068673f,  1.614492f,  1.305851f,  1.728369f,  1.466921f,  1.437188f,  1.267174f,  1.468164f,  1.357682f,  0.972457f,  1.165961f,  1.381151f,  1.956971f,  1.564535f,  1.758501f,  1.075214f,  0.974681f,  0.995993f,  1.393912f,  1.1693f,  0.912396f,  1.59895f,  2.187528f,  1.246528f,  1.723569f,  1.66638f,  1.430828f,  1.397312f,  1.347219f,  1.631797f,  1.472327f,  1.815855f,  1.285305f,  0.911368f,  1.23392f,  1.853195f,  1.342906f,  1.757739f,  1.565663f,  1.414599f,  1.394849f,  1.685882f,  1.366936f,  1.803096f,  1.821938f,  1.2809f,  1.111306f,  0.980422f,  1.399481f,  0.896304f,  1.708578f,  1.241908f,  1.377406f,  1.187027f,  1.639169f,  1.416502f,  1.247728f,  1.073887f,  1.668732f,  1.921474f,  1.836258f,  1.539049f,  1.075296f,  1.568653f,  1.244695f,  2.130669f,  1.499362f,  1.64183f,  1.02894f,  1.930044f,  1.31197f,  1.303184f,  1.508154f,  1.525075f,  1.016968f,  1.345283f,  1.705641f,  1.497054f,  1.340021f,  1.263455f,  1.165277f,  1.761941f,  0.956887f,  1.435278f,  1.242042f,  1.489146f,  1.303016f,  1.875616f,  1.761792f,  1.070718f,  1.811181f,  1.536706f,  1.681941f,  1.17216f,  1.422976f,  1.954198f,  1.132452f,  1.318092f,  1.467903f,  1.653514f,  1.239024f,  1.244183f,  1.564828f,  1.003334f,  1.429194f,  1.111393f,  1.454477f,  1.61525f,  1.716789f,  2.084985f,  1.902297f,  1.165555f,  1.263304f,  1.625186f,  1.202583f,  1.054362f,  1.14795f,  1.185376f,  1.598751f,  1.372605f,  1.54381f,  1.282463f,  1.820911f,  0.927861f,  1.451108f,  1.506694f,  1.7847f,  1.168095f,  1.960176f,  1.426131f,  1.404522f,  1.184481f,  1.004286f,  1.962005f,  1.149509f,  1.235288f,  0.979832f,  1.030317f,  1.290488f,  1.007217f,  1.481343f,  1.599881f,  2.099961f,  0.853334f,  1.699893f,  1.540378f,  1.43102f,  1.581252f,  1.118115f,  1.148126f,  1.672034f,  1.482877f,  1.118736f,  1.385598f,  1.070086f,  1.133595f,  0.871391f,  1.464664f,  1.152848f,  1.526738f,  1.494972f,  1.871497f,  1.509213f,  1.335435f,  1.414177f,  0.869494f,  1.161823f,  1.734089f,  1.487856f,  2.026242f,  1.216067f,  1.183068f,  1.408151f,  1.75773f,  1.523483f,  1.824629f,  1.199018f,  1.600514f,  1.652484f,  1.273328f,  1.738821f,  1.635026f,  0.965376f,  1.650056f,  1.287607f,  0.868946f,  1.173785f,  1.128327f,  0.770122f,  1.432964f,  1.146872f,  1.384782f,  0.818943f,  1.053251f,  1.282255f,  1.113088f,  1.293686f,  1.839084f,  1.336683f,  1.279687f,  1.121017f,  1.50515f,  1.178108f,  1.011243f,  1.381298f,  1.70252f,  1.612555f,  1.55171f,  1.37294f,  1.69694f,  1.049995f,  1.029966f,  1.172604f,  1.57897f,  1.337052f,  1.483213f,  1.334095f,  1.385954f,  2.245999f,  0.8074f,  1.597695f,  0.990161f,  1.113312f,  1.534608f,  1.368285f,  1.028532f,  1.336152f,  1.011864f,  1.176176f,  1.762572f,  1.816905f,  1.011646f,  1.469032f,  1.509335f,  1.292576f,  1.290382f,  1.81558f,  1.659933f,  1.608976f,  1.87958f,  1.020884f,  1.307875f,  1.568713f,  1.130004f,  1.084942f,  1.521765f,  1.472597f,  1.363914f,  1.30975f,  1.191616f,  1.564484f,  1.947479f,  1.523456f,  0.997855f,  0.98093f,  1.635687f,  1.502493f,  1.80948f,  1.45922f,  0.937159f,  1.49762f,  1.168418f,  1.31554f,  1.299053f,  1.540073f,  1.546408f,  1.493064f,  0.92259f,  1.193822f,  1.485345f,  1.160634f,  1.287924f,  1.319437f,  0.980203f,  1.721663f,  1.512982f,  1.656286f,  1.417789f,  1.274234f,  1.41398f,  1.396171f,  1.238891f,  1.838209f,  1.026072f,  1.102459f,  0.94367f,  2.187539f,  1.714092f,  1.216382f,  1.917068f,  1.152848f,  1.683428f,  2.002359f,  1.254829f,  1.161281f,  1.327834f,  1.490579f,  1.379307f,  1.706496f,  1.134851f,  1.001688f,  1.266391f,  1.220016f,  1.649567f,  1.564882f,  1.529015f,  1.252787f,  2.071028f,  1.387216f,  1.159828f,  1.584319f,  1.368896f,  1.307015f,  1.250739f,  1.94011f,  2.037974f,  0.926014f,  1.061207f,  1.659376f,  1.272731f,  1.382379f,  1.066976f,  1.489572f,  1.032957f,  1.424158f,  1.165533f,  1.037505f,  1.694994f,  1.775097f,  1.158431f,  1.798177f,  1.287754f,  1.160178f,  1.090045f,  1.078309f,  0.94461f,  1.345296f,  1.951642f,  1.129823f,  1.111734f,  1.180605f,  1.693708f,  1.162471f,  1.356858f,  1.376868f,  1.921357f,  1.590847f,  1.288839f,  1.39968f,  1.497242f,  1.274536f,  2.243353f,  1.233201f,  1.577879f,  1.310934f,  1.505062f,  1.272549f,  1.239339f,  1.488179f,  1.467889f,  1.47045f,  1.33142f,  0.872379f,  1.214184f,  0.873002f,  1.607467f,  1.35069f,  0.963515f,  1.168923f,  1.241641f,  1.555919f,  1.265268f,  1.328135f,  1.374689f,  1.35681f,  1.444263f,  2.052293f,  0.901598f,  1.444301f,  1.195688f,  1.153266f,  1.904865f,  1.495752f,  1.47728f,  1.427205f,  1.458245f,  1.332796f,  1.153811f,  1.064231f,  2.659307f,  2.119588f,  0.950869f,  1.623194f,  1.675563f,  2.020977f,  1.318004f,  1.32114f,  1.639922f,  1.120018f,  1.711874f,  2.535897f,  1.363835f,  1.600774f,  0.863059f,  1.41476f,  1.358284f,  1.446934f,  1.339993f,  1.253232f,  0.861397f,  1.417889f,  1.452222f,  1.842035f,  1.264285f,  0.973882f,  1.007225f,  1.441766f,  1.278695f,  1.511336f,  1.510649f,  2.437629f,  1.214695f,  1.367826f,  1.165309f,  1.457025f,  1.575596f,  1.413289f,  1.317913f,  1.383848f,  1.221048f,  0.932829f,  1.773248f,  2.46455f,  1.243477f,  1.209443f,  1.460284f,  1.874436f,  1.541614f,  1.103312f,  1.344941f,  1.513862f,  0.969651f,  1.322823f,  1.285372f,  1.272849f,  1.400397f,  1.624878f,  1.345261f,  2.221251f,  1.003992f,  1.741506f,  1.335274f,  1.442785f,  1.822788f,  1.803693f,  1.91557f,  1.11515f,  1.91225f,  1.778495f,  1.264147f,  1.048132f,  1.027059f,  1.962141f,  1.700944f,  1.550607f,  1.29685f,  1.191973f,  1.605078f,  1.459188f,  1.340913f,  1.48467f,  1.264172f,  2.062763f,  1.424409f,  1.852535f,  1.164988f,  1.374239f,  1.353737f,  1.238372f,  1.596045f,  1.289483f,  1.462977f,  2.026342f,  1.20056f,  1.97992f,  1.293587f,  0.773499f,  1.729041f,  1.297551f,  1.278192f,  1.649899f,  1.994895f,  1.186994f,  1.771506f,  1.552036f,  1.109296f,  2.02433f,  2.045006f,  1.665305f,  0.919504f,  1.223943f,  1.625852f,  1.054747f,  1.532926f,  2.121231f,  1.295528f,  1.036041f,  1.05843f,  1.341961f,  1.249779f,  0.876951f,  1.290296f, };
const std::vector<float> fire3_expand1x1_calib = {
    0.475022f,  0.36729f,  0.421566f,  0.862297f,  0.226111f,  0.329786f,  0.334109f,  0.260232f,  0.278385f,  0.399287f,  0.181824f,  0.251152f,  0.449246f,  0.449308f,  0.412773f,  0.566062f,  0.309452f,  0.288163f,  0.182527f,  0.285934f,  0.501425f,  0.254681f,  0.453249f,  0.281351f,  0.271383f,  0.430869f,  0.450122f,  0.402119f,  0.374336f,  0.405864f,  0.859938f,  0.367449f,  0.51106f,  0.403226f,  0.368529f,  0.427128f,  0.234753f,  0.288873f,  0.210873f,  0.230082f,  0.302756f,  0.448893f,  0.380353f,  0.214124f,  0.418653f,  0.218128f,  0.876539f,  0.294543f,  0.251351f,  0.720375f,  0.294389f,  0.371774f,  0.361298f,  0.465775f,  0.263785f,  0.450711f,  0.21299f,  0.460302f,  0.527977f,  0.346233f,  0.395253f,  0.282815f,  0.28842f,  0.373228f, };
const std::vector<float> fire7_squeeze1x1_calib = {
    0.139947f,  0.275781f,  0.202304f,  0.211293f,  0.319959f,  0.08933f,  0.153774f,  0.196175f,  0.125821f,  0.161539f,  0.162112f,  0.221499f,  0.150142f,  0.239628f,  0.166398f,  0.189581f,  0.191552f,  0.26363f,  0.105261f,  0.268351f,  0.113126f,  0.17901f,  0.206399f,  0.212207f,  0.13994f,  0.253414f,  0.188851f,  0.207717f,  0.123887f,  0.164645f,  0.163587f,  0.223816f,  0.190259f,  0.14034f,  0.13812f,  0.181104f,  0.191797f,  0.173999f,  0.160148f,  0.231291f,  0.159025f,  0.146751f,  0.211333f,  0.233676f,  0.139351f,  0.173052f,  0.112856f,  0.142926f, };
const std::vector<float> fire5_expand3x3_calib = {
    0.171899f,  0.197355f,  0.268683f,  0.319805f,  0.255463f,  0.281136f,  0.198552f,  0.172088f,  0.254269f,  0.196144f,  0.132298f,  0.2499f,  0.177286f,  0.208075f,  0.256381f,  0.187988f,  0.234521f,  0.275867f,  0.288544f,  0.152398f,  0.302206f,  0.254999f,  0.247578f,  0.323487f,  0.179654f,  0.234971f,  0.247879f,  0.202144f,  0.230219f,  0.235037f,  0.226587f,  0.266454f,  0.246846f,  0.230201f,  0.219124f,  0.268526f,  0.211523f,  0.191818f,  0.247801f,  0.294594f,  0.192463f,  0.238626f,  0.236472f,  0.123068f,  0.254467f,  0.304649f,  0.211146f,  0.261075f,  0.228861f,  0.18493f,  0.206927f,  0.294455f,  0.165955f,  0.232754f,  0.297902f,  0.167687f,  0.252434f,  0.310732f,  0.25125f,  0.260658f,  0.240692f,  0.155382f,  0.155977f,  0.250112f,  0.276767f,  0.187497f,  0.190637f,  0.17144f,  0.179719f,  0.317211f,  0.376934f,  0.187876f,  0.219515f,  0.271475f,  0.279615f,  0.177072f,  0.250249f,  0.28262f,  0.262093f,  0.230838f,  0.135025f,  0.104407f,  0.249007f,  0.225086f,  0.214948f,  0.142307f,  0.272042f,  0.157757f,  0.214246f,  0.296981f,  0.121525f,  0.221993f,  0.20068f,  0.167416f,  0.246442f,  0.45916f,  0.284301f,  0.255578f,  0.248861f,  0.30405f,  0.229309f,  0.248594f,  0.216987f,  0.267104f,  0.15785f,  0.198377f,  0.223093f,  0.283672f,  0.210328f,  0.255131f,  0.226702f,  0.268639f,  0.223966f,  0.152367f,  0.194082f,  0.226573f,  0.198544f,  0.275495f,  0.195149f,  0.261424f,  0.210903f,  0.290563f,  0.317896f,  0.169861f,  0.171871f,  0.312975f,  0.160234f,  0.184049f, };
const std::vector<float> fire4_expand1x1_calib = {
    0.487554f,  0.604046f,  0.251045f,  0.260265f,  0.474296f,  0.361915f,  0.291872f,  0.446875f,  0.413191f,  0.529103f,  0.335788f,  0.427023f,  0.414552f,  0.996243f,  0.181441f,  0.223122f,  0.582457f,  0.218269f,  0.4852f,  0.354948f,  0.456526f,  0.304199f,  0.448855f,  0.434672f,  0.429324f,  0.19646f,  0.596177f,  0.211534f,  0.353856f,  0.264511f,  0.28944f,  0.459917f,  0.404645f,  0.500152f,  0.533423f,  0.458303f,  0.338108f,  0.297724f,  0.288044f,  0.341591f,  0.315624f,  0.303168f,  0.318979f,  0.212632f,  0.587354f,  0.331318f,  0.334193f,  0.3793f,  0.314783f,  0.519455f,  0.412132f,  0.307132f,  0.297319f,  0.371615f,  0.294353f,  0.236509f,  0.376839f,  0.324241f,  0.261574f,  0.309187f,  0.491836f,  0.4581f,  0.500292f,  0.311018f,  0.361268f,  0.328746f,  0.39728f,  0.273613f,  0.582521f,  0.189069f,  0.669902f,  0.407849f,  0.371418f,  0.277385f,  0.35639f,  0.499575f,  0.383481f,  0.470491f,  0.475618f,  0.42302f,  0.757965f,  0.41722f,  0.145798f,  0.417537f,  0.444463f,  0.271789f,  0.464815f,  0.335815f,  0.388097f,  0.31541f,  0.2355f,  0.39388f,  0.643732f,  0.58945f,  0.671237f,  0.351448f,  0.414945f,  0.391476f,  0.29846f,  0.83088f,  0.222346f,  0.311526f,  0.290821f,  0.251652f,  0.377736f,  0.352622f,  0.398308f,  0.214867f,  0.361856f,  0.347729f,  0.494994f,  0.26053f,  0.379447f,  0.258435f,  0.246514f,  0.293927f,  0.189269f,  0.353821f,  0.487974f,  0.561731f,  0.235238f,  0.310253f,  0.441507f,  0.437304f,  0.394241f,  0.308481f,  0.271392f,  0.215492f, };
const std::vector<float> fire4_concat_calib = {
    0.487554f,  0.604046f,  0.251045f,  0.260265f,  0.474296f,  0.361915f,  0.291872f,  0.446875f,  0.413191f,  0.529103f,  0.335788f,  0.427023f,  0.414552f,  0.996243f,  0.181441f,  0.223122f,  0.582457f,  0.218269f,  0.4852f,  0.354948f,  0.456526f,  0.304199f,  0.448855f,  0.434672f,  0.429324f,  0.19646f,  0.596177f,  0.211534f,  0.353856f,  0.264511f,  0.28944f,  0.459917f,  0.404645f,  0.500152f,  0.533423f,  0.458303f,  0.338108f,  0.297724f,  0.288044f,  0.341591f,  0.315624f,  0.303168f,  0.318979f,  0.212632f,  0.587354f,  0.331318f,  0.334193f,  0.3793f,  0.314783f,  0.519455f,  0.412132f,  0.307132f,  0.297319f,  0.371615f,  0.294353f,  0.236509f,  0.376839f,  0.324241f,  0.261574f,  0.309187f,  0.491836f,  0.4581f,  0.500292f,  0.311018f,  0.361268f,  0.328746f,  0.39728f,  0.273613f,  0.582521f,  0.189069f,  0.669902f,  0.407849f,  0.371418f,  0.277385f,  0.35639f,  0.499575f,  0.383481f,  0.470491f,  0.475618f,  0.42302f,  0.757965f,  0.41722f,  0.145798f,  0.417537f,  0.444463f,  0.271789f,  0.464815f,  0.335815f,  0.388097f,  0.31541f,  0.2355f,  0.39388f,  0.643732f,  0.58945f,  0.671237f,  0.351448f,  0.414945f,  0.391476f,  0.29846f,  0.83088f,  0.222346f,  0.311526f,  0.290821f,  0.251652f,  0.377736f,  0.352622f,  0.398308f,  0.214867f,  0.361856f,  0.347729f,  0.494994f,  0.26053f,  0.379447f,  0.258435f,  0.246514f,  0.293927f,  0.189269f,  0.353821f,  0.487974f,  0.561731f,  0.235238f,  0.310253f,  0.441507f,  0.437304f,  0.394241f,  0.308481f,  0.271392f,  0.215492f,  0.248077f,  0.162844f,  0.185586f,  0.24288f,  0.121493f,  0.210225f,  0.164909f,  0.164414f,  0.228277f,  0.263168f,  0.072662f,  0.175591f,  0.117153f,  0.167098f,  0.10527f,  0.127777f,  0.17334f,  0.204137f,  0.13532f,  0.091147f,  0.15146f,  0.187867f,  0.287237f,  0.208178f,  0.213533f,  0.254001f,  0.29507f,  0.223477f,  0.148894f,  0.257397f,  0.149546f,  0.105497f,  0.324548f,  0.185868f,  0.210042f,  0.180132f,  0.190172f,  0.2889f,  0.299473f,  0.207385f,  0.269533f,  0.17833f,  0.16405f,  0.253621f,  0.25935f,  0.092026f,  0.180459f,  0.221893f,  0.194679f,  0.357664f,  0.231585f,  0.179269f,  0.267099f,  0.215521f,  0.205109f,  0.134068f,  0.234927f,  0.232878f,  0.147578f,  0.178185f,  0.158946f,  0.238829f,  0.334988f,  0.138153f,  0.224353f,  0.166637f,  0.202598f,  0.201702f,  0.193369f,  0.12887f,  0.187674f,  0.152101f,  0.131985f,  0.193782f,  0.220862f,  0.093956f,  0.142057f,  0.064769f,  0.276337f,  0.233686f,  0.137446f,  0.272808f,  0.145737f,  0.23258f,  0.22529f,  0.214409f,  0.156442f,  0.222366f,  0.298061f,  0.235017f,  0.204338f,  0.164553f,  0.235689f,  0.187057f,  0.322884f,  0.309977f,  0.255204f,  0.256469f,  0.189315f,  0.122077f,  0.1473f,  0.176234f,  0.149738f,  0.187145f,  0.122046f,  0.16437f,  0.152872f,  0.126156f,  0.125871f,  0.220358f,  0.190542f,  0.145284f,  0.175137f,  0.12461f,  0.235898f,  0.127592f,  0.128848f,  0.230933f,  0.171674f,  0.240172f,  0.082744f,  0.136997f,  0.211573f,  0.198347f,  0.175785f,  0.215822f,  0.53705f,  0.117846f, };
const std::vector<float> fire8_concat_calib = {
    0.955318f,  0.879702f,  1.022363f,  1.162386f,  0.490037f,  0.378152f,  0.44476f,  0.859816f,  0.643938f,  0.59089f,  1.462862f,  0.663241f,  1.323394f,  1.020892f,  0.420609f,  0.727685f,  0.898288f,  0.796573f,  1.04937f,  1.149613f,  0.927413f,  0.621973f,  0.936012f,  14.344577f,  0.875198f,  3.139422f,  0.70903f,  0.476512f,  3.447396f,  0.757725f,  0.730183f,  1.938047f,  0.928335f,  1.438215f,  4.522615f,  1.03107f,  0.894606f,  1.330903f,  0.855017f,  0.686153f,  0.799265f,  1.913665f,  2.093174f,  4.311515f,  0.459792f,  1.493963f,  0.437028f,  1.05791f,  1.376106f,  1.109228f,  0.542976f,  1.266846f,  1.676426f,  0.732719f,  2.543546f,  1.260046f,  1.2661f,  1.253603f,  1.330261f,  1.066967f,  0.560464f,  1.197876f,  0.623041f,  1.335934f,  0.748962f,  1.000307f,  1.569754f,  2.043144f,  0.798361f,  2.585163f,  1.529809f,  0.640916f,  0.953747f,  0.756754f,  2.357939f,  1.09253f,  0.461958f,  0.601064f,  1.508396f,  0.526013f,  1.141081f,  1.098027f,  0.764337f,  0.967826f,  5.22249f,  0.512336f,  1.022388f,  1.313706f,  0.939613f,  0.732871f,  0.943396f,  1.011855f,  1.151071f,  1.146685f,  1.548865f,  1.237648f,  0.82564f,  1.584114f,  1.152691f,  0.920817f,  1.362063f,  1.427757f,  0.83217f,  1.083895f,  0.88503f,  0.846187f,  4.06741f,  0.962427f,  0.987589f,  1.515983f,  4.360635f,  1.185066f,  1.185929f,  0.554559f,  0.720927f,  1.017449f,  1.248096f,  0.834352f,  1.022495f,  0.864734f,  1.971428f,  0.503503f,  8.110714f,  2.582902f,  0.660382f,  0.316546f,  0.569389f,  0.789909f,  1.344536f,  0.719347f,  0.644722f,  0.344046f,  0.758952f,  0.995711f,  1.070871f,  1.075897f,  1.172236f,  24.98962f,  1.052719f,  2.171872f,  0.679003f,  5.930423f,  2.545065f,  2.7132f,  1.358946f,  1.020769f,  1.093527f,  2.171382f,  1.100282f,  1.143794f,  0.957472f,  1.8955f,  1.128608f,  0.801985f,  0.482787f,  0.485587f,  1.089998f,  0.85931f,  0.920363f,  2.482908f,  0.587528f,  0.545263f,  2.760407f,  0.954815f,  1.173123f,  0.78268f,  0.726911f,  0.641414f,  0.847633f,  0.815048f,  0.921639f,  0.710824f,  1.058757f,  0.7497f,  0.861964f,  0.838754f,  0.589251f,  0.681283f,  1.546651f,  0.929776f,  0.456419f,  0.707706f,  1.336466f,  1.162599f,  1.569424f,  1.159404f,  62.35118f,  1.50128f,  0.697032f,  0.713952f,  2.408793f,  0.422982f,  0.672274f,  0.759211f,  1.630004f,  0.938003f,  0.552626f,  1.099205f,  1.166679f,  1.009828f,  0.917736f,  2.992432f,  1.062415f,  1.48105f,  1.129602f,  2.780332f,  1.141789f,  1.340262f,  1.166475f,  1.133868f,  0.64879f,  1.06532f,  1.274193f,  1.228513f,  1.096813f,  6.063326f,  1.855944f,  1.110509f,  1.344402f,  1.461514f,  0.97103f,  0.863693f,  1.387549f,  0.529246f,  1.086826f,  0.876951f,  1.24015f,  1.411415f,  0.798115f,  1.63099f,  1.140363f,  1.228703f,  1.983486f,  0.812644f,  1.218564f,  0.584295f,  1.017253f,  1.425187f,  0.599023f,  0.395868f,  1.098949f,  0.560165f,  2.192562f,  0.910349f,  0.242041f,  0.441208f,  1.163366f,  0.754623f,  1.158252f,  0.812618f,  1.365509f,  1.613799f,  0.934346f,  1.379141f,  0.704073f,  0.984107f,  0.81367f,  0.262599f,  0.444645f,  0.593949f,  0.321117f,  0.962056f,  0.500757f,  0.413187f,  0.501156f,  0.38779f,  0.366841f,  0.318429f,  0.25277f,  0.42209f,  0.400638f,  0.223331f,  0.440394f,  0.56017f,  0.50418f,  0.584378f,  0.252975f,  0.504645f,  0.572973f,  0.409262f,  0.265363f,  0.397159f,  0.489756f,  0.183497f,  0.340582f,  0.221679f,  0.672424f,  0.647193f,  0.1252f,  0.363561f,  0.385727f,  0.246988f,  0.292425f,  0.37893f,  0.418338f,  0.579496f,  0.315876f,  0.320898f,  0.291626f,  0.337166f,  0.58105f,  0.555886f,  0.493503f,  0.260907f,  0.308261f,  0.46313f,  0.423278f,  0.87941f,  0.438395f,  0.359016f,  0.262422f,  0.824734f,  0.309504f,  0.490886f,  0.540111f,  1.022989f,  0.744113f,  0.443881f,  0.3612f,  0.698117f,  0.215026f,  0.337002f,  0.581656f,  0.490772f,  0.324158f,  0.339324f,  0.448269f,  0.347944f,  0.437946f,  0.17536f,  0.249158f,  0.532535f,  0.783578f,  1.422083f,  0.582499f,  0.729495f,  0.431493f,  0.155954f,  0.415413f,  0.352608f,  0.308105f,  0.841204f,  0.271403f,  0.58042f,  0.387038f,  0.194207f,  0.579324f,  0.806385f,  0.506571f,  0.625486f,  0.954378f,  0.259054f,  0.65937f,  0.222919f,  0.268548f,  0.151281f,  0.600008f,  0.769576f,  0.456427f,  0.366722f,  0.506139f,  0.235656f,  0.43602f,  0.680907f,  0.484228f,  0.278789f,  0.221299f,  0.352203f,  0.504314f,  0.645404f,  0.448397f,  0.551443f,  0.829675f,  0.432365f,  0.468094f,  0.164935f,  0.17385f,  0.352135f,  0.503126f,  0.175628f,  0.586424f,  0.530672f,  0.780146f,  0.793944f,  0.458214f,  0.550236f,  0.426704f,  0.410069f,  0.351163f,  0.964672f,  0.730288f,  0.399893f,  0.348102f,  0.542133f,  0.326404f,  0.651135f,  0.274057f,  0.336166f,  0.302667f,  0.460122f,  0.307624f,  0.328683f,  0.500169f,  0.464975f,  0.430539f,  0.316252f,  0.535756f,  0.289229f,  0.285595f,  0.507663f,  0.652956f,  0.343309f,  0.545425f,  0.306938f,  0.4262f,  1.253875f,  0.158243f,  0.462734f,  0.293715f,  0.648532f,  0.738295f,  0.454539f,  0.298774f,  0.625074f,  0.326501f,  0.510996f,  0.388883f,  0.382185f,  0.34862f,  0.618044f,  0.498067f,  0.26782f,  0.376003f,  0.206249f,  0.526202f,  0.43794f,  0.422055f,  0.43822f,  0.157822f,  0.543634f,  0.390597f,  0.583599f,  0.474864f,  0.427926f,  0.522593f,  0.355473f,  0.426159f,  0.593816f,  0.326197f,  0.481919f,  0.618234f,  0.412344f,  0.57778f,  0.538231f,  0.467486f,  0.256901f,  0.465229f,  0.481066f,  0.489016f,  0.518118f,  0.39004f,  0.64243f,  0.335685f,  0.345906f,  0.222469f,  0.330927f,  0.349512f,  0.602513f,  0.276146f,  0.66528f,  0.525275f,  0.364265f,  0.641541f,  0.293954f,  0.767757f,  0.608523f,  0.457785f,  0.362229f,  0.421396f,  0.620981f,  0.619639f,  0.690465f,  0.319696f,  0.589776f,  0.452592f,  0.521758f,  0.362345f,  0.771502f,  0.329602f,  0.369653f,  0.355572f,  0.153557f,  0.635706f,  0.488445f,  0.675518f,  1.040327f,  0.588925f,  0.957732f,  0.479471f,  0.318407f,  0.463952f,  0.558394f,  0.750077f,  0.741831f,  0.467978f,  0.342059f,  0.540076f,  0.480624f,  0.192633f,  0.621729f,  0.37555f,  0.466776f, };
const std::vector<float> fire7_concat_calib = {
    0.398817f,  0.7567f,  0.471896f,  1.023616f,  0.3821f,  0.596432f,  0.543751f,  0.644762f,  0.606524f,  0.425569f,  0.899943f,  0.838112f,  0.716143f,  0.679348f,  0.530159f,  0.774027f,  0.621623f,  0.591995f,  0.460881f,  0.570817f,  0.713724f,  0.893265f,  0.853334f,  0.599908f,  0.476798f,  0.636317f,  0.734779f,  0.577761f,  0.47505f,  0.510278f,  0.268602f,  0.380085f,  0.50037f,  0.633767f,  0.532194f,  0.717555f,  0.5725f,  0.504585f,  0.489599f,  0.505889f,  0.726636f,  0.505575f,  0.38816f,  0.726861f,  0.524637f,  0.635547f,  1.014272f,  0.917524f,  0.648773f,  0.43486f,  0.837946f,  0.465186f,  0.762172f,  0.665667f,  0.42745f,  0.545223f,  0.60173f,  0.535648f,  0.475038f,  0.675018f,  0.636215f,  0.774754f,  0.580402f,  0.934717f,  0.546467f,  0.541552f,  0.519353f,  0.684238f,  0.373245f,  0.805899f,  0.527102f,  1.004699f,  0.50158f,  0.682939f,  0.399292f,  0.527836f,  0.503068f,  0.622665f,  0.628632f,  0.667066f,  0.439926f,  0.421394f,  0.916915f,  0.792388f,  0.649912f,  0.572567f,  0.438248f,  0.394423f,  0.633344f,  0.820154f,  0.490202f,  0.531576f,  0.59767f,  0.632842f,  0.637029f,  0.461139f,  0.770379f,  0.485211f,  0.542723f,  0.536164f,  0.600493f,  0.616667f,  0.768249f,  0.723952f,  0.793026f,  0.493484f,  0.691179f,  0.735149f,  0.696306f,  0.786763f,  0.512731f,  0.409799f,  0.442461f,  0.716304f,  0.742096f,  0.72094f,  0.468348f,  0.613788f,  0.581483f,  0.670482f,  0.545385f,  0.69234f,  0.539746f,  0.367672f,  0.691676f,  0.407884f,  0.806426f,  0.510307f,  0.625412f,  0.751239f,  0.277989f,  0.375499f,  0.466005f,  0.579007f,  0.819011f,  0.757156f,  0.542547f,  0.477002f,  0.414709f,  0.643781f,  0.514212f,  0.530391f,  0.403477f,  0.704346f,  0.583072f,  0.368938f,  0.535888f,  0.645959f,  0.588099f,  0.454266f,  0.459117f,  0.407838f,  0.546749f,  0.504751f,  0.498786f,  0.475242f,  0.732094f,  0.336025f,  0.788443f,  0.797038f,  0.771858f,  0.559397f,  0.44074f,  0.933151f,  0.458745f,  0.579435f,  0.572934f,  0.556983f,  0.871283f,  0.941885f,  0.740542f,  0.731685f,  0.563088f,  0.887448f,  0.523873f,  0.883527f,  0.532144f,  0.787216f,  0.576371f,  0.552186f,  0.578949f,  0.401497f,  0.999017f,  0.478238f,  0.884247f,  0.618309f,  0.305461f,  0.429362f,  0.391805f,  0.491758f,  0.332758f,  0.58046f,  0.384917f,  0.330885f,  0.430151f,  0.225058f,  0.392341f,  0.230535f,  0.258966f,  0.073757f,  0.116832f,  0.814604f,  0.416058f,  0.230055f,  0.319199f,  0.219242f,  0.338236f,  0.154633f,  0.172057f,  0.588066f,  0.324214f,  0.271244f,  0.238016f,  0.281761f,  0.371409f,  0.312757f,  0.279931f,  0.362738f,  0.314192f,  0.364505f,  0.25886f,  0.324848f,  0.251155f,  0.253787f,  0.285396f,  0.615593f,  0.208554f,  0.589057f,  0.365171f,  0.390304f,  0.313255f,  0.258633f,  0.195051f,  0.399311f,  0.184861f,  0.242805f,  0.356516f,  0.260347f,  0.308476f,  0.249318f,  0.396529f,  0.259686f,  0.222213f,  0.217722f,  0.360954f,  0.519279f,  0.233708f,  0.393246f,  0.482616f,  0.186957f,  0.187455f,  0.252205f,  0.309512f,  0.248125f,  0.385316f,  0.399366f,  0.305725f,  0.26421f,  0.323909f,  0.445849f,  0.218289f,  0.473462f,  0.17177f,  0.290517f,  0.188499f,  0.391421f,  0.177975f,  0.666926f,  0.292255f,  2.275994f,  0.665608f,  0.265403f,  0.305632f,  0.246894f,  0.321457f,  0.653081f,  0.361559f,  0.36566f,  0.231819f,  0.304697f,  0.148058f,  0.316619f,  0.409171f,  0.254562f,  0.350291f,  0.433287f,  0.122159f,  0.441277f,  0.474426f,  0.435681f,  0.283652f,  0.349424f,  0.29828f,  0.253444f,  0.292029f,  0.174747f,  0.239903f,  0.286796f,  0.230699f,  0.297991f,  0.482682f,  0.233518f,  0.460868f,  0.289852f,  0.443941f,  0.286616f,  0.334138f,  0.152261f,  0.323726f,  0.204221f,  0.466883f,  0.354467f,  0.315991f,  0.278037f,  0.269885f,  0.634195f,  0.471033f,  0.441228f,  0.348723f,  0.339141f,  0.3316f,  0.377113f,  0.282479f,  0.237453f,  0.288122f,  0.887218f,  0.533894f,  0.434337f,  0.310801f,  0.401591f,  0.341747f,  0.359143f,  0.311812f,  0.273919f,  0.364201f,  0.361921f,  0.354731f,  0.148919f,  0.217982f,  0.240255f,  0.372298f,  0.618185f,  0.308461f,  0.553242f,  0.274981f,  0.620593f,  0.258343f,  0.305011f,  0.390296f,  0.26326f,  0.425408f,  0.211049f,  0.880526f,  0.587267f,  0.123721f,  0.298792f,  0.271802f,  0.289f,  0.241768f,  0.216102f,  0.477871f,  0.131003f,  0.61497f,  0.348013f,  0.203886f,  0.464623f,  0.264438f,  0.169469f,  0.253277f,  0.276394f,  0.218659f,  0.255382f,  0.339928f,  0.269639f,  0.287182f,  0.548452f,  0.352058f,  0.325031f,  0.428212f,  0.330933f,  0.315914f,  0.304695f,  0.331226f,  0.265898f, };
const std::vector<float> fire8_squeeze1x1_calib = {
    0.507395f,  0.346045f,  0.169332f,  0.435564f,  0.216062f,  0.150545f,  0.529909f,  0.247261f,  0.408327f,  0.246674f,  0.339284f,  0.45883f,  0.24416f,  0.123493f,  0.257636f,  0.187197f,  0.27462f,  0.170999f,  0.301634f,  0.187906f,  0.345547f,  0.327304f,  0.191335f,  0.278911f,  0.166611f,  0.199794f,  0.27688f,  0.303399f,  0.394001f,  0.159762f,  0.366073f,  0.163722f,  0.264897f,  0.311433f,  0.361905f,  0.141773f,  0.167438f,  0.275851f,  0.11215f,  0.268392f,  0.263035f,  0.199828f,  0.119812f,  0.704378f,  0.596779f,  0.20614f,  1.057752f,  0.309664f,  0.425809f,  0.100934f,  0.275872f,  0.236041f,  0.25097f,  0.16664f,  0.332495f,  0.287477f,  0.312948f,  0.423538f,  0.428338f,  0.217607f,  0.200592f,  0.451842f,  0.251234f,  0.406378f, };
const std::vector<float> reorder_calib = {
    0.841099f,  0.918088f,  0.959787f, };
const std::vector<float> fire4_squeeze1x1_calib = {
    0.166411f,  0.183228f,  0.158997f,  0.100872f,  0.088248f,  0.166512f,  0.108797f,  0.170043f,  0.132812f,  0.080864f,  0.137934f,  0.174857f,  0.176401f,  0.132886f,  0.114995f,  0.072063f,  0.131961f,  0.128876f,  0.14323f,  0.141124f,  0.150642f,  0.127457f,  0.122289f,  0.134675f,  0.107944f,  0.140052f,  0.185086f,  0.124549f,  0.143989f,  0.134135f,  0.079799f,  0.153128f, };
const std::vector<float> fire7_expand3x3_calib = {
    0.384917f,  0.330885f,  0.430151f,  0.225058f,  0.392341f,  0.230535f,  0.258966f,  0.073757f,  0.116832f,  0.814604f,  0.416058f,  0.230055f,  0.319199f,  0.219242f,  0.338236f,  0.154633f,  0.172057f,  0.588066f,  0.324214f,  0.271244f,  0.238016f,  0.281761f,  0.371409f,  0.312757f,  0.279931f,  0.362738f,  0.314192f,  0.364505f,  0.25886f,  0.324848f,  0.251155f,  0.253787f,  0.285396f,  0.615593f,  0.208554f,  0.589057f,  0.365171f,  0.390304f,  0.313255f,  0.258633f,  0.195051f,  0.399311f,  0.184861f,  0.242805f,  0.356516f,  0.260347f,  0.308476f,  0.249318f,  0.396529f,  0.259686f,  0.222213f,  0.217722f,  0.360954f,  0.519279f,  0.233708f,  0.393246f,  0.482616f,  0.186957f,  0.187455f,  0.252205f,  0.309512f,  0.248125f,  0.385316f,  0.399366f,  0.305725f,  0.26421f,  0.323909f,  0.445849f,  0.218289f,  0.473462f,  0.17177f,  0.290517f,  0.188499f,  0.391421f,  0.177975f,  0.666926f,  0.292255f,  2.275994f,  0.665608f,  0.265403f,  0.305632f,  0.246894f,  0.321457f,  0.653081f,  0.361559f,  0.36566f,  0.231819f,  0.304697f,  0.148058f,  0.316619f,  0.409171f,  0.254562f,  0.350291f,  0.433287f,  0.122159f,  0.441277f,  0.474426f,  0.435681f,  0.283652f,  0.349424f,  0.29828f,  0.253444f,  0.292029f,  0.174747f,  0.239903f,  0.286796f,  0.230699f,  0.297991f,  0.482682f,  0.233518f,  0.460868f,  0.289852f,  0.443941f,  0.286616f,  0.334138f,  0.152261f,  0.323726f,  0.204221f,  0.466883f,  0.354467f,  0.315991f,  0.278037f,  0.269885f,  0.634195f,  0.471033f,  0.441228f,  0.348723f,  0.339141f,  0.3316f,  0.377113f,  0.282479f,  0.237453f,  0.288122f,  0.887218f,  0.533894f,  0.434337f,  0.310801f,  0.401591f,  0.341747f,  0.359143f,  0.311812f,  0.273919f,  0.364201f,  0.361921f,  0.354731f,  0.148919f,  0.217982f,  0.240255f,  0.372298f,  0.618185f,  0.308461f,  0.553242f,  0.274981f,  0.620593f,  0.258343f,  0.305011f,  0.390296f,  0.26326f,  0.425408f,  0.211049f,  0.880526f,  0.587267f,  0.123721f,  0.298792f,  0.271802f,  0.289f,  0.241768f,  0.216102f,  0.477871f,  0.131003f,  0.61497f,  0.348013f,  0.203886f,  0.464623f,  0.264438f,  0.169469f,  0.253277f,  0.276394f,  0.218659f,  0.255382f,  0.339928f,  0.269639f,  0.287182f,  0.548452f,  0.352058f,  0.325031f,  0.428212f,  0.330933f,  0.315914f,  0.304695f,  0.331226f,  0.265898f, };
const std::vector<float> fire9_expand1x1_calib = {
    0.941047f,  0.737335f,  1.483896f,  0.690649f,  1.287108f,  1.798806f,  0.882183f,  1.624768f,  0.999819f,  1.596233f,  0.965846f,  2.384524f,  1.619421f,  2.576577f,  1.46545f,  1.486014f,  1.784224f,  0.719237f,  1.102526f,  1.008593f,  1.238215f,  1.870447f,  1.183322f,  1.875876f,  3.234202f,  1.026329f,  1.541406f,  1.538691f,  1.149904f,  1.114162f,  3.020789f,  0.489067f,  1.441626f,  1.158421f,  1.168687f,  1.864105f,  0.664257f,  0.863118f,  1.940125f,  2.066284f,  0.753566f,  1.56918f,  1.69447f,  0.609352f,  0.509932f,  2.550759f,  0.654009f,  8.808923f,  1.795495f,  0.941745f,  0.656534f,  0.786689f,  0.933165f,  0.838538f,  1.658659f,  0.595322f,  0.992614f,  0.514977f,  1.839231f,  0.981597f,  0.480696f,  0.862151f,  1.356097f,  1.552488f,  1.589443f,  1.496309f,  1.003191f,  1.433261f,  1.498636f,  0.843972f,  0.68327f,  1.949832f,  1.089736f,  1.865751f,  0.777167f,  1.14401f,  0.800005f,  1.503519f,  1.296825f,  0.680352f,  1.29973f,  2.403141f,  1.405545f,  3.693224f,  0.727969f,  0.561425f,  0.683446f,  0.705113f,  0.692226f,  2.073209f,  1.762366f,  0.301492f,  1.177955f,  2.340992f,  0.811362f,  1.67634f,  0.942969f,  1.045224f,  0.916769f,  2.005188f,  1.526257f,  0.967634f,  1.990524f,  0.917325f,  1.388301f,  0.52617f,  1.297253f,  1.759936f,  0.59276f,  0.889287f,  0.653191f,  0.945757f,  1.143742f,  1.672025f,  0.975392f,  0.865659f,  0.725345f,  1.581384f,  0.519625f,  1.796546f,  1.076874f,  2.467999f,  0.891791f,  1.233668f,  1.256766f,  0.499349f,  2.668269f,  0.747595f,  0.750015f,  2.704147f,  1.825229f,  0.98455f,  1.449765f,  1.263958f,  2.135793f,  0.531712f,  5.53107f,  2.394902f,  0.711832f,  0.848012f,  1.976481f,  1.52676f,  0.571431f,  0.718448f,  2.102865f,  1.422359f,  1.166733f,  1.421892f,  2.56782f,  0.478501f,  1.201821f,  0.555653f,  1.417847f,  1.318586f,  1.704035f,  0.707422f,  1.3428f,  0.643693f,  0.513349f,  1.639285f,  0.443729f,  0.950834f,  0.867919f,  1.927119f,  1.771949f,  2.305126f,  0.971356f,  1.067693f,  1.973699f,  2.05491f,  0.612426f,  0.902386f,  0.893278f,  2.021057f,  0.408873f,  1.281407f,  1.002154f,  2.191601f,  1.008657f,  0.740758f,  1.295328f,  1.274905f,  0.515399f,  2.282272f,  1.763127f,  0.804419f,  2.182416f,  1.740823f,  5.117047f,  0.840937f,  1.214823f,  1.475456f,  0.471712f,  1.342767f,  0.788947f,  0.775881f,  1.020859f,  1.198328f,  1.312929f,  0.992141f,  0.8617f,  2.362993f,  1.6309f,  2.12105f,  0.966588f,  1.645429f,  1.384711f,  0.980634f,  1.682587f,  0.741195f,  1.465609f,  1.427406f,  2.152207f,  1.526009f,  1.165801f,  1.385772f,  1.571271f,  3.524801f,  1.906217f,  3.048517f,  0.803564f,  0.83612f,  1.232029f,  0.9241f,  3.401752f,  0.731626f,  1.158347f,  1.392295f,  0.601266f,  1.628683f,  0.810569f,  0.544471f,  0.403166f,  3.298359f,  0.800792f,  1.47572f,  0.674749f,  1.0548f,  1.102096f,  0.699482f,  0.590725f,  1.844306f,  2.023176f,  1.262614f,  1.144093f,  1.412942f,  3.213498f,  0.958816f,  1.807243f,  1.107825f,  0.433021f,  0.367751f,  1.061908f,  0.466845f,  0.649985f,  0.784251f, };

template<typename T>
void quantize_weights(cldnn::memory& weights, cldnn::memory& w_qf)
{
    auto batch_pitch = weights.get_layout().get_pitches().batch[0];
    auto ptr = weights.pointer<T>();
    auto wqf_ptr = w_qf.pointer<float>();
    T max = (T) 0.0f;
    for (int ofm = 0; ofm < weights.get_layout().size.batch[0]; ofm++)
    {
        max = (T) 0.0f;
        for (int w = 0; w < batch_pitch; w++)
            if (max < abs(ptr[ofm* batch_pitch + w]))
                max = abs(ptr[ofm* batch_pitch + w]);

        if (max == (T)0)
            max = (T)1; // do not quantize

        for (int w = 0; w < batch_pitch; w++)
            ptr[ofm* batch_pitch + w] = (T)round((float)ptr[ofm* batch_pitch + w] * 127.0f / (float)max);
        wqf_ptr[ofm] = max / 127.0f;
    }
}
template<typename T>
void calibrate(const cldnn::memory& output, cldnn::memory& calibrations)
{
    auto feature_pitch = output.get_layout().get_pitches().feature[0];
    auto ptr = output.pointer<T>();
    auto calibrations_ptr = calibrations.pointer<float>();
    T max = (T) 0.0f;
    for (int ofm = 0; ofm < output.get_layout().size.feature[0]; ofm++)
    {
        max = (T) 0.0f;
        for (int w = 0; w < feature_pitch; w++)
            if (max < abs(ptr[ofm* feature_pitch + w]))
                max = abs(ptr[ofm* feature_pitch + w]);
        calibrations_ptr[ofm] = 127.0f / max;
    }
}

template<typename T>
T max_abs(const cldnn::memory& mem)
{
    T max = (T)0;
    auto ptr = mem.pointer<T>();
    for (auto& a : ptr)
        if (max < abs(a))
            max = abs(a);
    return max;
}

template<typename T>
void apply_calibration_on_weights(cldnn::memory& weights,const std::vector<float>& qf)
{
    auto batch_pitch = weights.get_layout().get_pitches().batch[0];
    auto ptr = weights.pointer<T>();
    tensor w_size = weights.get_layout().size;
    int index = 0;
    for (int ofm = 0; ofm < w_size.batch[0]; ofm++)
        for (int ifm = 0; ifm < w_size.feature[0]; ifm++)
            for (int xy = 0; xy < w_size.spatial[0] * w_size.spatial[1]; xy++)
            {
                if (qf[ifm] != 0.0f)
                    ptr[index] = ptr[index] / qf[ifm];
                else
                    ptr[index] = (T)0;
                index++;
            }
}

cldnn::memory create_int8_weights(engine engine, cldnn::memory& in_weights)
{
    auto layout = in_weights.get_layout();
    auto out_weights = memory::allocate(engine, { data_types::i8, layout.format, layout.size });
    auto in = in_weights.pointer<float>();
    auto out = out_weights.pointer<char>();
    int indx = 0;
    for (auto& a : in)
        out[indx++] = (char)a;
    return out_weights;
}


void add_calibration(
    const engine& engine,
    const std::string& weights_dir,
    const std::string& name,
    const std::vector<float>& in_calib,
    const std::vector<float>& out_calib,
    topology& topology)
{

    auto weights = file::create({ engine, join_path(weights_dir, name + "_weights.nnd") });
    auto& w_mem = weights.mem;
    apply_calibration_on_weights<float>(w_mem, in_calib);
    auto w_qf = memory::allocate(engine, { data_types::f32, format::bfyx,{ 1, w_mem.get_layout().size.batch[0], 1, 1 } });
    auto o_qf = memory::allocate(engine, { data_types::f32, format::bfyx,{ 1, (int32_t)out_calib.size(), 1, 1 } });
    set_values(o_qf, out_calib);
    quantize_weights<float>(w_mem, w_qf);
    auto w_int = create_int8_weights(engine, w_mem);
    auto weigths_int = data(name + "_weights_int", w_int);
    auto weights_qf = data(name + "_w_qf", w_qf);
    auto output_qf = data(name + "_o_qf", o_qf);

    topology.add(weigths_int, weights_qf, output_qf);
}

topology build_squeezenet_quant(const std::string& weights_dir, const cldnn::engine& engine, cldnn::layout& input_layout, int32_t batch_size)
{
    cldnn::topology topology;
    // [227x227x3xB] convolution->relu->pooling->lrn [1000xB]
    input_layout.size = { batch_size, 3, 227, 227 };
    auto input = cldnn::input_layout("input", input_layout);

    //auto reorder_mean = { (float)104.0069879317889, (float)116.66876761696767, (float)122.6789143406786 };
    auto reordered_input = reorder(
        "reorder",
        input,
        { input_layout.data_type, input_layout.format, input_layout.size },
        std::vector<float>{ (float)104.0069879317889, (float)116.66876761696767, (float)122.6789143406786 });

    add_calibration(engine, weights_dir, "conv1", reorder_calib, conv1_calib, topology);
    auto conv1_calibrator = reorder("conv1_calib", "reorder",
        format::bfyx, data_types::i8, reorder_calib, cldnn_reorder_mean_mode::mean_mul);
    auto conv1_bias = file::create({ engine, join_path(weights_dir, "conv1_bias.nnd")});
    auto conv1 = convolution(
        "conv1",
        conv1_calibrator,
        { "conv1_weights_int" },
        { conv1_bias },
        { "conv1_w_qf" },
        { "conv1_o_qf" },
        1.0f, // do not scale input
        { 1,1,2,2 },
        { 0,0,0,0 },
        { 1,1,1,1 },
        true);

    auto pool1 = pooling(
        "pool1",
        conv1,
        pooling_mode::max,
        { 1,1,3,3 }, // kernel
        { 1,1,2,2 }); // strd

    add_calibration(engine, weights_dir, "fire2_squeeze1x1", conv1_calib, fire2_squeeze1x1_calib, topology);
    auto fire2_squeeze1x1_bias = file::create({ engine, join_path(weights_dir, "fire2_squeeze1x1_bias.nnd") });
    auto fire2_squeeze1x1 = convolution(
        "fire2_squeeze1x1",
        pool1,
        { "fire2_squeeze1x1_weights_int" },
        { fire2_squeeze1x1_bias },
        { "fire2_squeeze1x1_w_qf" },
        { "fire2_squeeze1x1_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0,0,0,0 },
        { 1,1,1,1 },
        true);

    add_calibration(engine, weights_dir, "fire2_expand1x1", fire2_squeeze1x1_calib, fire2_expand1x1_calib, topology);
    auto fire2_expand1x1_bias = file::create({ engine, join_path(weights_dir, "fire2_expand1x1_bias.nnd") });
    auto fire2_expand1x1 = convolution(
        "fire2_expand1x1",
        fire2_squeeze1x1,
        { "fire2_expand1x1_weights_int" },
        { fire2_expand1x1_bias },
        { "fire2_expand1x1_w_qf" },
        { "fire2_expand1x1_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0,0,0,0 },
        { 1,1,1,1 },
        true);

    add_calibration(engine, weights_dir, "fire2_expand3x3", fire2_squeeze1x1_calib, fire2_expand3x3_calib, topology);
    auto fire2_expand3x3_bias = file::create({ engine, join_path(weights_dir, "fire2_expand3x3_bias.nnd") });
    auto fire2_expand3x3 = convolution(
        "fire2_expand3x3",
        fire2_squeeze1x1,
        { "fire2_expand3x3_weights_int" },
        { fire2_expand3x3_bias },
        { "fire2_expand3x3_w_qf" },
        { "fire2_expand3x3_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0, 0, -1,-1 },
        { 1,1,1,1 },
        true);

    auto fire2_concat = concatenation(
        "fire2_concat",
        {
            fire2_expand1x1,
            fire2_expand3x3
        },
        concatenation::along_f
    );

    add_calibration(engine, weights_dir, "fire3_squeeze1x1", fire2_concat_calib, fire3_squeeze1x1_calib, topology);
    auto fire3_squeeze1x1_bias = file::create({ engine, join_path(weights_dir, "fire3_squeeze1x1_bias.nnd") });
    auto fire3_squeeze1x1 = convolution(
        "fire3_squeeze1x1",
        fire2_concat,
        { "fire3_squeeze1x1_weights_int" },
        { fire3_squeeze1x1_bias },
        { "fire3_squeeze1x1_w_qf" },
        { "fire3_squeeze1x1_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0,0,0,0 },
        { 1,1,1,1 },
        true);

    add_calibration(engine, weights_dir, "fire3_expand1x1", fire3_squeeze1x1_calib, fire3_expand1x1_calib, topology);
    auto fire3_expand1x1_bias = file::create({ engine, join_path(weights_dir, "fire3_expand1x1_bias.nnd") });
    auto fire3_expand1x1 = convolution(
        "fire3_expand1x1",
        fire3_squeeze1x1,
        { "fire3_expand1x1_weights_int" },
        { fire3_expand1x1_bias },
        { "fire3_expand1x1_w_qf" },
        { "fire3_expand1x1_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0,0,0,0 },
        { 1,1,1,1 },
        true);

    add_calibration(engine, weights_dir, "fire3_expand3x3", fire3_squeeze1x1_calib, fire3_expand3x3_calib, topology);
    auto fire3_expand3x3_bias = file::create({ engine, join_path(weights_dir, "fire3_expand3x3_bias.nnd") });
    auto fire3_expand3x3 = convolution(
        "fire3_expand3x3",
        fire3_squeeze1x1,
        { "fire3_expand3x3_weights_int" },
        { fire3_expand3x3_bias },
        { "fire3_expand3x3_w_qf" },
        { "fire3_expand3x3_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0, 0, -1,-1 },
        { 1,1,1,1 },
        true);

    auto fire3_concat = concatenation(
        "fire3_concat",
        {
            fire3_expand1x1,
            fire3_expand3x3
        },
        concatenation::along_f
    );

    auto pool3 = pooling(
        "pool3",
        fire3_concat,
        pooling_mode::max,
        { 1,1,3,3 }, // kernel
        { 1,1,2,2 }); // strd

    add_calibration(engine, weights_dir, "fire4_squeeze1x1", fire3_concat_calib, fire4_squeeze1x1_calib, topology);
    auto fire4_squeeze1x1_bias = file::create({ engine, join_path(weights_dir, "fire4_squeeze1x1_bias.nnd") });
    auto fire4_squeeze1x1 = convolution(
        "fire4_squeeze1x1",
        pool3,
        { "fire4_squeeze1x1_weights_int" },
        { fire4_squeeze1x1_bias },
        { "fire4_squeeze1x1_w_qf" },
        { "fire4_squeeze1x1_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0,0,0,0 },
        { 1,1,1,1 },
        true);

    add_calibration(engine, weights_dir, "fire4_expand1x1", fire4_squeeze1x1_calib, fire4_expand1x1_calib, topology);
    auto fire4_expand1x1_bias = file::create({ engine, join_path(weights_dir, "fire4_expand1x1_bias.nnd") });
    auto fire4_expand1x1 = convolution(
        "fire4_expand1x1",
        fire4_squeeze1x1,
        { "fire4_expand1x1_weights_int" },
        { fire4_expand1x1_bias },
        { "fire4_expand1x1_w_qf" },
        { "fire4_expand1x1_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0,0,0,0 },
        { 1,1,1,1 },
        true);

    add_calibration(engine, weights_dir, "fire4_expand3x3", fire4_squeeze1x1_calib, fire4_expand3x3_calib, topology);
    auto fire4_expand3x3_bias = file::create({ engine, join_path(weights_dir, "fire4_expand3x3_bias.nnd") });
    auto fire4_expand3x3 = convolution(
        "fire4_expand3x3",
        fire4_squeeze1x1,
        { "fire4_expand3x3_weights_int" },
        { fire4_expand3x3_bias },
        { "fire4_expand3x3_w_qf" },
        { "fire4_expand3x3_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0, 0, -1,-1 },
        { 1,1,1,1 },
        true);

    auto fire4_concat = concatenation(
        "fire4_concat",
        {
            fire4_expand1x1,
            fire4_expand3x3
        },
        concatenation::along_f
    );

    add_calibration(engine, weights_dir, "fire5_squeeze1x1", fire4_concat_calib, fire5_squeeze1x1_calib, topology);
    auto fire5_squeeze1x1_bias = file::create({ engine, join_path(weights_dir, "fire5_squeeze1x1_bias.nnd") });
    auto fire5_squeeze1x1 = convolution(
        "fire5_squeeze1x1",
        fire4_concat,
        { "fire5_squeeze1x1_weights_int" },
        { fire5_squeeze1x1_bias },
        { "fire5_squeeze1x1_w_qf" },
        { "fire5_squeeze1x1_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0,0,0,0 },
        { 1,1,1,1 },
        true);

    add_calibration(engine, weights_dir, "fire5_expand1x1", fire5_squeeze1x1_calib, fire5_expand1x1_calib, topology);
    auto fire5_expand1x1_bias = file::create({ engine, join_path(weights_dir, "fire5_expand1x1_bias.nnd") });
    auto fire5_expand1x1 = convolution(
        "fire5_expand1x1",
        fire5_squeeze1x1,
        { "fire5_expand1x1_weights_int" },
        { fire5_expand1x1_bias },
        { "fire5_expand1x1_w_qf" },
        { "fire5_expand1x1_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0,0,0,0 },
        { 1,1,1,1 },
        true);

    add_calibration(engine, weights_dir, "fire5_expand3x3", fire5_squeeze1x1_calib, fire5_expand3x3_calib, topology);
    auto fire5_expand3x3_bias = file::create({ engine, join_path(weights_dir, "fire5_expand3x3_bias.nnd") });
    auto fire5_expand3x3 = convolution(
        "fire5_expand3x3",
        fire5_squeeze1x1,
        { "fire5_expand3x3_weights_int" },
        { fire5_expand3x3_bias },
        { "fire5_expand3x3_w_qf" },
        { "fire5_expand3x3_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0, 0, -1,-1 },
        { 1,1,1,1 },
        true);

    auto fire5_concat = concatenation(
        "fire5_concat",
        {
            fire5_expand1x1,
            fire5_expand3x3
        },
        concatenation::along_f
    );

    auto pool5 = pooling(
        "pool5",
        fire5_concat,
        pooling_mode::max,
        { 1,1,3,3 }, // kernel
        { 1,1,2,2 }); // strd

    add_calibration(engine, weights_dir, "fire6_squeeze1x1", fire5_concat_calib, fire6_squeeze1x1_calib, topology);
    auto fire6_squeeze1x1_bias = file::create({ engine, join_path(weights_dir, "fire6_squeeze1x1_bias.nnd") });
    auto fire6_squeeze1x1 = convolution(
        "fire6_squeeze1x1",
        pool5,
        { "fire6_squeeze1x1_weights_int" },
        { fire6_squeeze1x1_bias },
        { "fire6_squeeze1x1_w_qf" },
        { "fire6_squeeze1x1_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0,0,0,0 },
        { 1,1,1,1 },
        true);

    add_calibration(engine, weights_dir, "fire6_expand1x1", fire6_squeeze1x1_calib, fire6_expand1x1_calib, topology);
    auto fire6_expand1x1_bias = file::create({ engine, join_path(weights_dir, "fire6_expand1x1_bias.nnd") });
    auto fire6_expand1x1 = convolution(
        "fire6_expand1x1",
        fire6_squeeze1x1,
        { "fire6_expand1x1_weights_int" },
        { fire6_expand1x1_bias },
        { "fire6_expand1x1_w_qf" },
        { "fire6_expand1x1_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0,0,0,0 },
        { 1,1,1,1 },
        true);

    add_calibration(engine, weights_dir, "fire6_expand3x3", fire6_squeeze1x1_calib, fire6_expand3x3_calib, topology);
    auto fire6_expand3x3_bias = file::create({ engine, join_path(weights_dir, "fire6_expand3x3_bias.nnd") });
    auto fire6_expand3x3 = convolution(
        "fire6_expand3x3",
        fire6_squeeze1x1,
        { "fire6_expand3x3_weights_int" },
        { fire6_expand3x3_bias },
        { "fire6_expand3x3_w_qf" },
        { "fire6_expand3x3_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0, 0, -1,-1 },
        { 1,1,1,1 },
        true);

    auto fire6_concat = concatenation(
        "fire6_concat",
        {
            fire6_expand1x1,
            fire6_expand3x3
        },
        concatenation::along_f
    );
  
    add_calibration(engine, weights_dir, "fire7_squeeze1x1", fire6_concat_calib, fire7_squeeze1x1_calib, topology);
    auto fire7_squeeze1x1_bias = file::create({ engine, join_path(weights_dir, "fire7_squeeze1x1_bias.nnd")});
    auto fire7_squeeze1x1 = convolution(
        "fire7_squeeze1x1",
        fire6_concat,
        { "fire7_squeeze1x1_weights_int" },
        { fire7_squeeze1x1_bias },
        { "fire7_squeeze1x1_w_qf" },
        { "fire7_squeeze1x1_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0,0,0,0 },
        { 1,1,1,1 },
        true);
    
    add_calibration(engine, weights_dir, "fire7_expand1x1", fire7_squeeze1x1_calib, fire7_expand1x1_calib, topology);
    auto fire7_expand1x1_bias = file::create({ engine, join_path(weights_dir, "fire7_expand1x1_bias.nnd")});
    auto fire7_expand1x1 = convolution(
        "fire7_expand1x1",
        fire7_squeeze1x1,
        { "fire7_expand1x1_weights_int" },
        { fire7_expand1x1_bias },
        { "fire7_expand1x1_w_qf" },
        { "fire7_expand1x1_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0,0,0,0 },
        { 1,1,1,1 },
        true);

    add_calibration(engine, weights_dir, "fire7_expand3x3", fire7_squeeze1x1_calib, fire7_expand3x3_calib, topology);
    auto fire7_expand3x3_bias = file::create({ engine, join_path(weights_dir, "fire7_expand3x3_bias.nnd")});
    auto fire7_expand3x3 = convolution(
        "fire7_expand3x3",
        fire7_squeeze1x1,
        { "fire7_expand3x3_weights_int" },
        { fire7_expand3x3_bias },
        { "fire7_expand3x3_w_qf" },
        { "fire7_expand3x3_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0, 0, -1,-1 },
        { 1,1,1,1 },
        true);

    auto fire7_concat = concatenation(
        "fire7_concat",
        {
            fire7_expand1x1,
            fire7_expand3x3
        },
        concatenation::along_f
    );

    add_calibration(engine, weights_dir, "fire8_squeeze1x1", fire7_concat_calib, fire8_squeeze1x1_calib, topology);
    auto fire8_squeeze1x1_bias = file::create({ engine, join_path(weights_dir, "fire8_squeeze1x1_bias.nnd")});
    auto fire8_squeeze1x1 = convolution(
        "fire8_squeeze1x1",
        fire7_concat,
        { "fire8_squeeze1x1_weights_int" },
        { fire8_squeeze1x1_bias },
        { "fire8_squeeze1x1_w_qf" },
        { "fire8_squeeze1x1_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0,0,0,0 },
        { 1,1,1,1 },
        true);

    add_calibration(engine, weights_dir, "fire8_expand1x1", fire8_squeeze1x1_calib, fire8_expand1x1_calib, topology);
    auto fire8_expand1x1_bias = file::create({ engine, join_path(weights_dir, "fire8_expand1x1_bias.nnd")});
    auto fire8_expand1x1 = convolution(
        "fire8_expand1x1",
        fire8_squeeze1x1,
        { "fire8_expand1x1_weights_int" },
        { fire8_expand1x1_bias },
        { "fire8_expand1x1_w_qf" },
        { "fire8_expand1x1_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0,0,0,0 },
        { 1,1,1,1 },
        true);

    add_calibration(engine, weights_dir, "fire8_expand3x3", fire8_squeeze1x1_calib, fire8_expand3x3_calib, topology);
    auto fire8_expand3x3_bias = file::create({ engine, join_path(weights_dir, "fire8_expand3x3_bias.nnd") });
    auto fire8_expand3x3 = convolution(
        "fire8_expand3x3",
        fire8_squeeze1x1,
        { "fire8_expand3x3_weights_int" },
        { fire8_expand3x3_bias },
        { "fire8_expand3x3_w_qf" },
        { "fire8_expand3x3_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0, 0, -1,-1 },
        { 1,1,1,1 },
        true);

    auto fire8_concat = concatenation(
        "fire8_concat",
        {
            fire8_expand1x1,
            fire8_expand3x3
        },
        concatenation::along_f
    );

    add_calibration(engine, weights_dir, "fire9_squeeze1x1", fire8_concat_calib, fire9_squeeze1x1_calib, topology);
    auto fire9_squeeze1x1_bias = file::create({ engine, join_path(weights_dir, "fire9_squeeze1x1_bias.nnd")});
    auto fire9_squeeze1x1 = convolution(
        "fire9_squeeze1x1",
        fire8_concat,
        { "fire9_squeeze1x1_weights_int" },
        { fire9_squeeze1x1_bias },
        { "fire9_squeeze1x1_w_qf" },
        { "fire9_squeeze1x1_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0,0,0,0 },
        { 1,1,1,1 },
        true);

    add_calibration(engine, weights_dir, "fire9_expand1x1", fire9_squeeze1x1_calib, fire9_expand1x1_calib, topology);
    auto fire9_expand1x1_bias = file::create({ engine, join_path(weights_dir, "fire9_expand1x1_bias.nnd")});
    auto fire9_expand1x1 = convolution(
        "fire9_expand1x1",
        fire9_squeeze1x1,
        { "fire9_expand1x1_weights_int" },
        { fire9_expand1x1_bias },
        { "fire9_expand1x1_w_qf" },
        { "fire9_expand1x1_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0,0,0,0 },
        { 1,1,1,1 },
        true);

    add_calibration(engine, weights_dir, "fire9_expand3x3", fire9_squeeze1x1_calib, fire9_expand3x3_calib, topology);
    auto fire9_expand3x3_bias = file::create({ engine, join_path(weights_dir, "fire9_expand3x3_bias.nnd")});
    auto fire9_expand3x3 = convolution(
        "fire9_expand3x3",
        fire9_squeeze1x1,
        { "fire9_expand3x3_weights_int" },
        { fire9_expand3x3_bias },
        { "fire9_expand3x3_w_qf" },
        { "fire9_expand3x3_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0, 0, -1,-1 },
        { 1,1,1,1 },
        true);

    auto fire9_concat = concatenation(
        "fire9_concat",
        {
            fire9_expand1x1,
            fire9_expand3x3
        },
        concatenation::along_f
    );

    auto conv10_bias = file::create({ engine, join_path(weights_dir, "conv10_bias.nnd") });
    add_calibration(engine, weights_dir, "conv10", fire9_concat_calib, conv10_calib, topology);
    auto conv10 = convolution(
        "conv10",
        fire9_concat,
        { "conv10_weights_int" },
        { conv10_bias },
        { "conv10_w_qf" },
        { "conv10_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0,0,0,0 },
        { 1,1,1,1 },
        true);
    auto conv10_decalibrator = reorder("conv10_decalib", "conv10",
        format::bfyx, data_types::f32, conv10_calib, cldnn_reorder_mean_mode::mean_div);

    auto pool10 = pooling(
        "pool10",
        conv10_decalibrator,
        pooling_mode::average,
        { 1,1,14,14 }, // kernel
        { 1,1,1,1 }); // strd

    auto softmax = cldnn::softmax(
        "output",
        pool10);

    topology.add(
        input,
        reordered_input,
        conv1, conv1_bias,
        pool1,
        fire2_squeeze1x1, fire2_squeeze1x1_bias
    );
    
    topology.add(fire2_expand1x1, fire2_expand1x1_bias);
    topology.add(fire2_expand3x3, fire2_expand3x3_bias);
        
    topology.add(
        fire2_concat);
    topology.add(
        fire3_squeeze1x1, fire3_squeeze1x1_bias,
        fire3_expand1x1,  fire3_expand1x1_bias,
        fire3_expand3x3,  fire3_expand3x3_bias,
        fire3_concat,
        pool3);
    topology.add(
        fire4_squeeze1x1, fire4_squeeze1x1_bias,
        fire4_expand1x1, fire4_expand1x1_bias,
        fire4_expand3x3, fire4_expand3x3_bias,
        fire4_concat);
    topology.add(
        fire5_squeeze1x1, fire5_squeeze1x1_bias,
        fire5_expand1x1,  fire5_expand1x1_bias,
        fire5_expand3x3,  fire5_expand3x3_bias,
        fire5_concat,
        pool5);
    topology.add(
        fire6_squeeze1x1,  fire6_squeeze1x1_bias,
        fire6_expand1x1,  fire6_expand1x1_bias,
        fire6_expand3x3,  fire6_expand3x3_bias,
        fire6_concat);
    topology.add(
        fire7_squeeze1x1, fire7_squeeze1x1_bias,
        fire7_expand1x1,  fire7_expand1x1_bias,
        fire7_expand3x3,  fire7_expand3x3_bias,
        fire7_concat);
    topology.add(
        fire8_squeeze1x1, fire8_squeeze1x1_bias,
        fire8_expand1x1,  fire8_expand1x1_bias,
        fire8_expand3x3,  fire8_expand3x3_bias,
        fire8_concat);
    topology.add(
        fire9_squeeze1x1, fire9_squeeze1x1_bias,
        fire9_expand1x1,  fire9_expand1x1_bias,
        fire9_expand3x3,  fire9_expand3x3_bias,
        fire9_concat);
    topology.add(
        conv10, conv10_bias,
        pool10,
        softmax);
    topology.add(
        conv10_decalibrator,
        conv1_calibrator
        );
    return topology;
}
