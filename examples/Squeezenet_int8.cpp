/*
// Copyright (c) 2016 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
*/

#include "common/common_tools.h"
#include "file.h"
#include <string>
#include <api/CPP/input_layout.hpp>
#include <api/CPP/reorder.hpp>
#include <api/CPP/convolution.hpp>
#include <api/CPP/pooling.hpp>
#include <api/CPP/concatenation.hpp>
#include <api/CPP/softmax.hpp>

using namespace cldnn;


template<typename T>
void set_values(const cldnn::memory& mem,const std::vector<T>& args) {
    auto ptr = mem.pointer<T>();

    auto it = ptr.begin();
    for (auto x : args)
        *it++ = x;
}
const std::vector<float> reorder_calib = {
    0.89441f,  0.918088f,  0.959787f, };
const std::vector<float> fire2_expand3x3_calib = {
    0.510171f,  2.096004f,  0.565724f,  0.623843f,  0.537084f,  0.48958f,  0.498908f,  0.49709f,  1.198249f,  0.747151f,  0.622598f,  0.361132f,  0.320793f,  0.436224f,  0.507754f,  0.511956f,  0.519636f,  0.393847f,  0.354905f,  0.632829f,  0.728219f,  0.467211f,  0.965024f,  0.497723f,  0.646926f,  0.402597f,  0.33591f,  0.404938f,  0.871911f,  0.352999f,  0.499787f,  0.355056f,  0.390055f,  0.480144f,  0.305641f,  0.7672f,  0.591835f,  0.299113f,  0.595009f,  0.806482f,  0.96215f,  1.09741f,  0.631926f,  0.857262f,  0.464112f,  0.582312f,  0.479643f,  1.162759f,  0.405418f,  1.136842f,  0.351943f,  0.399737f,  0.468669f,  0.342121f,  1.058219f,  0.668562f,  0.390548f,  0.521299f,  1.090194f,  0.787133f,  0.882177f,  0.376192f,  0.568401f,  0.324013f, };
const std::vector<float> fire2_squeeze1x1_calib = {
    0.247618f,  0.694691f,  0.768514f,  0.300356f,  0.154433f,  0.76198f,  0.268856f,  0.205639f,  0.223562f,  0.2999f,  0.260209f,  0.271499f,  0.538174f,  0.727856f,  0.273554f,  0.288201f, };
const std::vector<float> fire7_expand1x1_calib = {
    0.736377f,  1.210331f,  0.818763f,  3.167066f,  1.286165f,  1.133665f,  2.287732f,  0.806672f,  2.74259f,  0.651158f,  1.839404f,  0.838112f,  2.3995f,  1.225514f,  1.028798f,  1.048036f,  1.293776f,  0.925036f,  1.580569f,  0.740702f,  1.371277f,  1.223542f,  0.853334f,  1.119031f,  1.173687f,  1.074805f,  1.699163f,  5.449287f,  1.851074f,  0.901105f,  2.834461f,  0.604828f,  0.860014f,  1.998923f,  1.393779f,  1.768492f,  0.5725f,  1.055098f,  0.761761f,  1.279603f,  1.049795f,  1.089287f,  1.884832f,  1.094337f,  0.91993f,  0.814108f,  2.301513f,  0.917524f,  2.163075f,  0.829821f,  2.767711f,  0.630198f,  1.419391f,  1.096586f,  1.515897f,  0.759229f,  0.60173f,  1.405245f,  0.864852f,  0.950421f,  1.104963f,  1.172181f,  1.306929f,  2.495525f,  1.011541f,  0.902213f,  0.621891f,  0.802056f,  0.918526f,  2.022351f,  0.650258f,  1.004699f,  0.50158f,  0.780419f,  0.56792f,  0.820578f,  1.067048f,  0.637733f,  0.709822f,  2.574932f,  0.930689f,  1.545149f,  1.340553f,  1.308368f,  1.070709f,  2.064446f,  1.813275f,  1.325915f,  1.011807f,  1.923756f,  1.432532f,  1.02555f,  0.759992f,  1.382372f,  3.120148f,  0.87302f,  1.017204f,  1.719355f,  1.30318f,  0.536164f,  1.193149f,  1.017498f,  0.837858f,  1.213975f,  1.327788f,  0.855766f,  2.141483f,  1.761022f,  1.718308f,  1.224167f,  1.265381f,  0.736655f,  0.833891f,  2.765975f,  1.184967f,  0.72094f,  1.141511f,  1.100167f,  0.812701f,  1.304971f,  1.359448f,  1.515877f,  1.048244f,  0.775378f,  0.879934f,  1.135703f,  1.330117f,  1.910487f,  0.95506f,  0.799486f,  0.473801f,  0.825946f,  0.827356f,  1.108067f,  1.460218f,  3.579582f,  1.104722f,  0.612275f,  0.522198f,  1.079436f,  0.572549f,  1.429911f,  0.403477f,  0.704346f,  0.904539f,  0.688851f,  1.144608f,  1.188504f,  0.809051f,  0.576011f,  1.50744f,  1.065588f,  1.17028f,  1.503733f,  0.778606f,  0.593672f,  1.091834f,  1.355787f,  1.092962f,  1.580738f,  1.18276f,  0.866061f,  1.679172f,  0.933151f,  0.74552f,  1.627056f,  0.868679f,  0.812769f,  1.799619f,  3.177304f,  1.045027f,  0.731685f,  0.903452f,  4.804946f,  0.783723f,  5.248975f,  0.782487f,  1.398772f,  0.796733f,  0.73458f,  0.578949f,  0.596653f,  2.686489f,  0.526126f,  1.415891f,  1.154084f,  0.790376f,  0.994223f,  1.095271f,  1.454166f,  0.499057f,  0.849811f, };
const std::vector<float> fire6_concat_calib = {
    1.114348f,  0.966059f,  0.842091f,  0.291012f,  0.657432f,  0.697304f,  1.457795f,  0.837957f,  0.752673f,  0.926629f,  0.574266f,  0.577945f,  0.551567f,  0.714555f,  0.879672f,  0.714137f,  0.835389f,  0.640615f,  0.604874f,  1.580162f,  1.402158f,  0.466852f,  0.801803f,  1.923409f,  0.669626f,  0.514766f,  0.657885f,  0.462552f,  0.892054f,  0.475919f,  1.095451f,  1.072418f,  0.83809f,  0.735524f,  1.113439f,  1.197458f,  1.368611f,  0.70283f,  1.653592f,  0.833219f,  0.583227f,  6.828508f,  1.317775f,  2.249002f,  0.577711f,  0.44721f,  1.417166f,  0.711851f,  0.770837f,  0.647381f,  0.520733f,  0.664991f,  0.713571f,  0.556722f,  2.167335f,  2.348468f,  1.175959f,  0.728913f,  0.591523f,  0.620644f,  0.774013f,  0.642459f,  1.206135f,  0.702752f,  0.841321f,  0.751987f,  1.034691f,  1.100997f,  0.659727f,  0.479428f,  0.562552f,  0.542434f,  0.710708f,  0.304532f,  0.878327f,  0.976705f,  1.671262f,  0.460901f,  1.362263f,  0.549474f,  0.800752f,  2.103771f,  0.472977f,  0.868536f,  0.568841f,  3.680061f,  0.767747f,  0.770421f,  0.888833f,  0.885647f,  0.640938f,  0.639608f,  0.602278f,  0.965141f,  0.78574f,  1.762046f,  0.418906f,  0.795924f,  1.400065f,  0.989135f,  0.571722f,  1.115375f,  1.006618f,  0.801368f,  0.537976f,  1.170701f,  1.677999f,  0.429825f,  0.734796f,  0.915355f,  0.96253f,  0.857587f,  1.117761f,  0.842069f,  0.703699f,  1.146427f,  0.539851f,  1.323555f,  0.625563f,  0.390712f,  1.065168f,  0.656531f,  1.051142f,  0.983642f,  3.453198f,  0.472288f,  0.363096f,  0.834587f,  0.689959f,  0.428003f,  0.733968f,  31.286182f,  1.057954f,  0.738974f,  1.190789f,  0.744907f,  1.463014f,  0.608118f,  1.357818f,  0.577254f,  0.7206f,  1.281114f,  0.87175f,  1.238626f,  0.66688f,  0.621553f,  1.004683f,  0.700133f,  1.557617f,  0.518554f,  0.620635f,  0.720343f,  2.028566f,  0.31627f,  1.05587f,  1.381074f,  0.521674f,  0.885332f,  1.839258f,  0.871385f,  0.620702f,  3.071989f,  0.756434f,  1.601614f,  0.502815f,  0.376881f,  1.023525f,  1.36579f,  1.088009f,  0.621714f,  0.46419f,  0.496633f,  0.286208f,  0.846972f,  0.635607f,  1.25228f,  6.458306f,  1.160687f,  0.376393f,  0.541832f,  0.832902f,  1.066734f,  0.758866f,  0.983612f,  1.993752f,  1.370891f,  8.433775f,  24.81632f,  0.382997f,  0.644134f,  0.807729f,  0.784231f,  0.33228f,  0.886952f,  0.269665f,  1.174143f,  0.306552f,  0.523856f,  0.417085f,  0.710991f,  0.24864f,  0.866823f,  0.219623f,  0.265924f,  0.139698f,  0.255364f,  0.34007f,  0.394694f,  0.907551f,  0.252926f,  0.168094f,  0.50041f,  0.270312f,  0.437943f,  0.494637f,  0.517782f,  0.611059f,  0.665322f,  0.228315f,  1.022347f,  0.280595f,  0.323776f,  0.264208f,  0.447375f,  0.220905f,  0.222931f,  0.296679f,  0.294358f,  0.71844f,  0.305426f,  0.797814f,  0.342778f,  0.209195f,  0.177224f,  0.549481f,  0.326837f,  1.12288f,  0.272875f,  0.183638f,  0.403857f,  0.156127f,  0.270318f,  0.197519f,  0.264461f,  0.303945f,  0.678974f,  0.202948f,  0.493994f,  0.352111f,  0.614476f,  0.255002f,  0.232546f,  0.254781f,  0.251711f,  0.298533f,  0.230837f,  0.158825f,  0.332968f,  0.598879f,  0.444583f,  0.457218f,  0.265902f,  0.203906f,  0.271421f,  0.244105f,  0.256092f,  0.457902f,  0.320768f,  0.222983f,  0.349166f,  0.257804f,  0.27045f,  0.16329f,  0.318928f,  0.247942f,  0.237597f,  0.358267f,  0.392263f,  0.484097f,  0.342999f,  0.343488f,  0.293116f,  0.356722f,  1.249127f,  0.261757f,  0.309346f,  0.389901f,  0.593599f,  0.320918f,  0.316075f,  0.332998f,  0.472961f,  0.214602f,  0.349448f,  0.230965f,  0.195239f,  0.309828f,  0.372014f,  0.212879f,  0.369698f,  0.318399f,  0.414703f,  0.183498f,  0.556013f,  0.459997f,  0.230437f,  0.247669f,  0.267277f,  0.299269f,  1.697439f,  0.211054f,  0.415267f,  0.902354f,  2.454296f,  0.247437f,  0.263127f,  0.254676f,  0.386799f,  0.16106f,  0.717883f,  0.336774f,  0.39732f,  0.503132f,  0.387764f,  0.269941f,  1.187671f,  0.384978f,  0.410636f,  0.461261f,  0.777082f,  0.260984f,  0.269268f,  0.836109f,  0.349059f,  0.25468f,  0.234747f,  0.463477f,  0.310409f,  0.217475f,  0.244881f,  0.197799f,  0.202637f,  0.331691f,  0.442925f,  0.215597f,  0.515923f,  0.41472f,  0.323176f,  0.339668f,  0.45825f,  0.623395f,  0.379006f,  0.367402f,  0.246142f,  0.654417f,  0.292928f,  0.270524f,  0.242159f,  0.455512f,  0.14753f,  0.345778f,  0.301223f,  0.370665f,  0.324759f,  0.63514f,  0.619521f,  0.343561f,  0.875277f,  0.200884f,  0.29333f,  0.386481f,  2.281083f,  0.238777f,  0.161842f,  0.473555f,  0.43149f,  0.37422f,  0.261271f,  1.312476f,  0.49221f,  0.260009f,  1.365515f,  0.189785f,  0.251911f, };
const std::vector<float> fire9_expand3x3_calib = {
    1.007729f,  2.401496f,  2.210445f,  2.804331f,  0.600268f,  2.477034f,  2.388336f,  5.995232f,  1.543836f,  0.877708f,  0.0f,  8.896174f,  0.0f,  7.731974f,  1.388156f,  2.891964f,  3.589132f,  2.290087f,  0.982144f,  1.13316f,  0.591399f,  1.471249f,  0.973516f,  0.623325f,  6.779046f,  2.12515f,  6.558528f,  2.584479f,  0.0f,  1.307016f,  3.682867f,  3.920721f,  1.991873f,  0.0f,  1.00933f,  10.10535f,  13.11363f,  11.427646f,  2.716967f,  1.203712f,  5.662918f,  0.656575f,  1.026171f,  1.665655f,  0.0f,  1.926096f,  3.823861f,  2.485892f,  13.335013f,  3.328816f,  3.295055f,  1.103446f,  1.706565f,  1.977568f,  1.817664f,  1.269416f,  1.632326f,  13.455157f,  0.703254f,  3.818068f,  6.0099f,  1.716945f,  1.012001f,  1.058536f,  7.705095f,  0.822635f,  0.90737f,  0.0f,  1.844892f,  1.350142f,  5.740891f,  1.289277f,  1.945925f,  2.318288f,  0.580869f,  1.450981f,  1.455714f,  1.379477f,  1.408449f,  1.92198f,  0.451988f,  3.249569f,  7.528871f,  1.322958f,  2.533322f,  0.0f,  1.709031f,  0.922121f,  2.274461f,  0.0f,  5.21f,  0.0f,  1.463555f,  0.928546f,  0.566443f,  0.0f,  1.179519f,  0.637131f,  6.989736f,  1.813508f,  4.079745f,  0.997502f,  0.76973f,  58.69738f,  2.738403f,  2.187487f,  2.27493f,  1.098093f,  0.698766f,  0.770299f,  1.46814f,  1.5039f,  0.842891f,  0.374346f,  4.017017f,  4.586841f,  1.065857f,  0.0f,  1.092765f,  2.966375f,  1.404925f,  5.016055f,  1.194934f,  1.73824f,  8.225762f,  0.349001f,  2.786469f,  1.177551f,  0.952602f,  0.629832f,  2.317937f,  1.661458f,  0.958722f,  1.063937f,  4.762744f,  0.0f,  2.526262f,  1.212341f,  1.03071f,  0.577761f,  2.339379f,  1.492129f,  1.04147f,  3.54161f,  0.463795f,  0.601152f,  1.794231f,  0.4616f,  2.561548f,  84.413426f,  0.44882f,  0.91993f,  6.960315f,  0.936986f,  3.74491f,  0.354527f,  1.277685f,  0.0f,  1.084626f,  0.0f,  0.0f,  0.900863f,  0.988081f,  1.058545f,  0.987497f,  2.625214f,  1.071676f,  1.428207f,  2.7997f,  1.203643f,  8.308419f,  0.778368f,  0.868352f,  2.998288f,  1.608344f,  1.626441f,  0.472854f,  2.759934f,  1.060747f,  3.992819f,  3.849266f,  0.34631f,  2.325173f,  2.74959f,  0.7573f,  2.379543f,  2.119585f,  1.038388f,  0.237891f,  1.609455f,  0.0f,  3.422378f,  6.041951f,  1.431407f,  0.0f,  2.833493f,  10.829247f,  2.086804f,  2.041407f,  3.291878f,  8.709009f,  1.192925f,  0.85192f,  1.329407f,  1.479309f,  0.736454f,  2.36452f,  6.48022f,  2.118503f,  2.700203f,  7.382004f,  2.574728f,  1.316668f,  0.560848f,  2.698167f,  2.50727f,  5.32169f,  1.699319f,  1.247422f,  0.0f,  1.793251f,  2.931827f,  1.108725f,  0.575603f,  0.0f,  1.541442f,  2.896528f,  0.937975f,  4.507494f,  1.247826f,  1.27767f,  0.88818f,  0.850369f,  1.326002f,  0.620141f,  4.779899f,  1.106715f,  15.19575f,  0.756155f,  2.571235f,  2.025867f,  0.0f,  130.233569f,  1.148085f,  1.467351f,  0.715199f,  1.164304f,  4.975807f,  7.995769f,  0.510009f,  1.120572f,  2.292464f,  1.125158f,  1.118746f,  0.83456f,  1.730606f, };
const std::vector<float> fire2_concat_calib = {
    0.963435f,  1.201264f,  0.694619f,  0.9051f,  41.418536f,  1.211716f,  0.579039f,  1.195891f,  0.452568f,  0.313675f,  1.720361f,  1.205425f,  0.360441f,  1.654169f,  0.883116f,  1.046974f,  0.847842f,  0.582158f,  0.454326f,  1.177987f,  0.253805f,  0.617873f,  0.515755f,  0.733917f,  0.786397f,  2.263363f,  0.829052f,  1.033958f,  0.364537f,  0.593533f,  1.70435f,  0.394697f,  1.011767f,  0.777714f,  2.016824f,  0.928132f,  1.130587f,  1.04983f,  1.682193f,  1.406582f,  0.546535f,  0.717624f,  2.625019f,  0.701941f,  1.086743f,  0.485218f,  1.370454f,  0.680954f,  0.68295f,  0.488368f,  2.056291f,  0.662352f,  0.492718f,  2.456651f,  1.375096f,  2.663808f,  1.500274f,  0.448405f,  0.781423f,  0.519459f,  0.884709f,  0.64504f,  1.239932f,  1.674254f,  0.510171f,  2.096004f,  0.565724f,  0.623843f,  0.537084f,  0.48958f,  0.498908f,  0.49709f,  1.198249f,  0.747151f,  0.622598f,  0.361132f,  0.320793f,  0.436224f,  0.507754f,  0.511956f,  0.519636f,  0.393847f,  0.354905f,  0.632829f,  0.728219f,  0.467211f,  0.965024f,  0.497723f,  0.646926f,  0.402597f,  0.33591f,  0.404938f,  0.871911f,  0.352999f,  0.499787f,  0.355056f,  0.390055f,  0.480144f,  0.305641f,  0.7672f,  0.591835f,  0.299113f,  0.595009f,  0.806482f,  0.96215f,  1.09741f,  0.631926f,  0.857262f,  0.464112f,  0.582312f,  0.479643f,  1.162759f,  0.405418f,  1.136842f,  0.351943f,  0.399737f,  0.468669f,  0.342121f,  1.058219f,  0.668562f,  0.390548f,  0.521299f,  1.090194f,  0.787133f,  0.882177f,  0.376192f,  0.568401f,  0.324013f, };
const std::vector<float> fire8_expand1x1_calib = {
    3.050714f,  2.022486f,  2.527102f,  2.522945f,  1.0938f,  1.189762f,  0.563553f,  1.390082f,  1.597754f,  2.467744f,  2.349289f,  1.094035f,  1.467789f,  4.508902f,  0.950314f,  1.781951f,  3.938424f,  2.557025f,  2.900967f,  2.304632f,  1.76166f,  1.931039f,  1.526864f,  20.994824f,  3.767529f,  6.292767f,  2.109508f,  1.403101f,  6.054856f,  0.926662f,  1.682663f,  6.544368f,  5.593186f,  2.906371f,  10.840802f,  1.532525f,  2.255608f,  2.864224f,  1.050742f,  1.089839f,  1.757542f,  3.362412f,  3.712115f,  7.037883f,  0.844409f,  1.493963f,  1.462162f,  1.139228f,  1.469244f,  2.901696f,  1.891604f,  2.096287f,  5.747881f,  2.201509f,  4.488521f,  2.321636f,  1.822756f,  1.253603f,  2.924219f,  2.01309f,  0.560464f,  1.957725f,  1.259571f,  3.092869f,  1.423634f,  2.474163f,  2.271739f,  2.492229f,  2.829913f,  5.843137f,  2.070886f,  1.177147f,  0.953747f,  1.327809f,  4.022437f,  1.656692f,  1.036329f,  0.925575f,  2.775677f,  0.768695f,  1.842941f,  2.600631f,  0.979772f,  2.133056f,  7.92057f,  1.904239f,  3.784786f,  1.456828f,  1.506167f,  1.054555f,  1.320623f,  1.367718f,  2.398734f,  1.446026f,  2.328135f,  1.986759f,  0.82564f,  1.584114f,  2.498402f,  2.037444f,  1.836024f,  5.378849f,  2.094051f,  1.300048f,  1.667638f,  1.780839f,  5.645122f,  2.375257f,  1.773909f,  8.842349f,  6.347651f,  2.763044f,  1.310975f,  2.685915f,  3.770851f,  1.983253f,  1.48138f,  1.527186f,  1.372888f,  0.883601f,  3.075403f,  2.333444f,  16.684994f,  5.064341f,  1.298012f,  0.779208f,  5.338512f,  2.24848f,  4.899824f,  2.752815f,  1.830573f,  1.028332f,  1.371376f,  2.164074f,  2.253175f,  1.141511f,  1.392906f,  60.612713f,  2.195891f,  2.298659f,  1.681992f,  7.675989f,  5.147744f,  4.039273f,  1.379595f,  2.617693f,  1.659083f,  5.419198f,  3.061259f,  1.670468f,  0.957472f,  1.984915f,  1.647857f,  1.400236f,  1.509904f,  1.111597f,  2.030577f,  1.533807f,  2.429966f,  3.693772f,  1.258186f,  1.967181f,  3.894248f,  1.532012f,  1.84235f,  3.083894f,  1.662197f,  1.888338f,  0.902348f,  4.503578f,  1.395856f,  1.315844f,  1.397712f,  1.211948f,  1.471812f,  1.278395f,  2.444442f,  0.941815f,  1.546651f,  2.524314f,  0.990053f,  1.86407f,  1.497262f,  1.706409f,  1.737608f,  2.392137f,  156.161237f,  2.702283f,  1.277724f,  1.281169f,  2.408793f,  1.462562f,  1.667141f,  2.272508f,  6.413947f,  1.707228f,  5.503673f,  1.674f,  1.806723f,  1.468898f,  1.044236f,  11.751425f,  1.788068f,  3.757296f,  2.436745f,  4.593211f,  1.712546f,  1.897216f,  1.780023f,  2.284826f,  0.980953f,  1.795558f,  2.714963f,  1.50088f,  1.778408f,  12.768426f,  6.377519f,  2.160768f,  2.458115f,  2.545871f,  2.335671f,  1.789753f,  4.839386f,  0.956275f,  1.880289f,  4.364471f,  3.208262f,  5.099071f,  0.989035f,  1.956757f,  1.931885f,  2.191926f,  3.620214f,  1.320875f,  1.500948f,  1.000843f,  1.911114f,  2.620799f,  1.776423f,  2.149198f,  1.113361f,  1.026686f,  3.28123f,  4.103446f,  0.757675f,  0.699802f,  2.975709f,  2.523456f,  2.718607f,  1.481443f,  1.375878f,  3.430328f,  2.106534f,  4.796344f,  2.674315f,  1.09144f, };
const std::vector<float> fire6_expand1x1_calib = {
    1.114348f,  0.966059f,  0.842091f,  0.291012f,  0.657432f,  0.697304f,  1.457795f,  0.837957f,  0.752673f,  0.926629f,  0.574266f,  0.577945f,  0.551567f,  0.714555f,  0.879672f,  0.714137f,  0.835389f,  0.640615f,  0.604874f,  1.580162f,  1.402158f,  0.466852f,  0.801803f,  1.923409f,  0.669626f,  0.514766f,  0.657885f,  0.462552f,  0.892054f,  0.475919f,  1.095451f,  1.072418f,  0.83809f,  0.735524f,  1.113439f,  1.197458f,  1.368611f,  0.70283f,  1.653592f,  0.833219f,  0.583227f,  6.828508f,  1.317775f,  2.249002f,  0.577711f,  0.44721f,  1.417166f,  0.711851f,  0.770837f,  0.647381f,  0.520733f,  0.664991f,  0.713571f,  0.556722f,  2.167335f,  2.348468f,  1.175959f,  0.728913f,  0.591523f,  0.620644f,  0.774013f,  0.642459f,  1.206135f,  0.702752f,  0.841321f,  0.751987f,  1.034691f,  1.100997f,  0.659727f,  0.479428f,  0.562552f,  0.542434f,  0.710708f,  0.304532f,  0.878327f,  0.976705f,  1.671262f,  0.460901f,  1.362263f,  0.549474f,  0.800752f,  2.103771f,  0.472977f,  0.868536f,  0.568841f,  3.680061f,  0.767747f,  0.770421f,  0.888833f,  0.885647f,  0.640938f,  0.639608f,  0.602278f,  0.965141f,  0.78574f,  1.762046f,  0.418906f,  0.795924f,  1.400065f,  0.989135f,  0.571722f,  1.115375f,  1.006618f,  0.801368f,  0.537976f,  1.170701f,  1.677999f,  0.429825f,  0.734796f,  0.915355f,  0.96253f,  0.857587f,  1.117761f,  0.842069f,  0.703699f,  1.146427f,  0.539851f,  1.323555f,  0.625563f,  0.390712f,  1.065168f,  0.656531f,  1.051142f,  0.983642f,  3.453198f,  0.472288f,  0.363096f,  0.834587f,  0.689959f,  0.428003f,  0.733968f,  31.286182f,  1.057954f,  0.738974f,  1.190789f,  0.744907f,  1.463014f,  0.608118f,  1.357818f,  0.577254f,  0.7206f,  1.281114f,  0.87175f,  1.238626f,  0.66688f,  0.621553f,  1.004683f,  0.700133f,  1.557617f,  0.518554f,  0.620635f,  0.720343f,  2.028566f,  0.31627f,  1.05587f,  1.381074f,  0.521674f,  0.885332f,  1.839258f,  0.871385f,  0.620702f,  3.071989f,  0.756434f,  1.601614f,  0.502815f,  0.376881f,  1.023525f,  1.36579f,  1.088009f,  0.621714f,  0.46419f,  0.496633f,  0.286208f,  0.846972f,  0.635607f,  1.25228f,  6.458306f,  1.160687f,  0.376393f,  0.541832f,  0.832902f,  1.066734f,  0.758866f,  0.983612f,  1.993752f,  1.370891f,  8.433775f,  24.81632f,  0.382997f,  0.644134f,  0.807729f,  0.784231f, };
const std::vector<float> fire9_concat_calib = {
    0.941047f,  1.247213f,  7.632166f,  0.690649f,  0.0f,  4.1728f,  0.0f,  5.565806f,  11.186766f,  4.192997f,  4.238858f,  0.0f,  3.871361f,  3.401124f,  7.463169f,  3.245061f,  9.667499f,  0.850095f,  4.767464f,  1.940534f,  3.350446f,  10.052479f,  1.183322f,  0.0f,  0.0f,  8.977803f,  6.190773f,  8.924556f,  5.315542f,  6.153608f,  0.0f,  0.645932f,  4.752051f,  2.64352f,  1.841145f,  13.922065f,  0.985573f,  1.601812f,  4.592348f,  6.056589f,  1.536364f,  9.140044f,  1.985377f,  2.193213f,  1.580711f,  0.0f,  0.819841f,  0.0f,  1.989585f,  1.137371f,  0.656534f,  1.993533f,  1.751937f,  26.332268f,  2.31825f,  2.141924f,  1.390842f,  0.816852f,  1.839231f,  1.537988f,  8.023806f,  1.821483f,  6.251631f,  0.0f,  3.206925f,  0.0f,  3.448117f,  2.259827f,  9.469062f,  13.201087f,  0.0f,  4.176381f,  1.089736f,  2.8137f,  22.593362f,  39.005753f,  0.800005f,  4.37236f,  2.115743f,  2.141526f,  1.502676f,  0.0f,  0.0f,  0.0f,  0.727969f,  2.120491f,  1.973781f,  0.0f,  0.0f,  8.507731f,  2.218232f,  1.005845f,  1.177955f,  4.50871f,  0.811362f,  2.168657f,  1.29958f,  2.352854f,  1.124073f,  3.902601f,  0.0f,  2.953646f,  1.990524f,  14.030452f,  10.048661f,  0.81266f,  3.401515f,  2.017359f,  0.745467f,  0.0f,  1.137983f,  9.577316f,  0.0f,  1.704261f,  2.072634f,  1.315367f,  1.270193f,  0.0f,  1.353946f,  0.0f,  2.909268f,  4.298149f,  0.0f,  2.100173f,  1.508613f,  2.162692f,  5.874272f,  1.547427f,  0.750015f,  5.971104f,  0.0f,  0.98455f,  9.635739f,  2.327917f,  2.369478f,  1.362393f,  0.0f,  6.013941f,  1.435479f,  7.599921f,  2.364603f,  2.091416f,  5.812357f,  2.839321f,  3.940281f,  0.0f,  3.543734f,  0.0f,  3.449606f,  2.24889f,  25.617751f,  0.785221f,  5.20622f,  1.318586f,  0.0f,  1.539194f,  1.501388f,  0.89707f,  1.132008f,  78.75969f,  0.886704f,  1.538784f,  5.938353f,  0.0f,  6.311029f,  2.305126f,  0.971356f,  1.577048f,  0.0f,  2.901411f,  4.433367f,  1.407115f,  3.798063f,  10.835345f,  0.781899f,  2.003158f,  1.894612f,  13.395791f,  0.0f,  2.281481f,  6.860007f,  1.575589f,  1.544952f,  2.631355f,  5.834976f,  22.423504f,  2.182416f,  0.0f,  0.0f,  4.25311f,  27.984972f,  5.201401f,  0.842924f,  1.692893f,  2.363622f,  0.0f,  5.884588f,  5.310874f,  1.97884f,  3.583724f,  0.0f,  2.387986f,  2.991452f,  5.28616f,  1.980226f,  6.92721f,  2.986401f,  0.0f,  82.099153f,  8.498394f,  0.0f,  4.935105f,  0.0f,  0.0f,  1.912092f,  3.876998f,  1.592874f,  8.128f,  3.203729f,  4.848753f,  5.378439f,  0.83612f,  1.779005f,  1.898685f,  0.0f,  1.037989f,  0.0f,  3.897547f,  2.458534f,  9.395854f,  63.377681f,  13.727044f,  0.581244f,  4.597002f,  0.982121f,  5.058753f,  0.726852f,  36.505687f,  10.944408f,  1.620851f,  0.594146f,  2.545361f,  0.0f,  9.008626f,  1.144093f,  1.412942f,  11.164933f,  0.0f,  0.0f,  1.107825f,  0.947867f,  0.869053f,  1.256493f,  1.823775f,  0.801115f,  1.46295f,  1.007729f,  2.401496f,  2.210445f,  2.804331f,  0.600268f,  2.477034f,  2.388336f,  5.995232f,  1.543836f,  0.877708f,  0.0f,  8.896174f,  0.0f,  7.731974f,  1.388156f,  2.891964f,  3.589132f,  2.290087f,  0.982144f,  1.13316f,  0.591399f,  1.471249f,  0.973516f,  0.623325f,  6.779046f,  2.12515f,  6.558528f,  2.584479f,  0.0f,  1.307016f,  3.682867f,  3.920721f,  1.991873f,  0.0f,  1.00933f,  10.10535f,  13.11363f,  11.427646f,  2.716967f,  1.203712f,  5.662918f,  0.656575f,  1.026171f,  1.665655f,  0.0f,  1.926096f,  3.823861f,  2.485892f,  13.335013f,  3.328816f,  3.295055f,  1.103446f,  1.706565f,  1.977568f,  1.817664f,  1.269416f,  1.632326f,  13.455157f,  0.703254f,  3.818068f,  6.0099f,  1.716945f,  1.012001f,  1.058536f,  7.705095f,  0.822635f,  0.90737f,  0.0f,  1.844892f,  1.350142f,  5.740891f,  1.289277f,  1.945925f,  2.318288f,  0.580869f,  1.450981f,  1.455714f,  1.379477f,  1.408449f,  1.92198f,  0.451988f,  3.249569f,  7.528871f,  1.322958f,  2.533322f,  0.0f,  1.709031f,  0.922121f,  2.274461f,  0.0f,  5.21f,  0.0f,  1.463555f,  0.928546f,  0.566443f,  0.0f,  1.179519f,  0.637131f,  6.989736f,  1.813508f,  4.079745f,  0.997502f,  0.76973f,  58.69738f,  2.738403f,  2.187487f,  2.27493f,  1.098093f,  0.698766f,  0.770299f,  1.46814f,  1.5039f,  0.842891f,  0.374346f,  4.017017f,  4.586841f,  1.065857f,  0.0f,  1.092765f,  2.966375f,  1.404925f,  5.016055f,  1.194934f,  1.73824f,  8.225762f,  0.349001f,  2.786469f,  1.177551f,  0.952602f,  0.629832f,  2.317937f,  1.661458f,  0.958722f,  1.063937f,  4.762744f,  0.0f,  2.526262f,  1.212341f,  1.03071f,  0.577761f,  2.339379f,  1.492129f,  1.04147f,  3.54161f,  0.463795f,  0.601152f,  1.794231f,  0.4616f,  2.561548f,  84.413426f,  0.44882f,  0.91993f,  6.960315f,  0.936986f,  3.74491f,  0.354527f,  1.277685f,  0.0f,  1.084626f,  0.0f,  0.0f,  0.900863f,  0.988081f,  1.058545f,  0.987497f,  2.625214f,  1.071676f,  1.428207f,  2.7997f,  1.203643f,  8.308419f,  0.778368f,  0.868352f,  2.998288f,  1.608344f,  1.626441f,  0.472854f,  2.759934f,  1.060747f,  3.992819f,  3.849266f,  0.34631f,  2.325173f,  2.74959f,  0.7573f,  2.379543f,  2.119585f,  1.038388f,  0.237891f,  1.609455f,  0.0f,  3.422378f,  6.041951f,  1.431407f,  0.0f,  2.833493f,  10.829247f,  2.086804f,  2.041407f,  3.291878f,  8.709009f,  1.192925f,  0.85192f,  1.329407f,  1.479309f,  0.736454f,  2.36452f,  6.48022f,  2.118503f,  2.700203f,  7.382004f,  2.574728f,  1.316668f,  0.560848f,  2.698167f,  2.50727f,  5.32169f,  1.699319f,  1.247422f,  0.0f,  1.793251f,  2.931827f,  1.108725f,  0.575603f,  0.0f,  1.541442f,  2.896528f,  0.937975f,  4.507494f,  1.247826f,  1.27767f,  0.88818f,  0.850369f,  1.326002f,  0.620141f,  4.779899f,  1.106715f,  15.19575f,  0.756155f,  2.571235f,  2.025867f,  0.0f,  130.233569f,  1.148085f,  1.467351f,  0.715199f,  1.164304f,  4.975807f,  7.995769f,  0.510009f,  1.120572f,  2.292464f,  1.125158f,  1.118746f,  0.83456f,  1.730606f, };
const std::vector<float> fire2_expand1x1_calib = {
    0.963435f,  1.201264f,  0.694619f,  0.9051f,  41.418536f,  1.211716f,  0.579039f,  1.195891f,  0.452568f,  0.313675f,  1.720361f,  1.205425f,  0.360441f,  1.654169f,  0.883116f,  1.046974f,  0.847842f,  0.582158f,  0.454326f,  1.177987f,  0.253805f,  0.617873f,  0.515755f,  0.733917f,  0.786397f,  2.263363f,  0.829052f,  1.033958f,  0.364537f,  0.593533f,  1.70435f,  0.394697f,  1.011767f,  0.777714f,  2.016824f,  0.928132f,  1.130587f,  1.04983f,  1.682193f,  1.406582f,  0.546535f,  0.717624f,  2.625019f,  0.701941f,  1.086743f,  0.485218f,  1.370454f,  0.680954f,  0.68295f,  0.488368f,  2.056291f,  0.662352f,  0.492718f,  2.456651f,  1.375096f,  2.663808f,  1.500274f,  0.448405f,  0.781423f,  0.519459f,  0.884709f,  0.64504f,  1.239932f,  1.674254f, };
const std::vector<float> conv1_calib = {
    0.355015f,  1.014191f,  0.455638f,  2.920541f,  0.74129f,  1.12926f,  0.583267f,  0.853695f,  0.490137f,  1.010865f,  0.443702f,  0.529352f,  0.676525f,  1.113293f,  0.589289f,  0.335212f,  0.81452f,  0.817809f,  0.874517f,  3.266772f,  0.524087f,  2.11846f,  0.986055f,  0.723713f,  1.250258f,  0.510725f,  0.742629f,  0.50777f,  0.950521f,  0.881571f,  0.878814f,  0.374332f,  0.685024f,  1.45147f,  1.495418f,  2.036421f,  0.902662f,  0.303316f,  0.864263f,  1.22925f,  0.409522f,  2.37267f,  0.815724f,  0.323652f,  0.638785f,  2.791724f,  2.731488f,  1.365541f,  0.493129f,  0.223495f,  0.828809f,  1.183002f,  0.772271f,  0.535863f,  0.313306f,  0.304385f,  1.480259f,  2.194138f,  2.630587f,  0.561915f,  0.309085f,  0.652899f,  0.837057f,  0.525423f, };
const std::vector<float> fire6_expand3x3_calib = {
    0.33228f,  0.886952f,  0.269665f,  1.174143f,  0.306552f,  0.523856f,  0.417085f,  0.710991f,  0.24864f,  0.866823f,  0.219623f,  0.265924f,  0.139698f,  0.255364f,  0.34007f,  0.394694f,  0.907551f,  0.252926f,  0.168094f,  0.50041f,  0.270312f,  0.437943f,  0.494637f,  0.517782f,  0.611059f,  0.665322f,  0.228315f,  1.022347f,  0.280595f,  0.323776f,  0.264208f,  0.447375f,  0.220905f,  0.222931f,  0.296679f,  0.294358f,  0.71844f,  0.305426f,  0.797814f,  0.342778f,  0.209195f,  0.177224f,  0.549481f,  0.326837f,  1.12288f,  0.272875f,  0.183638f,  0.403857f,  0.156127f,  0.270318f,  0.197519f,  0.264461f,  0.303945f,  0.678974f,  0.202948f,  0.493994f,  0.352111f,  0.614476f,  0.255002f,  0.232546f,  0.254781f,  0.251711f,  0.298533f,  0.230837f,  0.158825f,  0.332968f,  0.598879f,  0.444583f,  0.457218f,  0.265902f,  0.203906f,  0.271421f,  0.244105f,  0.256092f,  0.457902f,  0.320768f,  0.222983f,  0.349166f,  0.257804f,  0.27045f,  0.16329f,  0.318928f,  0.247942f,  0.237597f,  0.358267f,  0.392263f,  0.484097f,  0.342999f,  0.343488f,  0.293116f,  0.356722f,  1.249127f,  0.261757f,  0.309346f,  0.389901f,  0.593599f,  0.320918f,  0.316075f,  0.332998f,  0.472961f,  0.214602f,  0.349448f,  0.230965f,  0.195239f,  0.309828f,  0.372014f,  0.212879f,  0.369698f,  0.318399f,  0.414703f,  0.183498f,  0.556013f,  0.459997f,  0.230437f,  0.247669f,  0.267277f,  0.299269f,  1.697439f,  0.211054f,  0.415267f,  0.902354f,  2.454296f,  0.247437f,  0.263127f,  0.254676f,  0.386799f,  0.16106f,  0.717883f,  0.336774f,  0.39732f,  0.503132f,  0.387764f,  0.269941f,  1.187671f,  0.384978f,  0.410636f,  0.461261f,  0.777082f,  0.260984f,  0.269268f,  0.836109f,  0.349059f,  0.25468f,  0.234747f,  0.463477f,  0.310409f,  0.217475f,  0.244881f,  0.197799f,  0.202637f,  0.331691f,  0.442925f,  0.215597f,  0.515923f,  0.41472f,  0.323176f,  0.339668f,  0.45825f,  0.623395f,  0.379006f,  0.367402f,  0.246142f,  0.654417f,  0.292928f,  0.270524f,  0.242159f,  0.455512f,  0.14753f,  0.345778f,  0.301223f,  0.370665f,  0.324759f,  0.63514f,  0.619521f,  0.343561f,  0.875277f,  0.200884f,  0.29333f,  0.386481f,  2.281083f,  0.238777f,  0.161842f,  0.473555f,  0.43149f,  0.37422f,  0.261271f,  1.312476f,  0.49221f,  0.260009f,  1.365515f,  0.189785f,  0.251911f, };
const std::vector<float> fire3_squeeze1x1_calib = {
    0.489839f,  0.29579f,  0.227022f,  0.283123f,  0.257433f,  0.33543f,  0.411308f,  0.439809f,  0.318794f,  0.28237f,  0.280463f,  0.279454f,  0.210521f,  0.297198f,  0.243943f,  0.327624f, };
const std::vector<float> fire5_expand1x1_calib = {
    0.646015f,  0.377449f,  0.444757f,  0.529893f,  0.455892f,  0.499774f,  0.816369f,  0.587979f,  0.623604f,  0.0f,  0.909325f,  0.884906f,  0.887888f,  0.797353f,  1.175327f,  0.347526f,  0.496713f,  0.632448f,  0.895325f,  0.615027f,  0.410253f,  0.637192f,  0.988535f,  0.694661f,  0.611918f,  0.785143f,  1.64203f,  0.469676f,  0.733731f,  1.109781f,  0.461979f,  0.638688f,  0.679406f,  0.671524f,  0.631442f,  1.11985f,  0.557965f,  0.891341f,  0.518057f,  0.267045f,  0.618872f,  0.419647f,  1.301554f,  0.906224f,  0.626443f,  0.744645f,  0.969192f,  0.584653f,  5.62836f,  1.124162f,  0.926047f,  0.695182f,  0.584271f,  1.025153f,  0.459893f,  1.526233f,  0.575345f,  0.531899f,  1.29828f,  0.709259f,  0.502913f,  0.788012f,  0.7192f,  0.520479f,  0.637723f,  0.610178f,  0.609516f,  0.746313f,  0.83205f,  0.458727f,  1.336152f,  0.514314f,  0.935488f,  2.00282f,  1.200855f,  0.433027f,  0.47228f,  0.461472f,  0.803314f,  0.723544f,  0.575043f,  0.763272f,  0.517415f,  0.393032f,  0.642927f,  0.956541f,  1.224144f,  0.352749f,  0.433227f,  0.753571f,  0.754704f,  0.915052f,  0.538291f,  0.544359f,  0.925757f,  0.532852f,  0.552361f,  1.06906f,  0.624069f,  0.675119f,  0.732259f,  0.631272f,  0.585599f,  0.494905f,  0.776402f,  0.833585f,  0.80057f,  0.467089f,  0.76727f,  0.634508f,  0.531824f,  0.520893f,  0.486065f,  0.529447f,  0.931338f,  0.490618f,  0.702947f,  0.684943f,  0.390481f,  0.602293f,  0.467022f,  0.626746f,  0.647351f,  0.845399f,  1.128468f,  0.456045f,  0.465672f,  0.711337f, };
const std::vector<float> fire3_concat_calib = {
    0.650272f,  1.076071f,  0.647282f,  0.882993f,  0.909618f,  0.456167f,  0.694069f,  0.316911f,  0.390168f,  0.724977f,  0.571621f,  0.526368f,  0.5835f,  0.540554f,  0.560009f,  1.174219f,  1.271037f,  1.227207f,  0.335778f,  1.430465f,  0.751515f,  0.46612f,  0.594394f,  0.488112f,  0.617939f,  0.778773f,  0.63654f,  1.108483f,  0.716983f,  0.693095f,  0.88561f,  0.785949f,  0.650268f,  0.814651f,  0.395145f,  0.555889f,  0.404863f,  0.472947f,  0.937906f,  0.275215f,  0.567676f,  0.734036f,  0.608905f,  0.848556f,  0.686216f,  0.461618f,  1.141388f,  0.508059f,  0.640111f,  1.249225f,  0.545106f,  0.538763f,  0.845252f,  0.799733f,  0.856655f,  0.566909f,  0.303507f,  0.862163f,  0.749877f,  1.051951f,  0.831723f,  0.494718f,  0.488683f,  0.475273f,  0.349642f,  0.439341f,  0.317835f,  0.308161f,  0.326472f,  0.36807f,  0.273914f,  0.257629f,  0.3343f,  0.32436f,  0.467389f,  0.298301f,  0.36653f,  0.341925f,  0.452837f,  0.356917f,  0.281617f,  0.775568f,  0.315373f,  0.448356f,  0.300595f,  0.33345f,  0.353041f,  0.299248f,  0.302325f,  0.374796f,  0.285336f,  0.524297f,  0.348571f,  0.255843f,  0.446878f,  0.366276f,  0.443887f,  0.341557f,  0.420551f,  0.444277f,  0.416227f,  0.357107f,  0.426485f,  0.349478f,  0.390386f,  0.364977f,  0.408706f,  0.591683f,  0.771868f,  0.542093f,  0.290485f,  0.320968f,  0.460702f,  0.54421f,  0.353568f,  0.299547f,  0.543164f,  0.437439f,  0.335138f,  0.441018f,  0.332247f,  0.410644f,  0.279652f,  0.410088f,  0.407306f,  0.312919f,  0.353926f,  0.355386f, };
const std::vector<float> fire3_expand3x3_calib = {
    0.349642f,  0.439341f,  0.317835f,  0.308161f,  0.326472f,  0.36807f,  0.273914f,  0.257629f,  0.3343f,  0.32436f,  0.467389f,  0.298301f,  0.36653f,  0.341925f,  0.452837f,  0.356917f,  0.281617f,  0.775568f,  0.315373f,  0.448356f,  0.300595f,  0.33345f,  0.353041f,  0.299248f,  0.302325f,  0.374796f,  0.285336f,  0.524297f,  0.348571f,  0.255843f,  0.446878f,  0.366276f,  0.443887f,  0.341557f,  0.420551f,  0.444277f,  0.416227f,  0.357107f,  0.426485f,  0.349478f,  0.390386f,  0.364977f,  0.408706f,  0.591683f,  0.771868f,  0.542093f,  0.290485f,  0.320968f,  0.460702f,  0.54421f,  0.353568f,  0.299547f,  0.543164f,  0.437439f,  0.335138f,  0.441018f,  0.332247f,  0.410644f,  0.279652f,  0.410088f,  0.407306f,  0.312919f,  0.353926f,  0.355386f, };
const std::vector<float> fire5_concat_calib = {
    0.646015f,  0.377449f,  0.444757f,  0.529893f,  0.455892f,  0.499774f,  0.816369f,  0.587979f,  0.623604f,  0.0f,  0.909325f,  0.884906f,  0.887888f,  0.797353f,  1.175327f,  0.347526f,  0.496713f,  0.632448f,  0.895325f,  0.615027f,  0.410253f,  0.637192f,  0.988535f,  0.694661f,  0.611918f,  0.785143f,  1.64203f,  0.469676f,  0.733731f,  1.109781f,  0.461979f,  0.638688f,  0.679406f,  0.671524f,  0.631442f,  1.11985f,  0.557965f,  0.891341f,  0.518057f,  0.267045f,  0.618872f,  0.419647f,  1.301554f,  0.906224f,  0.626443f,  0.744645f,  0.969192f,  0.584653f,  5.62836f,  1.124162f,  0.926047f,  0.695182f,  0.584271f,  1.025153f,  0.459893f,  1.526233f,  0.575345f,  0.531899f,  1.29828f,  0.709259f,  0.502913f,  0.788012f,  0.7192f,  0.520479f,  0.637723f,  0.610178f,  0.609516f,  0.746313f,  0.83205f,  0.458727f,  1.336152f,  0.514314f,  0.935488f,  2.00282f,  1.200855f,  0.433027f,  0.47228f,  0.461472f,  0.803314f,  0.723544f,  0.575043f,  0.763272f,  0.517415f,  0.393032f,  0.642927f,  0.956541f,  1.224144f,  0.352749f,  0.433227f,  0.753571f,  0.754704f,  0.915052f,  0.538291f,  0.544359f,  0.925757f,  0.532852f,  0.552361f,  1.06906f,  0.624069f,  0.675119f,  0.732259f,  0.631272f,  0.585599f,  0.494905f,  0.776402f,  0.833585f,  0.80057f,  0.467089f,  0.76727f,  0.634508f,  0.531824f,  0.520893f,  0.486065f,  0.529447f,  0.931338f,  0.490618f,  0.702947f,  0.684943f,  0.390481f,  0.602293f,  0.467022f,  0.626746f,  0.647351f,  0.845399f,  1.128468f,  0.456045f,  0.465672f,  0.711337f,  0.457709f,  0.299338f,  0.306461f,  0.391666f,  0.506315f,  0.349832f,  0.727535f,  0.292071f,  0.638637f,  0.482237f,  0.476551f,  0.444207f,  0.298177f,  0.596496f,  0.439719f,  0.267756f,  0.327614f,  0.840737f,  0.378795f,  0.25851f,  0.423763f,  0.255049f,  0.462732f,  0.927346f,  0.547586f,  0.400757f,  0.450649f,  0.314098f,  0.230219f,  0.632388f,  0.577646f,  0.499583f,  0.246846f,  0.325107f,  0.527041f,  0.480222f,  0.341998f,  0.327345f,  1.03911f,  0.66496f,  0.249769f,  0.689929f,  0.651239f,  0.470998f,  0.469725f,  0.337094f,  0.514316f,  0.293926f,  0.402443f,  0.391004f,  0.364607f,  0.398052f,  0.22213f,  0.357844f,  0.350965f,  0.224247f,  0.685608f,  0.390201f,  0.366335f,  0.435773f,  0.861841f,  0.305098f,  0.264626f,  0.457211f,  0.353454f,  0.370743f,  0.328852f,  0.282172f,  0.266723f,  0.460035f,  0.737562f,  0.311069f,  0.389464f,  0.346226f,  0.550532f,  1.132028f,  0.923482f,  0.320744f,  0.317283f,  0.367297f,  0.232866f,  0.2057f,  0.405139f,  0.574185f,  0.375176f,  0.438998f,  0.369516f,  0.403623f,  0.508861f,  0.600598f,  0.421927f,  0.330624f,  0.299941f,  0.340787f,  0.262033f,  0.704561f,  0.284301f,  0.292737f,  0.274354f,  0.396675f,  0.638701f,  0.360401f,  0.392709f,  0.352596f,  1.399645f,  0.636786f,  0.226857f,  0.417556f,  0.39581f,  0.344159f,  0.327546f,  0.565976f,  0.458929f,  0.351229f,  0.279884f,  0.5282f,  0.383677f,  0.335003f,  0.422286f,  0.4525f,  0.534744f,  0.618815f,  0.472129f,  0.215574f,  0.251932f,  0.404483f,  0.492659f,  0.298142f, };
const std::vector<float> fire8_expand3x3_calib = {
    1.18055f,  0.357571f,  1.397313f,  0.796858f,  0.389696f,  1.534054f,  1.498474f,  0.877478f,  0.501156f,  0.388663f,  1.183608f,  0.568828f,  0.373075f,  0.842801f,  0.400638f,  0.638875f,  1.725063f,  0.865017f,  0.674441f,  1.442164f,  0.877284f,  0.966463f,  1.219864f,  1.478877f,  0.496736f,  0.397159f,  1.486194f,  0.759678f,  0.807297f,  0.388429f,  0.899625f,  0.749696f,  0.29402f,  0.751862f,  0.819524f,  0.874391f,  0.512467f,  0.62967f,  0.881957f,  0.951731f,  0.904552f,  0.442111f,  1.565783f,  2.274115f,  1.554734f,  0.555886f,  0.682176f,  0.528852f,  0.773593f,  0.842376f,  0.528849f,  0.917995f,  1.59043f,  0.68727f,  3.876868f,  1.326785f,  0.410569f,  2.124183f,  0.724902f,  1.297861f,  1.895913f,  1.096321f,  0.500572f,  1.064231f,  0.331106f,  0.467611f,  1.173503f,  0.963837f,  0.559871f,  0.503441f,  0.680013f,  0.756497f,  0.0f,  0.823723f,  1.357593f,  1.298007f,  1.688659f,  1.428547f,  0.7341f,  1.883351f,  0.644578f,  0.834253f,  0.415413f,  0.939857f,  0.308105f,  1.749316f,  0.539831f,  0.851869f,  0.387038f,  0.418212f,  1.481367f,  1.445496f,  0.91142f,  1.32337f,  1.419196f,  0.529665f,  1.22684f,  0.431321f,  0.283433f,  0.704182f,  1.657626f,  1.762635f,  0.809056f,  2.062884f,  0.800504f,  1.09854f,  0.821943f,  1.198294f,  1.095838f,  0.540124f,  0.330461f,  0.459614f,  0.877714f,  0.984092f,  0.633979f,  1.405296f,  0.981483f,  0.432365f,  1.051943f,  0.512999f,  0.43167f,  0.446466f,  0.503126f,  0.791139f,  1.120206f,  1.533472f,  1.087906f,  1.191314f,  0.984313f,  0.85439f,  1.587419f,  1.40555f,  0.855709f,  2.253691f,  0.730288f,  0.808799f,  0.901393f,  1.309829f,  1.209639f,  0.651777f,  0.46802f,  1.697704f,  0.302667f,  0.885598f,  0.805909f,  0.542888f,  0.758177f,  0.464975f,  1.040037f,  0.729277f,  1.05544f,  0.555813f,  2.162059f,  0.761154f,  1.159891f,  0.343309f,  0.545425f,  1.268731f,  19.495661f,  1.253875f,  0.429221f,  1.119821f,  0.413332f,  1.698667f,  1.272683f,  0.856545f,  0.791258f,  0.889306f,  0.854758f,  0.510996f,  0.890503f,  1.146209f,  0.901029f,  4.065652f,  4.150842f,  1.128799f,  0.517032f,  0.272174f,  0.692959f,  1.08509f,  0.799371f,  0.934862f,  0.852589f,  0.812722f,  0.390597f,  1.35552f,  0.826839f,  0.644686f,  1.049752f,  0.415705f,  1.311817f,  0.684112f,  0.460858f,  4.223352f,  1.114446f,  0.485422f,  0.637454f,  1.115767f,  0.563283f,  0.53404f,  0.702822f,  0.859578f,  0.652319f,  1.335825f,  0.717879f,  1.075697f,  0.844123f,  0.368189f,  0.360682f,  0.39049f,  1.779482f,  0.602513f,  0.656531f,  0.706832f,  3.508908f,  1.436947f,  6.227871f,  0.502938f,  1.29575f,  0.89773f,  3.741137f,  0.605188f,  0.0f,  1.60514f,  1.646827f,  1.280383f,  0.600751f,  0.764328f,  0.452592f,  1.246467f,  1.231408f,  2.66628f,  0.58383f,  0.559826f,  0.61276f,  0.193079f,  1.491671f,  0.696127f,  0.947422f,  4.385768f,  1.844464f,  1.384112f,  0.588451f,  0.396164f,  0.463952f,  0.881816f,  1.021106f,  0.741831f,  1.10479f,  0.56587f,  1.012888f,  3.161075f,  0.259832f,  1.014231f,  0.794649f,  0.604915f, };
const std::vector<float> fire9_squeeze1x1_calib = {
    0.439836f,  0.603474f,  0.195156f,  0.631533f,  0.45192f,  0.549772f,  0.408287f,  0.581326f,  1.051124f,  0.713607f,  0.970518f,  0.392123f,  0.454462f,  0.570758f,  0.494213f,  0.916855f,  0.335182f,  0.894807f,  0.244157f,  0.356066f,  0.414969f,  0.776682f,  1.264424f,  0.652001f,  0.679188f,  1.506112f,  0.450556f,  0.485222f,  0.362188f,  0.520592f,  0.91014f,  0.269489f,  0.55197f,  0.451711f,  0.45856f,  0.721669f,  0.454868f,  0.658338f,  0.403278f,  0.620784f,  0.479519f,  0.413085f,  0.739735f,  0.42405f,  0.337528f,  0.387172f,  1.159658f,  1.270457f,  0.558453f,  0.531634f,  0.117552f,  0.436011f,  0.420449f,  0.536134f,  0.59406f,  1.814073f,  0.31887f,  0.535084f,  1.34276f,  0.526211f,  0.339986f,  0.488578f,  0.505932f,  0.357965f, };
const std::vector<float> fire4_expand3x3_calib = {
    0.305905f,  0.323983f,  0.282955f,  0.389437f,  0.232206f,  0.339227f,  0.443513f,  0.256582f,  0.40429f,  0.346651f,  0.125559f,  0.339857f,  0.170454f,  0.287916f,  0.20317f,  0.368614f,  0.24609f,  0.234605f,  0.303649f,  0.148573f,  0.427109f,  0.208972f,  0.347779f,  0.260245f,  0.426243f,  0.294827f,  0.389138f,  0.504571f,  0.206062f,  0.257397f,  0.427818f,  0.205674f,  0.344767f,  0.360638f,  0.455828f,  0.298554f,  0.443809f,  0.344079f,  0.429547f,  0.826764f,  0.411044f,  0.252645f,  0.169174f,  0.590813f,  0.370082f,  0.15002f,  0.23888f,  0.244886f,  0.277687f,  0.357664f,  0.334414f,  0.272705f,  0.486611f,  0.489578f,  0.490909f,  0.262572f,  0.316056f,  0.319073f,  0.422156f,  0.477961f,  0.447453f,  0.529469f,  0.416452f,  0.328769f,  0.391094f,  0.226379f,  0.246465f,  0.33987f,  0.307727f,  0.195378f,  0.369394f,  0.296117f,  0.227614f,  0.499927f,  0.434022f,  0.363962f,  0.234048f,  0.207119f,  0.463929f,  0.392397f,  0.355659f,  0.296147f,  0.527321f,  0.329075f,  0.57805f,  0.622888f,  0.584502f,  0.290554f,  0.393987f,  0.374391f,  0.688769f,  0.322321f,  0.496441f,  0.410358f,  0.376187f,  0.397193f,  0.44117f,  0.380341f,  0.247049f,  0.154077f,  0.346385f,  0.478139f,  0.314624f,  0.324245f,  0.334778f,  0.278323f,  0.159223f,  0.288048f,  0.283449f,  0.464504f,  0.309488f,  0.347333f,  0.341715f,  0.344527f,  0.538629f,  0.376348f,  0.178739f,  0.306133f,  0.362188f,  0.502922f,  0.182464f,  0.663931f,  0.459903f,  0.415667f,  0.458596f,  0.561659f,  0.82399f,  0.23316f, };
const std::vector<float> fire5_squeeze1x1_calib = {
    0.24784f,  0.260714f,  0.267278f,  0.318127f,  0.249757f,  0.232939f,  0.277162f,  0.203352f,  0.220929f,  0.409607f,  0.178726f,  0.202847f,  0.216546f,  0.236214f,  0.331397f,  0.269924f,  0.268528f,  0.197473f,  0.213412f,  0.315533f,  0.166764f,  0.167026f,  0.279694f,  0.21838f,  0.205943f,  0.341191f,  0.16521f,  0.244593f,  0.247141f,  0.282819f,  0.257917f,  0.251878f, };
const std::vector<float> fire6_squeeze1x1_calib = {
    0.360937f,  0.129521f,  0.22364f,  0.251994f,  0.242556f,  0.287471f,  0.20815f,  0.254251f,  0.186751f,  0.246499f,  0.137074f,  0.315449f,  0.305576f,  0.156749f,  0.445423f,  0.6112f,  0.306701f,  0.138987f,  0.429093f,  0.356422f,  0.153656f,  0.231224f,  0.18287f,  0.201584f,  0.227833f,  0.392256f,  0.114248f,  0.310179f,  0.211519f,  0.260876f,  0.291209f,  0.15609f,  0.250144f,  0.271457f,  0.234022f,  0.186519f,  0.205714f,  0.260652f,  0.196637f,  0.248734f,  0.704073f,  0.157854f,  0.18828f,  0.178327f,  0.261957f,  0.329017f,  0.360354f,  0.181462f, };
const std::vector<float> conv10_calib = {
    1.721803f,  4.181662f,  2.020359f,  2.758064f,  2.587818f,  2.160125f,  1.644873f,  1.664107f,  1.47966f,  1.271438f,  1.125647f,  2.435091f,  2.423669f,  1.722258f,  2.424381f,  3.639865f,  2.791043f,  2.427509f,  4.019076f,  1.779177f,  1.896391f,  1.339937f,  1.49663f,  1.267339f,  1.188749f,  1.139044f,  2.300762f,  2.412536f,  1.185431f,  2.127196f,  1.399151f,  1.02869f,  1.18993f,  1.625981f,  2.082247f,  1.606743f,  1.678005f,  2.184018f,  1.464666f,  1.516128f,  2.589892f,  2.794255f,  2.146902f,  1.86243f,  3.059202f,  1.845914f,  2.563849f,  1.830013f,  1.631912f,  1.449128f,  1.804721f,  1.711383f,  3.351419f,  3.120569f,  1.805834f,  2.427291f,  2.450952f,  3.236098f,  1.898387f,  1.846693f,  1.727259f,  1.515895f,  2.490875f,  2.204689f,  2.361604f,  2.096592f,  1.969154f,  1.767001f,  1.827254f,  3.406579f,  3.548229f,  2.271975f,  2.940414f,  2.169876f,  2.851446f,  3.210427f,  2.327201f,  2.088699f,  2.608976f,  3.095379f,  1.867647f,  2.908115f,  1.956085f,  2.212474f,  2.023285f,  1.748825f,  1.927551f,  1.371729f,  3.117023f,  2.208419f,  2.842804f,  3.725651f,  5.995996f,  3.454203f,  2.009764f,  3.380519f,  2.653839f,  1.294221f,  2.136188f,  1.746213f,  2.38085f,  1.653829f,  1.021648f,  1.044262f,  1.114974f,  0.74745f,  0.978037f,  3.625847f,  2.991311f,  3.261612f,  1.303262f,  3.572705f,  1.983433f,  2.567674f,  3.771949f,  2.274571f,  2.505751f,  2.158997f,  1.46497f,  2.454732f,  3.108357f,  3.254616f,  2.265394f,  2.348842f,  2.91574f,  2.846621f,  3.860757f,  5.156669f,  3.906454f,  4.580059f,  1.492958f,  2.315241f,  5.213807f,  2.205175f,  1.655305f,  1.859697f,  2.662178f,  2.229423f,  2.574128f,  1.130799f,  1.320922f,  2.082192f,  2.183909f,  3.409286f,  2.933777f,  1.835517f,  1.751792f,  2.384636f,  3.356627f,  1.540307f,  1.358116f,  1.036278f,  2.907057f,  1.896482f,  2.85458f,  2.586395f,  1.988327f,  1.620803f,  0.998522f,  0.908512f,  1.192186f,  0.932281f,  0.816783f,  1.225407f,  1.033352f,  1.332488f,  0.775274f,  0.832776f,  1.082371f,  0.934469f,  1.133372f,  0.769888f,  0.710406f,  1.115043f,  1.030928f,  2.121695f,  0.979153f,  0.997181f,  1.360872f,  1.167494f,  0.893668f,  1.177911f,  1.274922f,  1.46169f,  1.287419f,  1.869767f,  1.082242f,  1.947668f,  1.038379f,  1.172972f,  1.492204f,  1.333221f,  1.452685f,  1.363953f,  1.723382f,  1.937591f,  1.536362f,  1.606141f,  1.261297f,  1.818289f,  2.050163f,  1.782469f,  1.416985f,  1.266934f,  2.603158f,  1.062797f,  0.796758f,  0.792324f,  0.881938f,  0.973247f,  1.251898f,  1.293745f,  1.052867f,  1.227231f,  1.715097f,  1.090784f,  1.558695f,  1.992429f,  1.187593f,  1.272224f,  1.33699f,  1.040063f,  0.929218f,  1.266732f,  1.011477f,  1.100386f,  1.958728f,  1.008457f,  1.807171f,  2.334327f,  1.142703f,  1.077239f,  1.210862f,  1.670635f,  1.46484f,  0.974053f,  1.048287f,  1.320246f,  1.450076f,  1.959018f,  1.078657f,  1.113889f,  1.351748f,  1.364434f,  1.190387f,  1.596165f,  0.995048f,  1.206513f,  1.122533f,  1.034042f,  1.072744f,  0.867202f,  1.66211f,  0.726965f,  1.480109f,  1.286488f,  1.346916f,  1.002542f,  1.405197f,  1.281048f,  0.861233f,  1.465249f,  1.614092f,  0.86972f,  0.909703f,  0.909768f,  0.974951f,  0.93383f,  0.924632f,  0.74637f,  0.800883f,  0.813347f,  0.855882f,  0.650765f,  0.769818f,  1.044322f,  0.792245f,  0.74062f,  0.729583f,  1.105232f,  0.740879f,  1.990786f,  1.544127f,  2.21931f,  1.424017f,  1.519688f,  0.692109f,  1.144588f,  1.177485f,  1.223978f,  0.789541f,  1.0563f,  1.651624f,  0.832334f,  0.864216f,  1.136862f,  0.718574f,  0.845748f,  0.873549f,  0.786612f,  6.265942f,  4.631622f,  2.77358f,  2.855646f,  3.464285f,  2.491696f,  1.906123f,  2.12349f,  3.872884f,  3.182734f,  1.856364f,  1.417694f,  1.966913f,  3.38441f,  3.325922f,  3.043236f,  2.283364f,  2.119974f,  4.145112f,  3.587834f,  2.979276f,  3.028446f,  2.972165f,  3.126062f,  3.009835f,  4.211434f,  1.960924f,  2.580892f,  2.42913f,  2.72243f,  2.218124f,  1.725785f,  2.267594f,  1.31571f,  2.262234f,  1.133655f,  1.150435f,  1.21881f,  2.363846f,  1.601271f,  1.481793f,  1.170895f,  1.077403f,  1.265722f,  1.131292f,  1.26658f,  1.071685f,  1.032999f,  0.827173f,  0.910786f,  1.31346f,  1.436059f,  2.100045f,  1.217711f,  1.088596f,  0.981665f,  1.262162f,  1.645931f,  1.337318f,  1.322166f,  1.123973f,  1.535098f,  1.015691f,  2.389468f,  1.315766f,  0.974651f,  1.420836f,  1.742509f,  1.676271f,  1.960509f,  1.34045f,  1.732469f,  1.176961f,  1.334331f,  1.80182f,  2.278971f,  1.671277f,  1.962354f,  2.185811f,  1.275121f,  1.327666f,  1.261836f,  0.923106f,  1.447002f,  1.80032f,  1.714018f,  1.725565f,  1.066528f,  1.487614f,  1.918319f,  3.094421f,  1.882446f,  2.871679f,  3.018125f,  2.315347f,  2.19332f,  2.454453f,  1.46001f,  1.622298f,  2.738633f,  1.749292f,  1.142847f,  3.497746f,  1.646532f,  3.079773f,  4.162365f,  2.842995f,  2.512419f,  2.847783f,  4.105674f,  2.481836f,  2.400262f,  1.981715f,  2.098154f,  2.400207f,  3.274664f,  1.560952f,  2.090662f,  1.443364f,  1.927847f,  1.805513f,  2.81312f,  2.120629f,  2.066243f,  1.821444f,  3.343293f,  2.82194f,  2.936817f,  1.638006f,  2.006636f,  1.80548f,  1.981248f,  1.2976f,  2.228356f,  1.391758f,  1.840492f,  3.946649f,  2.613825f,  1.588533f,  2.646059f,  2.184788f,  1.494336f,  3.718985f,  2.682386f,  1.622462f,  1.85169f,  1.996256f,  1.428795f,  2.16413f,  3.550531f,  2.263972f,  2.110174f,  1.667275f,  2.548972f,  1.527085f,  3.167785f,  2.240135f,  1.546372f,  2.581395f,  2.504704f,  3.594455f,  2.358583f,  2.659162f,  1.283618f,  2.991367f,  1.750563f,  3.15564f,  1.392136f,  5.110705f,  1.486488f,  2.939822f,  1.606042f,  3.434605f,  2.75982f,  2.558122f,  2.483428f,  1.293926f,  1.718064f,  2.167202f,  3.319793f,  1.607312f,  2.563885f,  3.026642f,  1.870673f,  4.295736f,  4.752265f,  2.132042f,  1.409971f,  2.170643f,  2.602912f,  2.646313f,  2.308201f,  2.387407f,  3.282833f,  2.267509f,  2.034969f,  1.357682f,  4.025433f,  2.419545f,  1.993833f,  3.107361f,  2.366674f,  1.955471f,  3.034481f,  1.663024f,  2.438711f,  3.161996f,  1.1693f,  1.889715f,  2.295771f,  3.70162f,  2.075706f,  2.316884f,  1.764786f,  2.424909f,  1.764296f,  2.524404f,  1.631797f,  1.834786f,  2.037402f,  2.494275f,  1.218635f,  1.23392f,  1.853195f,  1.96253f,  3.341393f,  2.182371f,  2.943371f,  2.622412f,  3.040147f,  2.249053f,  2.328882f,  2.588134f,  2.407679f,  1.858886f,  2.362044f,  3.137747f,  1.094507f,  4.904062f,  1.528029f,  1.831565f,  4.001285f,  2.850794f,  2.212906f,  2.263274f,  4.116507f,  2.061357f,  2.767198f,  1.991929f,  2.721567f,  1.698772f,  2.12663f,  1.356535f,  3.788941f,  4.1938f,  2.072096f,  2.651518f,  2.029224f,  1.31197f,  1.641733f,  2.16235f,  4.908421f,  2.620621f,  1.685613f,  4.032732f,  2.975654f,  1.391878f,  3.187959f,  1.7272f,  2.244256f,  2.099878f,  3.436575f,  2.747597f,  3.452231f,  3.125508f,  2.336058f,  2.155052f,  3.492532f,  2.657843f,  2.578172f,  3.308265f,  4.359183f,  3.652059f,  2.870316f,  2.870991f,  1.58287f,  2.026071f,  1.737579f,  1.767362f,  1.54237f,  1.564828f,  2.506399f,  5.28616f,  1.490358f,  2.577471f,  2.809206f,  1.716789f,  3.290164f,  2.640146f,  3.259829f,  2.129054f,  3.477223f,  1.312415f,  1.827906f,  1.71594f,  2.126014f,  2.741346f,  3.195861f,  3.1608f,  2.639438f,  2.262423f,  2.397036f,  1.738369f,  2.890496f,  3.226315f,  1.428032f,  1.963167f,  3.02893f,  1.596813f,  2.206804f,  3.22031f,  2.7873f,  1.306414f,  2.653623f,  4.587405f,  3.922731f,  1.7335f,  3.779289f,  2.62199f,  1.599881f,  2.483758f,  1.404979f,  2.473353f,  2.385577f,  3.041035f,  3.251258f,  2.061534f,  1.148126f,  2.106954f,  1.611197f,  3.685518f,  2.051272f,  2.485678f,  1.360645f,  2.500418f,  2.149813f,  3.196553f,  2.46073f,  2.123068f,  2.492038f,  1.509213f,  2.177846f,  2.633008f,  1.467918f,  1.726005f,  3.500107f,  2.917756f,  3.575078f,  1.531765f,  2.472058f,  2.171196f,  3.385529f,  4.294995f,  3.653677f,  2.67569f,  2.956899f,  2.252736f,  1.486555f,  4.369126f,  3.505489f,  1.851819f,  4.03541f,  2.360516f,  2.936681f,  1.231981f,  1.693729f,  1.640814f,  1.984186f,  1.188148f,  1.384782f,  1.457199f,  2.069783f,  5.234804f,  1.113088f,  1.293686f,  2.017359f,  2.853041f,  1.456293f,  1.409798f,  3.594638f,  1.178108f,  1.355213f,  2.151638f,  3.382157f,  4.116253f,  2.484161f,  2.535639f,  4.248458f,  3.618502f,  1.029966f,  1.729484f,  2.63225f,  1.367122f,  1.634182f,  1.41973f,  3.522768f,  5.070103f,  0.8074f,  2.094894f,  2.316018f,  3.058936f,  3.105294f,  1.890553f,  1.435977f,  1.92512f,  1.731887f,  1.358465f,  1.965537f,  3.585413f,  1.745268f,  2.883919f,  2.578717f,  1.880818f,  5.418135f,  3.228431f,  2.010143f,  2.45912f,  4.514047f,  1.7347f,  2.281596f,  2.159699f,  1.579683f,  2.00735f,  3.706601f,  4.007991f,  2.472053f,  1.724421f,  1.889605f,  2.518133f,  2.84035f,  1.751531f,  3.606602f,  1.607786f,  1.945737f,  3.236766f,  3.387308f,  2.105602f,  3.340031f,  2.625562f,  2.789621f,  2.799774f,  3.478442f,  2.364704f,  1.584847f,  1.805852f,  3.190073f,  3.307748f,  2.619448f,  1.774906f,  1.691434f,  2.205351f,  1.445763f,  3.294953f,  2.389077f,  1.656286f,  2.852394f,  1.903534f,  3.312433f,  1.733694f,  1.357239f,  2.926443f,  1.026072f,  1.691016f,  1.32349f,  3.748037f,  2.242608f,  1.216382f,  4.056121f,  1.76495f,  2.091812f,  5.378484f,  3.318344f,  2.242834f,  2.098573f,  1.514949f,  1.406781f,  1.706496f,  1.566573f,  2.180213f,  1.393867f,  1.293929f,  1.672091f,  2.341493f,  2.906132f,  1.725755f,  2.118609f,  2.032982f,  2.375728f,  3.75372f,  3.382644f,  1.307015f,  3.438929f,  2.358929f,  3.31988f,  1.201525f,  1.061207f,  1.720163f,  2.77478f,  2.012914f,  1.528621f,  1.489572f,  2.014648f,  2.506553f,  1.165533f,  2.255969f,  4.443931f,  3.119305f,  3.894559f,  3.272496f,  1.844927f,  2.502512f,  4.793592f,  3.477832f,  1.843952f,  2.722272f,  2.677128f,  2.094914f,  1.652658f,  2.128754f,  2.1105f,  1.989956f,  1.914f,  3.450271f,  2.724176f,  1.723113f,  2.339737f,  2.518752f,  1.944501f,  1.8093f,  3.313133f,  3.089303f,  2.396977f,  1.488191f,  1.805118f,  1.384258f,  1.817271f,  2.427106f,  2.091595f,  3.133079f,  1.957668f,  1.201252f,  2.320236f,  0.873002f,  2.406543f,  2.998699f,  1.431357f,  2.180003f,  2.551728f,  1.555919f,  1.308252f,  3.082367f,  2.000819f,  1.35681f,  2.881864f,  3.045615f,  1.401307f,  2.281813f,  3.311975f,  1.879752f,  2.674045f,  1.702625f,  4.806692f,  2.6633f,  2.539375f,  3.608847f,  1.638065f,  1.622052f,  5.144179f,  2.478982f,  1.113508f,  1.707145f,  3.008972f,  4.153109f,  1.647314f,  3.584877f,  3.186455f,  1.391287f,  2.98846f,  3.420756f,  1.555315f,  2.647372f,  3.522963f,  2.073882f,  3.598407f,  4.823432f,  2.543281f,  2.09985f,  1.507753f,  1.559111f,  2.447589f,  2.692172f,  1.905802f,  1.359945f,  1.360406f,  3.07358f,  4.138884f,  2.867529f,  3.858283f,  4.39673f,  1.756164f,  1.731174f,  2.716537f,  2.230661f,  1.982752f,  4.081751f,  1.317913f,  2.293607f,  1.248808f,  1.813977f,  2.324964f,  3.797154f,  1.243477f,  2.622861f,  2.891318f,  2.098941f,  1.918142f,  1.658672f,  2.607744f,  1.90939f,  0.969651f,  2.750912f,  1.706031f,  4.301949f,  2.172422f,  2.424465f,  2.404524f,  2.221251f,  1.090719f,  1.762291f,  1.757226f,  3.492945f,  2.582739f,  2.781026f,  2.510998f,  2.728519f,  3.351631f,  2.970628f,  2.506746f,  1.350114f,  2.257208f,  4.953198f,  2.843351f,  2.876023f,  1.409066f,  1.495973f,  3.256744f,  2.028203f,  3.405456f,  2.362312f,  2.931191f,  2.785503f,  2.203989f,  3.015947f,  1.164988f,  1.374239f,  1.353737f,  2.73377f,  3.07746f,  2.161323f,  3.363472f,  2.841914f,  1.538665f,  2.62724f,  3.174611f,  2.181137f,  1.729041f,  1.742964f,  1.278192f,  2.129161f,  3.314118f,  2.170573f,  2.295406f,  2.257581f,  1.831594f,  2.95217f,  4.619727f,  3.952237f,  0.919504f,  1.941558f,  3.235512f,  2.378852f,  2.947361f,  3.227413f,  1.600512f,  2.646622f,  2.170172f,  2.251007f,  1.337266f,  0.876951f,  1.296814f, };
const std::vector<float> fire3_expand1x1_calib = {
    0.650272f,  1.076071f,  0.647282f,  0.882993f,  0.909618f,  0.456167f,  0.694069f,  0.316911f,  0.390168f,  0.724977f,  0.571621f,  0.526368f,  0.5835f,  0.540554f,  0.560009f,  1.174219f,  1.271037f,  1.227207f,  0.335778f,  1.430465f,  0.751515f,  0.46612f,  0.594394f,  0.488112f,  0.617939f,  0.778773f,  0.63654f,  1.108483f,  0.716983f,  0.693095f,  0.88561f,  0.785949f,  0.650268f,  0.814651f,  0.395145f,  0.555889f,  0.404863f,  0.472947f,  0.937906f,  0.275215f,  0.567676f,  0.734036f,  0.608905f,  0.848556f,  0.686216f,  0.461618f,  1.141388f,  0.508059f,  0.640111f,  1.249225f,  0.545106f,  0.538763f,  0.845252f,  0.799733f,  0.856655f,  0.566909f,  0.303507f,  0.862163f,  0.749877f,  1.051951f,  0.831723f,  0.494718f,  0.488683f,  0.475273f, };
const std::vector<float> fire7_squeeze1x1_calib = {
    0.139947f,  0.292021f,  0.350576f,  0.402591f,  0.434963f,  0.215078f,  0.27395f,  0.264859f,  0.165961f,  0.282955f,  0.319613f,  0.512434f,  0.25744f,  0.322827f,  0.326088f,  0.297941f,  0.214584f,  0.360617f,  0.212395f,  0.29657f,  0.209961f,  0.399144f,  0.759211f,  0.284058f,  0.289471f,  0.278541f,  0.373348f,  0.29442f,  0.214567f,  0.328671f,  0.347467f,  0.369495f,  0.418834f,  0.21499f,  0.19455f,  0.383458f,  0.218794f,  0.224408f,  0.320016f,  0.362507f,  0.309758f,  0.309873f,  0.289396f,  0.385914f,  0.169093f,  0.173052f,  0.40475f,  0.278478f, };
const std::vector<float> fire5_expand3x3_calib = {
    0.457709f,  0.299338f,  0.306461f,  0.391666f,  0.506315f,  0.349832f,  0.727535f,  0.292071f,  0.638637f,  0.482237f,  0.476551f,  0.444207f,  0.298177f,  0.596496f,  0.439719f,  0.267756f,  0.327614f,  0.840737f,  0.378795f,  0.25851f,  0.423763f,  0.255049f,  0.462732f,  0.927346f,  0.547586f,  0.400757f,  0.450649f,  0.314098f,  0.230219f,  0.632388f,  0.577646f,  0.499583f,  0.246846f,  0.325107f,  0.527041f,  0.480222f,  0.341998f,  0.327345f,  1.03911f,  0.66496f,  0.249769f,  0.689929f,  0.651239f,  0.470998f,  0.469725f,  0.337094f,  0.514316f,  0.293926f,  0.402443f,  0.391004f,  0.364607f,  0.398052f,  0.22213f,  0.357844f,  0.350965f,  0.224247f,  0.685608f,  0.390201f,  0.366335f,  0.435773f,  0.861841f,  0.305098f,  0.264626f,  0.457211f,  0.353454f,  0.370743f,  0.328852f,  0.282172f,  0.266723f,  0.460035f,  0.737562f,  0.311069f,  0.389464f,  0.346226f,  0.550532f,  1.132028f,  0.923482f,  0.320744f,  0.317283f,  0.367297f,  0.232866f,  0.2057f,  0.405139f,  0.574185f,  0.375176f,  0.438998f,  0.369516f,  0.403623f,  0.508861f,  0.600598f,  0.421927f,  0.330624f,  0.299941f,  0.340787f,  0.262033f,  0.704561f,  0.284301f,  0.292737f,  0.274354f,  0.396675f,  0.638701f,  0.360401f,  0.392709f,  0.352596f,  1.399645f,  0.636786f,  0.226857f,  0.417556f,  0.39581f,  0.344159f,  0.327546f,  0.565976f,  0.458929f,  0.351229f,  0.279884f,  0.5282f,  0.383677f,  0.335003f,  0.422286f,  0.4525f,  0.534744f,  0.618815f,  0.472129f,  0.215574f,  0.251932f,  0.404483f,  0.492659f,  0.298142f, };
const std::vector<float> fire4_expand1x1_calib = {
    1.023154f,  0.997447f,  1.224675f,  0.40435f,  0.60305f,  0.488199f,  0.473405f,  0.797568f,  0.4351f,  0.555541f,  0.565843f,  1.6842f,  0.496435f,  1.246344f,  0.51098f,  0.386668f,  0.694828f,  0.361481f,  0.757657f,  0.52217f,  0.704874f,  0.448408f,  0.635753f,  1.00921f,  0.769319f,  0.432059f,  1.694614f,  1.650244f,  0.460565f,  0.453199f,  1.289123f,  0.856124f,  0.841952f,  0.511225f,  0.79074f,  0.628803f,  0.338108f,  0.437589f,  0.393774f,  0.719983f,  0.620541f,  1.443367f,  0.452502f,  0.437278f,  1.222965f,  0.642963f,  0.658208f,  0.492033f,  0.498841f,  0.874451f,  1.059092f,  0.655965f,  0.780962f,  0.826871f,  0.582665f,  0.348449f,  0.720841f,  0.838306f,  0.577659f,  0.44947f,  1.358607f,  0.547138f,  0.69636f,  0.492861f,  0.513194f,  0.544354f,  0.45884f,  0.546898f,  0.815724f,  0.759983f,  0.786329f,  0.845286f,  0.768872f,  0.359901f,  0.393512f,  0.614723f,  0.688373f,  1.687425f,  0.475618f,  1.01449f,  2.108783f,  0.503978f,  0.31429f,  1.322473f,  0.853747f,  0.507726f,  1.998235f,  0.598061f,  0.883079f,  0.618071f,  0.300051f,  0.853363f,  1.041274f,  0.775828f,  0.852326f,  0.420377f,  0.633451f,  1.108928f,  0.420101f,  1.034986f,  0.467787f,  0.59616f,  0.550632f,  0.604023f,  0.488755f,  0.706938f,  0.657493f,  0.83973f,  0.562694f,  0.492313f,  0.625369f,  0.456872f,  0.781279f,  0.442916f,  0.708298f,  0.826339f,  0.468223f,  2.162409f,  0.601688f,  0.806923f,  0.640586f,  0.58067f,  0.551115f,  0.598656f,  0.77517f,  0.494279f,  0.407041f,  0.437098f, };
const std::vector<float> fire4_concat_calib = {
    1.023154f,  0.997447f,  1.224675f,  0.40435f,  0.60305f,  0.488199f,  0.473405f,  0.797568f,  0.4351f,  0.555541f,  0.565843f,  1.6842f,  0.496435f,  1.246344f,  0.51098f,  0.386668f,  0.694828f,  0.361481f,  0.757657f,  0.52217f,  0.704874f,  0.448408f,  0.635753f,  1.00921f,  0.769319f,  0.432059f,  1.694614f,  1.650244f,  0.460565f,  0.453199f,  1.289123f,  0.856124f,  0.841952f,  0.511225f,  0.79074f,  0.628803f,  0.338108f,  0.437589f,  0.393774f,  0.719983f,  0.620541f,  1.443367f,  0.452502f,  0.437278f,  1.222965f,  0.642963f,  0.658208f,  0.492033f,  0.498841f,  0.874451f,  1.059092f,  0.655965f,  0.780962f,  0.826871f,  0.582665f,  0.348449f,  0.720841f,  0.838306f,  0.577659f,  0.44947f,  1.358607f,  0.547138f,  0.69636f,  0.492861f,  0.513194f,  0.544354f,  0.45884f,  0.546898f,  0.815724f,  0.759983f,  0.786329f,  0.845286f,  0.768872f,  0.359901f,  0.393512f,  0.614723f,  0.688373f,  1.687425f,  0.475618f,  1.01449f,  2.108783f,  0.503978f,  0.31429f,  1.322473f,  0.853747f,  0.507726f,  1.998235f,  0.598061f,  0.883079f,  0.618071f,  0.300051f,  0.853363f,  1.041274f,  0.775828f,  0.852326f,  0.420377f,  0.633451f,  1.108928f,  0.420101f,  1.034986f,  0.467787f,  0.59616f,  0.550632f,  0.604023f,  0.488755f,  0.706938f,  0.657493f,  0.83973f,  0.562694f,  0.492313f,  0.625369f,  0.456872f,  0.781279f,  0.442916f,  0.708298f,  0.826339f,  0.468223f,  2.162409f,  0.601688f,  0.806923f,  0.640586f,  0.58067f,  0.551115f,  0.598656f,  0.77517f,  0.494279f,  0.407041f,  0.437098f,  0.305905f,  0.323983f,  0.282955f,  0.389437f,  0.232206f,  0.339227f,  0.443513f,  0.256582f,  0.40429f,  0.346651f,  0.125559f,  0.339857f,  0.170454f,  0.287916f,  0.20317f,  0.368614f,  0.24609f,  0.234605f,  0.303649f,  0.148573f,  0.427109f,  0.208972f,  0.347779f,  0.260245f,  0.426243f,  0.294827f,  0.389138f,  0.504571f,  0.206062f,  0.257397f,  0.427818f,  0.205674f,  0.344767f,  0.360638f,  0.455828f,  0.298554f,  0.443809f,  0.344079f,  0.429547f,  0.826764f,  0.411044f,  0.252645f,  0.169174f,  0.590813f,  0.370082f,  0.15002f,  0.23888f,  0.244886f,  0.277687f,  0.357664f,  0.334414f,  0.272705f,  0.486611f,  0.489578f,  0.490909f,  0.262572f,  0.316056f,  0.319073f,  0.422156f,  0.477961f,  0.447453f,  0.529469f,  0.416452f,  0.328769f,  0.391094f,  0.226379f,  0.246465f,  0.33987f,  0.307727f,  0.195378f,  0.369394f,  0.296117f,  0.227614f,  0.499927f,  0.434022f,  0.363962f,  0.234048f,  0.207119f,  0.463929f,  0.392397f,  0.355659f,  0.296147f,  0.527321f,  0.329075f,  0.57805f,  0.622888f,  0.584502f,  0.290554f,  0.393987f,  0.374391f,  0.688769f,  0.322321f,  0.496441f,  0.410358f,  0.376187f,  0.397193f,  0.44117f,  0.380341f,  0.247049f,  0.154077f,  0.346385f,  0.478139f,  0.314624f,  0.324245f,  0.334778f,  0.278323f,  0.159223f,  0.288048f,  0.283449f,  0.464504f,  0.309488f,  0.347333f,  0.341715f,  0.344527f,  0.538629f,  0.376348f,  0.178739f,  0.306133f,  0.362188f,  0.502922f,  0.182464f,  0.663931f,  0.459903f,  0.415667f,  0.458596f,  0.561659f,  0.82399f,  0.23316f, };
const std::vector<float> fire8_concat_calib = {
    3.050714f,  2.022486f,  2.527102f,  2.522945f,  1.0938f,  1.189762f,  0.563553f,  1.390082f,  1.597754f,  2.467744f,  2.349289f,  1.094035f,  1.467789f,  4.508902f,  0.950314f,  1.781951f,  3.938424f,  2.557025f,  2.900967f,  2.304632f,  1.76166f,  1.931039f,  1.526864f,  20.994824f,  3.767529f,  6.292767f,  2.109508f,  1.403101f,  6.054856f,  0.926662f,  1.682663f,  6.544368f,  5.593186f,  2.906371f,  10.840802f,  1.532525f,  2.255608f,  2.864224f,  1.050742f,  1.089839f,  1.757542f,  3.362412f,  3.712115f,  7.037883f,  0.844409f,  1.493963f,  1.462162f,  1.139228f,  1.469244f,  2.901696f,  1.891604f,  2.096287f,  5.747881f,  2.201509f,  4.488521f,  2.321636f,  1.822756f,  1.253603f,  2.924219f,  2.01309f,  0.560464f,  1.957725f,  1.259571f,  3.092869f,  1.423634f,  2.474163f,  2.271739f,  2.492229f,  2.829913f,  5.843137f,  2.070886f,  1.177147f,  0.953747f,  1.327809f,  4.022437f,  1.656692f,  1.036329f,  0.925575f,  2.775677f,  0.768695f,  1.842941f,  2.600631f,  0.979772f,  2.133056f,  7.92057f,  1.904239f,  3.784786f,  1.456828f,  1.506167f,  1.054555f,  1.320623f,  1.367718f,  2.398734f,  1.446026f,  2.328135f,  1.986759f,  0.82564f,  1.584114f,  2.498402f,  2.037444f,  1.836024f,  5.378849f,  2.094051f,  1.300048f,  1.667638f,  1.780839f,  5.645122f,  2.375257f,  1.773909f,  8.842349f,  6.347651f,  2.763044f,  1.310975f,  2.685915f,  3.770851f,  1.983253f,  1.48138f,  1.527186f,  1.372888f,  0.883601f,  3.075403f,  2.333444f,  16.684994f,  5.064341f,  1.298012f,  0.779208f,  5.338512f,  2.24848f,  4.899824f,  2.752815f,  1.830573f,  1.028332f,  1.371376f,  2.164074f,  2.253175f,  1.141511f,  1.392906f,  60.612713f,  2.195891f,  2.298659f,  1.681992f,  7.675989f,  5.147744f,  4.039273f,  1.379595f,  2.617693f,  1.659083f,  5.419198f,  3.061259f,  1.670468f,  0.957472f,  1.984915f,  1.647857f,  1.400236f,  1.509904f,  1.111597f,  2.030577f,  1.533807f,  2.429966f,  3.693772f,  1.258186f,  1.967181f,  3.894248f,  1.532012f,  1.84235f,  3.083894f,  1.662197f,  1.888338f,  0.902348f,  4.503578f,  1.395856f,  1.315844f,  1.397712f,  1.211948f,  1.471812f,  1.278395f,  2.444442f,  0.941815f,  1.546651f,  2.524314f,  0.990053f,  1.86407f,  1.497262f,  1.706409f,  1.737608f,  2.392137f,  156.161237f,  2.702283f,  1.277724f,  1.281169f,  2.408793f,  1.462562f,  1.667141f,  2.272508f,  6.413947f,  1.707228f,  5.503673f,  1.674f,  1.806723f,  1.468898f,  1.044236f,  11.751425f,  1.788068f,  3.757296f,  2.436745f,  4.593211f,  1.712546f,  1.897216f,  1.780023f,  2.284826f,  0.980953f,  1.795558f,  2.714963f,  1.50088f,  1.778408f,  12.768426f,  6.377519f,  2.160768f,  2.458115f,  2.545871f,  2.335671f,  1.789753f,  4.839386f,  0.956275f,  1.880289f,  4.364471f,  3.208262f,  5.099071f,  0.989035f,  1.956757f,  1.931885f,  2.191926f,  3.620214f,  1.320875f,  1.500948f,  1.000843f,  1.911114f,  2.620799f,  1.776423f,  2.149198f,  1.113361f,  1.026686f,  3.28123f,  4.103446f,  0.757675f,  0.699802f,  2.975709f,  2.523456f,  2.718607f,  1.481443f,  1.375878f,  3.430328f,  2.106534f,  4.796344f,  2.674315f,  1.09144f,  1.18055f,  0.357571f,  1.397313f,  0.796858f,  0.389696f,  1.534054f,  1.498474f,  0.877478f,  0.501156f,  0.388663f,  1.183608f,  0.568828f,  0.373075f,  0.842801f,  0.400638f,  0.638875f,  1.725063f,  0.865017f,  0.674441f,  1.442164f,  0.877284f,  0.966463f,  1.219864f,  1.478877f,  0.496736f,  0.397159f,  1.486194f,  0.759678f,  0.807297f,  0.388429f,  0.899625f,  0.749696f,  0.29402f,  0.751862f,  0.819524f,  0.874391f,  0.512467f,  0.62967f,  0.881957f,  0.951731f,  0.904552f,  0.442111f,  1.565783f,  2.274115f,  1.554734f,  0.555886f,  0.682176f,  0.528852f,  0.773593f,  0.842376f,  0.528849f,  0.917995f,  1.59043f,  0.68727f,  3.876868f,  1.326785f,  0.410569f,  2.124183f,  0.724902f,  1.297861f,  1.895913f,  1.096321f,  0.500572f,  1.064231f,  0.331106f,  0.467611f,  1.173503f,  0.963837f,  0.559871f,  0.503441f,  0.680013f,  0.756497f,  0.0f,  0.823723f,  1.357593f,  1.298007f,  1.688659f,  1.428547f,  0.7341f,  1.883351f,  0.644578f,  0.834253f,  0.415413f,  0.939857f,  0.308105f,  1.749316f,  0.539831f,  0.851869f,  0.387038f,  0.418212f,  1.481367f,  1.445496f,  0.91142f,  1.32337f,  1.419196f,  0.529665f,  1.22684f,  0.431321f,  0.283433f,  0.704182f,  1.657626f,  1.762635f,  0.809056f,  2.062884f,  0.800504f,  1.09854f,  0.821943f,  1.198294f,  1.095838f,  0.540124f,  0.330461f,  0.459614f,  0.877714f,  0.984092f,  0.633979f,  1.405296f,  0.981483f,  0.432365f,  1.051943f,  0.512999f,  0.43167f,  0.446466f,  0.503126f,  0.791139f,  1.120206f,  1.533472f,  1.087906f,  1.191314f,  0.984313f,  0.85439f,  1.587419f,  1.40555f,  0.855709f,  2.253691f,  0.730288f,  0.808799f,  0.901393f,  1.309829f,  1.209639f,  0.651777f,  0.46802f,  1.697704f,  0.302667f,  0.885598f,  0.805909f,  0.542888f,  0.758177f,  0.464975f,  1.040037f,  0.729277f,  1.05544f,  0.555813f,  2.162059f,  0.761154f,  1.159891f,  0.343309f,  0.545425f,  1.268731f,  19.495661f,  1.253875f,  0.429221f,  1.119821f,  0.413332f,  1.698667f,  1.272683f,  0.856545f,  0.791258f,  0.889306f,  0.854758f,  0.510996f,  0.890503f,  1.146209f,  0.901029f,  4.065652f,  4.150842f,  1.128799f,  0.517032f,  0.272174f,  0.692959f,  1.08509f,  0.799371f,  0.934862f,  0.852589f,  0.812722f,  0.390597f,  1.35552f,  0.826839f,  0.644686f,  1.049752f,  0.415705f,  1.311817f,  0.684112f,  0.460858f,  4.223352f,  1.114446f,  0.485422f,  0.637454f,  1.115767f,  0.563283f,  0.53404f,  0.702822f,  0.859578f,  0.652319f,  1.335825f,  0.717879f,  1.075697f,  0.844123f,  0.368189f,  0.360682f,  0.39049f,  1.779482f,  0.602513f,  0.656531f,  0.706832f,  3.508908f,  1.436947f,  6.227871f,  0.502938f,  1.29575f,  0.89773f,  3.741137f,  0.605188f,  0.0f,  1.60514f,  1.646827f,  1.280383f,  0.600751f,  0.764328f,  0.452592f,  1.246467f,  1.231408f,  2.66628f,  0.58383f,  0.559826f,  0.61276f,  0.193079f,  1.491671f,  0.696127f,  0.947422f,  4.385768f,  1.844464f,  1.384112f,  0.588451f,  0.396164f,  0.463952f,  0.881816f,  1.021106f,  0.741831f,  1.10479f,  0.56587f,  1.012888f,  3.161075f,  0.259832f,  1.014231f,  0.794649f,  0.604915f, };
const std::vector<float> fire7_concat_calib = {
    0.736377f,  1.210331f,  0.818763f,  3.167066f,  1.286165f,  1.133665f,  2.287732f,  0.806672f,  2.74259f,  0.651158f,  1.839404f,  0.838112f,  2.3995f,  1.225514f,  1.028798f,  1.048036f,  1.293776f,  0.925036f,  1.580569f,  0.740702f,  1.371277f,  1.223542f,  0.853334f,  1.119031f,  1.173687f,  1.074805f,  1.699163f,  5.449287f,  1.851074f,  0.901105f,  2.834461f,  0.604828f,  0.860014f,  1.998923f,  1.393779f,  1.768492f,  0.5725f,  1.055098f,  0.761761f,  1.279603f,  1.049795f,  1.089287f,  1.884832f,  1.094337f,  0.91993f,  0.814108f,  2.301513f,  0.917524f,  2.163075f,  0.829821f,  2.767711f,  0.630198f,  1.419391f,  1.096586f,  1.515897f,  0.759229f,  0.60173f,  1.405245f,  0.864852f,  0.950421f,  1.104963f,  1.172181f,  1.306929f,  2.495525f,  1.011541f,  0.902213f,  0.621891f,  0.802056f,  0.918526f,  2.022351f,  0.650258f,  1.004699f,  0.50158f,  0.780419f,  0.56792f,  0.820578f,  1.067048f,  0.637733f,  0.709822f,  2.574932f,  0.930689f,  1.545149f,  1.340553f,  1.308368f,  1.070709f,  2.064446f,  1.813275f,  1.325915f,  1.011807f,  1.923756f,  1.432532f,  1.02555f,  0.759992f,  1.382372f,  3.120148f,  0.87302f,  1.017204f,  1.719355f,  1.30318f,  0.536164f,  1.193149f,  1.017498f,  0.837858f,  1.213975f,  1.327788f,  0.855766f,  2.141483f,  1.761022f,  1.718308f,  1.224167f,  1.265381f,  0.736655f,  0.833891f,  2.765975f,  1.184967f,  0.72094f,  1.141511f,  1.100167f,  0.812701f,  1.304971f,  1.359448f,  1.515877f,  1.048244f,  0.775378f,  0.879934f,  1.135703f,  1.330117f,  1.910487f,  0.95506f,  0.799486f,  0.473801f,  0.825946f,  0.827356f,  1.108067f,  1.460218f,  3.579582f,  1.104722f,  0.612275f,  0.522198f,  1.079436f,  0.572549f,  1.429911f,  0.403477f,  0.704346f,  0.904539f,  0.688851f,  1.144608f,  1.188504f,  0.809051f,  0.576011f,  1.50744f,  1.065588f,  1.17028f,  1.503733f,  0.778606f,  0.593672f,  1.091834f,  1.355787f,  1.092962f,  1.580738f,  1.18276f,  0.866061f,  1.679172f,  0.933151f,  0.74552f,  1.627056f,  0.868679f,  0.812769f,  1.799619f,  3.177304f,  1.045027f,  0.731685f,  0.903452f,  4.804946f,  0.783723f,  5.248975f,  0.782487f,  1.398772f,  0.796733f,  0.73458f,  0.578949f,  0.596653f,  2.686489f,  0.526126f,  1.415891f,  1.154084f,  0.790376f,  0.994223f,  1.095271f,  1.454166f,  0.499057f,  0.849811f,  0.592456f,  0.548307f,  0.472388f,  0.389597f,  2.67728f,  0.453656f,  0.324482f,  0.313402f,  0.457302f,  0.953797f,  0.540113f,  0.298913f,  0.718594f,  0.92273f,  0.856476f,  1.175414f,  0.376557f,  0.687285f,  0.615758f,  0.597723f,  0.767942f,  0.324789f,  0.487326f,  0.569841f,  0.801722f,  0.362738f,  0.314192f,  1.190845f,  0.463719f,  1.32218f,  0.680181f,  0.75151f,  0.607638f,  1.54781f,  0.260801f,  1.215427f,  0.527479f,  0.643237f,  0.313255f,  0.31374f,  0.325344f,  0.511971f,  0.579835f,  0.390748f,  0.569913f,  0.390687f,  0.308476f,  0.754547f,  0.72549f,  0.536959f,  0.560647f,  0.390775f,  0.758028f,  0.773899f,  0.481062f,  2.112393f,  0.767747f,  0.314791f,  0.463181f,  0.416257f,  0.53867f,  0.921091f,  0.53034f,  1.505835f,  0.580471f,  0.363747f,  0.353376f,  0.664681f,  0.467422f,  1.300988f,  0.255521f,  0.290517f,  0.493562f,  0.391421f,  0.540508f,  2.090373f,  0.659476f,  6.154204f,  0.992094f,  0.51113f,  0.543676f,  0.430995f,  0.470614f,  1.344243f,  0.375503f,  1.253888f,  0.337729f,  0.856777f,  0.910401f,  0.426227f,  0.661231f,  0.575517f,  0.470471f,  0.656718f,  1.12167f,  0.59358f,  0.596471f,  0.738991f,  0.283652f,  0.362559f,  1.074605f,  0.399605f,  0.562188f,  0.707793f,  0.297907f,  0.407561f,  0.230699f,  0.510255f,  0.788982f,  0.386382f,  1.545067f,  0.47641f,  0.512186f,  0.464022f,  0.429024f,  0.268525f,  0.52598f,  0.567002f,  0.885523f,  1.025682f,  0.385145f,  1.07628f,  0.302025f,  0.634195f,  2.266983f,  0.622003f,  0.73299f,  0.73427f,  0.3316f,  0.600845f,  1.909588f,  0.619675f,  0.784638f,  1.035754f,  1.060136f,  0.604909f,  0.310801f,  6.343751f,  0.341747f,  1.785335f,  0.610278f,  0.340932f,  0.895261f,  0.536671f,  1.096434f,  0.337308f,  0.217982f,  0.648628f,  0.558058f,  1.63339f,  0.433868f,  0.590879f,  0.372538f,  1.398486f,  0.370249f,  0.386967f,  0.882373f,  0.274849f,  0.555694f,  0.2647f,  0.0f,  6.015907f,  0.195788f,  0.4271f,  0.36033f,  0.386455f,  0.554505f,  0.350341f,  0.649769f,  0.297993f,  4.150802f,  1.207649f,  0.411428f,  0.712678f,  0.771076f,  0.394453f,  0.546556f,  0.907837f,  0.33592f,  0.311354f,  0.533916f,  1.001332f,  0.626848f,  0.92406f,  8.265539f,  1.016106f,  0.702142f,  0.403735f,  0.361045f,  2.197871f,  0.6126f,  0.329918f, };
const std::vector<float> fire8_squeeze1x1_calib = {
    0.683244f,  0.603085f,  0.199187f,  0.553739f,  1.485298f,  0.754318f,  0.529909f,  0.547579f,  0.630239f,  0.617404f,  0.647391f,  0.82948f,  0.478952f,  0.479607f,  0.393697f,  0.312084f,  0.542304f,  0.399175f,  0.615453f,  0.545441f,  0.357335f,  0.390328f,  0.541084f,  0.280924f,  0.302156f,  0.628445f,  0.33542f,  0.486191f,  0.57335f,  0.478911f,  0.380421f,  0.351485f,  0.334004f,  0.413829f,  1.232591f,  0.282904f,  0.347062f,  0.597349f,  0.254279f,  0.475543f,  0.350138f,  0.461335f,  0.509719f,  1.169537f,  0.761044f,  0.748397f,  1.629095f,  0.549957f,  0.894524f,  0.221487f,  0.376492f,  0.381747f,  0.564023f,  0.366259f,  1.559515f,  0.351394f,  0.506972f,  0.555752f,  0.428338f,  0.230905f,  0.44008f,  0.7716f,  0.353473f,  2.338238f, };
const std::vector<float> fire4_squeeze1x1_calib = {
    0.325265f,  0.250441f,  0.169591f,  0.166493f,  0.208426f,  0.196773f,  0.249263f,  0.29675f,  0.207707f,  0.195797f,  0.226091f,  0.237369f,  0.241872f,  0.180491f,  0.213606f,  0.399997f,  0.254911f,  0.228453f,  0.246773f,  0.219736f,  0.316182f,  0.194561f,  0.247818f,  0.158109f,  0.260292f,  0.171745f,  0.377075f,  0.235776f,  0.231576f,  0.304281f,  0.358152f,  0.233678f, };
const std::vector<float> fire7_expand3x3_calib = {
    0.592456f,  0.548307f,  0.472388f,  0.389597f,  2.67728f,  0.453656f,  0.324482f,  0.313402f,  0.457302f,  0.953797f,  0.540113f,  0.298913f,  0.718594f,  0.92273f,  0.856476f,  1.175414f,  0.376557f,  0.687285f,  0.615758f,  0.597723f,  0.767942f,  0.324789f,  0.487326f,  0.569841f,  0.801722f,  0.362738f,  0.314192f,  1.190845f,  0.463719f,  1.32218f,  0.680181f,  0.75151f,  0.607638f,  1.54781f,  0.260801f,  1.215427f,  0.527479f,  0.643237f,  0.313255f,  0.31374f,  0.325344f,  0.511971f,  0.579835f,  0.390748f,  0.569913f,  0.390687f,  0.308476f,  0.754547f,  0.72549f,  0.536959f,  0.560647f,  0.390775f,  0.758028f,  0.773899f,  0.481062f,  2.112393f,  0.767747f,  0.314791f,  0.463181f,  0.416257f,  0.53867f,  0.921091f,  0.53034f,  1.505835f,  0.580471f,  0.363747f,  0.353376f,  0.664681f,  0.467422f,  1.300988f,  0.255521f,  0.290517f,  0.493562f,  0.391421f,  0.540508f,  2.090373f,  0.659476f,  6.154204f,  0.992094f,  0.51113f,  0.543676f,  0.430995f,  0.470614f,  1.344243f,  0.375503f,  1.253888f,  0.337729f,  0.856777f,  0.910401f,  0.426227f,  0.661231f,  0.575517f,  0.470471f,  0.656718f,  1.12167f,  0.59358f,  0.596471f,  0.738991f,  0.283652f,  0.362559f,  1.074605f,  0.399605f,  0.562188f,  0.707793f,  0.297907f,  0.407561f,  0.230699f,  0.510255f,  0.788982f,  0.386382f,  1.545067f,  0.47641f,  0.512186f,  0.464022f,  0.429024f,  0.268525f,  0.52598f,  0.567002f,  0.885523f,  1.025682f,  0.385145f,  1.07628f,  0.302025f,  0.634195f,  2.266983f,  0.622003f,  0.73299f,  0.73427f,  0.3316f,  0.600845f,  1.909588f,  0.619675f,  0.784638f,  1.035754f,  1.060136f,  0.604909f,  0.310801f,  6.343751f,  0.341747f,  1.785335f,  0.610278f,  0.340932f,  0.895261f,  0.536671f,  1.096434f,  0.337308f,  0.217982f,  0.648628f,  0.558058f,  1.63339f,  0.433868f,  0.590879f,  0.372538f,  1.398486f,  0.370249f,  0.386967f,  0.882373f,  0.274849f,  0.555694f,  0.2647f,  0.0f,  6.015907f,  0.195788f,  0.4271f,  0.36033f,  0.386455f,  0.554505f,  0.350341f,  0.649769f,  0.297993f,  4.150802f,  1.207649f,  0.411428f,  0.712678f,  0.771076f,  0.394453f,  0.546556f,  0.907837f,  0.33592f,  0.311354f,  0.533916f,  1.001332f,  0.626848f,  0.92406f,  8.265539f,  1.016106f,  0.702142f,  0.403735f,  0.361045f,  2.197871f,  0.6126f,  0.329918f, };
const std::vector<float> fire9_expand1x1_calib = {
    0.941047f,  1.247213f,  7.632166f,  0.690649f,  0.0f,  4.1728f,  0.0f,  5.565806f,  11.186766f,  4.192997f,  4.238858f,  0.0f,  3.871361f,  3.401124f,  7.463169f,  3.245061f,  9.667499f,  0.850095f,  4.767464f,  1.940534f,  3.350446f,  10.052479f,  1.183322f,  0.0f,  0.0f,  8.977803f,  6.190773f,  8.924556f,  5.315542f,  6.153608f,  0.0f,  0.645932f,  4.752051f,  2.64352f,  1.841145f,  13.922065f,  0.985573f,  1.601812f,  4.592348f,  6.056589f,  1.536364f,  9.140044f,  1.985377f,  2.193213f,  1.580711f,  0.0f,  0.819841f,  0.0f,  1.989585f,  1.137371f,  0.656534f,  1.993533f,  1.751937f,  26.332268f,  2.31825f,  2.141924f,  1.390842f,  0.816852f,  1.839231f,  1.537988f,  8.023806f,  1.821483f,  6.251631f,  0.0f,  3.206925f,  0.0f,  3.448117f,  2.259827f,  9.469062f,  13.201087f,  0.0f,  4.176381f,  1.089736f,  2.8137f,  22.593362f,  39.005753f,  0.800005f,  4.37236f,  2.115743f,  2.141526f,  1.502676f,  0.0f,  0.0f,  0.0f,  0.727969f,  2.120491f,  1.973781f,  0.0f,  0.0f,  8.507731f,  2.218232f,  1.005845f,  1.177955f,  4.50871f,  0.811362f,  2.168657f,  1.29958f,  2.352854f,  1.124073f,  3.902601f,  0.0f,  2.953646f,  1.990524f,  14.030452f,  10.048661f,  0.81266f,  3.401515f,  2.017359f,  0.745467f,  0.0f,  1.137983f,  9.577316f,  0.0f,  1.704261f,  2.072634f,  1.315367f,  1.270193f,  0.0f,  1.353946f,  0.0f,  2.909268f,  4.298149f,  0.0f,  2.100173f,  1.508613f,  2.162692f,  5.874272f,  1.547427f,  0.750015f,  5.971104f,  0.0f,  0.98455f,  9.635739f,  2.327917f,  2.369478f,  1.362393f,  0.0f,  6.013941f,  1.435479f,  7.599921f,  2.364603f,  2.091416f,  5.812357f,  2.839321f,  3.940281f,  0.0f,  3.543734f,  0.0f,  3.449606f,  2.24889f,  25.617751f,  0.785221f,  5.20622f,  1.318586f,  0.0f,  1.539194f,  1.501388f,  0.89707f,  1.132008f,  78.75969f,  0.886704f,  1.538784f,  5.938353f,  0.0f,  6.311029f,  2.305126f,  0.971356f,  1.577048f,  0.0f,  2.901411f,  4.433367f,  1.407115f,  3.798063f,  10.835345f,  0.781899f,  2.003158f,  1.894612f,  13.395791f,  0.0f,  2.281481f,  6.860007f,  1.575589f,  1.544952f,  2.631355f,  5.834976f,  22.423504f,  2.182416f,  0.0f,  0.0f,  4.25311f,  27.984972f,  5.201401f,  0.842924f,  1.692893f,  2.363622f,  0.0f,  5.884588f,  5.310874f,  1.97884f,  3.583724f,  0.0f,  2.387986f,  2.991452f,  5.28616f,  1.980226f,  6.92721f,  2.986401f,  0.0f,  82.099153f,  8.498394f,  0.0f,  4.935105f,  0.0f,  0.0f,  1.912092f,  3.876998f,  1.592874f,  8.128f,  3.203729f,  4.848753f,  5.378439f,  0.83612f,  1.779005f,  1.898685f,  0.0f,  1.037989f,  0.0f,  3.897547f,  2.458534f,  9.395854f,  63.377681f,  13.727044f,  0.581244f,  4.597002f,  0.982121f,  5.058753f,  0.726852f,  36.505687f,  10.944408f,  1.620851f,  0.594146f,  2.545361f,  0.0f,  9.008626f,  1.144093f,  1.412942f,  11.164933f,  0.0f,  0.0f,  1.107825f,  0.947867f,  0.869053f,  1.256493f,  1.823775f,  0.801115f,  1.46295f, };

template<typename T>
void quantize_weights(cldnn::memory& weights, cldnn::memory& w_qf)
{
    auto batch_pitch = weights.get_layout().get_pitches().batch[0];
    auto ptr = weights.pointer<T>();
    auto wqf_ptr = w_qf.pointer<float>();
    T max = (T) 0.0f;
    for (int ofm = 0; ofm < weights.get_layout().size.batch[0]; ofm++)
    {
        max = (T) 0.0f;
        for (int w = 0; w < batch_pitch; w++)
            if (max < abs(ptr[ofm* batch_pitch + w]))
                max = abs(ptr[ofm* batch_pitch + w]);

        if (max == (T)0)
            max = (T)1; // do not quantize

        for (int w = 0; w < batch_pitch; w++)
            ptr[ofm* batch_pitch + w] = (T)round((float)ptr[ofm* batch_pitch + w] * 127.0f / (float)max);
        wqf_ptr[ofm] = max / 127.0f;
    }
}
template<typename T>
void calibrate(const cldnn::memory& output, cldnn::memory& calibrations)
{
    auto feature_pitch = output.get_layout().get_pitches().feature[0];
    auto ptr = output.pointer<T>();
    auto calibrations_ptr = calibrations.pointer<float>();
    T max = (T) 0.0f;
    for (int ofm = 0; ofm < output.get_layout().size.feature[0]; ofm++)
    {
        max = (T) 0.0f;
        for (int w = 0; w < feature_pitch; w++)
            if (max < abs(ptr[ofm* feature_pitch + w]))
                max = abs(ptr[ofm* feature_pitch + w]);
        calibrations_ptr[ofm] = 127.0f / max;
    }
}

template<typename T>
T max_abs(const cldnn::memory& mem)
{
    T max = (T)0;
    auto ptr = mem.pointer<T>();
    for (auto& a : ptr)
        if (max < abs(a))
            max = abs(a);
    return max;
}

template<typename T>
void apply_calibration_on_weights(cldnn::memory& weights,const std::vector<float>& qf)
{
    auto batch_pitch = weights.get_layout().get_pitches().batch[0];
    auto ptr = weights.pointer<T>();
    tensor w_size = weights.get_layout().size;
    int index = 0;
    for (int ofm = 0; ofm < w_size.batch[0]; ofm++)
        for (int ifm = 0; ifm < w_size.feature[0]; ifm++)
            for (int xy = 0; xy < w_size.spatial[0] * w_size.spatial[1]; xy++)
            {
                if (qf[ifm] != 0.0f)
                    ptr[index] = ptr[index] / qf[ifm];
                else
                    ptr[index] = (T)0;
                index++;
            }
}

cldnn::memory create_int8_weights(engine engine, cldnn::memory& in_weights)
{
    auto layout = in_weights.get_layout();
    auto out_weights = memory::allocate(engine, { data_types::i8, layout.format, layout.size });
    auto in = in_weights.pointer<float>();
    auto out = out_weights.pointer<char>();
    int indx = 0;
    for (auto& a : in)
        out[indx++] = (char)a;
    return out_weights;
}


void add_calibration(
    const engine& engine,
    const std::string& weights_dir,
    const std::string& name,
    const std::vector<float>& in_calib,
    const std::vector<float>& out_calib,
    topology& topology)
{

    auto weights = file::create({ engine, join_path(weights_dir, name + "_weights.nnd") });
    auto& w_mem = weights.mem;
    apply_calibration_on_weights<float>(w_mem, in_calib);
    auto w_qf = memory::allocate(engine, { data_types::f32, format::bfyx,{ 1, w_mem.get_layout().size.batch[0], 1, 1 } });
    auto o_qf = memory::allocate(engine, { data_types::f32, format::bfyx,{ 1, (int32_t)out_calib.size(), 1, 1 } });
    set_values(o_qf, out_calib);
    quantize_weights<float>(w_mem, w_qf);
    auto w_int = create_int8_weights(engine, w_mem);
    auto weigths_int = data(name + "_weights_int", w_int);
    auto weights_qf = data(name + "_w_qf", w_qf);
    auto output_qf = data(name + "_o_qf", o_qf);

    topology.add(weigths_int, weights_qf, output_qf);
}

topology build_squeezenet_quant(const std::string& weights_dir, const cldnn::engine& engine, cldnn::layout& input_layout, int32_t batch_size)
{
    cldnn::topology topology;
    // [227x227x3xB] convolution->relu->pooling->lrn [1000xB]
    input_layout.size = { batch_size, 3, 227, 227 };
    auto input = cldnn::input_layout("input", input_layout);

    //auto reorder_mean = { (float)104.0069879317889, (float)116.66876761696767, (float)122.6789143406786 };
    auto reordered_input = reorder(
        "reorder",
        input,
        { input_layout.data_type, input_layout.format, input_layout.size },
        std::vector<float>{ (float)104.0069879317889, (float)116.66876761696767, (float)122.6789143406786 });

    add_calibration(engine, weights_dir, "conv1", reorder_calib, conv1_calib, topology);
    auto conv1_calibrator = reorder("conv1_calib", "reorder",
        format::bfyx, data_types::i8, reorder_calib, cldnn_reorder_mean_mode::mean_mul);
    auto conv1_bias = file::create({ engine, join_path(weights_dir, "conv1_bias.nnd")});
    auto conv1 = convolution(
        "conv1",
        conv1_calibrator,
        { "conv1_weights_int" },
        { conv1_bias },
        { "conv1_w_qf" },
        { "conv1_o_qf" },
        1.0f, // do not scale input
        { 1,1,2,2 },
        { 0,0,0,0 },
        { 1,1,1,1 },
        true);


    auto pool1 = pooling(
        "pool1",
        conv1,
        pooling_mode::max,
        { 1,1,3,3 }, // kernel
        { 1,1,2,2 }); // strd

    add_calibration(engine, weights_dir, "fire2_squeeze1x1", conv1_calib, fire2_squeeze1x1_calib, topology);
    auto fire2_squeeze1x1_bias = file::create({ engine, join_path(weights_dir, "fire2_squeeze1x1_bias.nnd") });
    auto fire2_squeeze1x1 = convolution(
        "fire2_squeeze1x1",
        pool1,
        { "fire2_squeeze1x1_weights_int" },
        { fire2_squeeze1x1_bias },
        { "fire2_squeeze1x1_w_qf" },
        { "fire2_squeeze1x1_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0,0,0,0 },
        { 1,1,1,1 },
        true);

    add_calibration(engine, weights_dir, "fire2_expand1x1", fire2_squeeze1x1_calib, fire2_expand1x1_calib, topology);
    auto fire2_expand1x1_bias = file::create({ engine, join_path(weights_dir, "fire2_expand1x1_bias.nnd") });
    auto fire2_expand1x1 = convolution(
        "fire2_expand1x1",
        fire2_squeeze1x1,
        { "fire2_expand1x1_weights_int" },
        { fire2_expand1x1_bias },
        { "fire2_expand1x1_w_qf" },
        { "fire2_expand1x1_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0,0,0,0 },
        { 1,1,1,1 },
        true);

    add_calibration(engine, weights_dir, "fire2_expand3x3", fire2_squeeze1x1_calib, fire2_expand3x3_calib, topology);
    auto fire2_expand3x3_bias = file::create({ engine, join_path(weights_dir, "fire2_expand3x3_bias.nnd") });
    auto fire2_expand3x3 = convolution(
        "fire2_expand3x3",
        fire2_squeeze1x1,
        { "fire2_expand3x3_weights_int" },
        { fire2_expand3x3_bias },
        { "fire2_expand3x3_w_qf" },
        { "fire2_expand3x3_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0, 0, -1,-1 },
        { 1,1,1,1 },
        true);

    auto fire2_concat = concatenation(
        "fire2_concat",
        {
            fire2_expand1x1,
            fire2_expand3x3
        },
        concatenation::along_f
    );

    add_calibration(engine, weights_dir, "fire3_squeeze1x1", fire2_concat_calib, fire3_squeeze1x1_calib, topology);
    auto fire3_squeeze1x1_bias = file::create({ engine, join_path(weights_dir, "fire3_squeeze1x1_bias.nnd") });
    auto fire3_squeeze1x1 = convolution(
        "fire3_squeeze1x1",
        fire2_concat,
        { "fire3_squeeze1x1_weights_int" },
        { fire3_squeeze1x1_bias },
        { "fire3_squeeze1x1_w_qf" },
        { "fire3_squeeze1x1_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0,0,0,0 },
        { 1,1,1,1 },
        true);

    add_calibration(engine, weights_dir, "fire3_expand1x1", fire3_squeeze1x1_calib, fire3_expand1x1_calib, topology);
    auto fire3_expand1x1_bias = file::create({ engine, join_path(weights_dir, "fire3_expand1x1_bias.nnd") });
    auto fire3_expand1x1 = convolution(
        "fire3_expand1x1",
        fire3_squeeze1x1,
        { "fire3_expand1x1_weights_int" },
        { fire3_expand1x1_bias },
        { "fire3_expand1x1_w_qf" },
        { "fire3_expand1x1_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0,0,0,0 },
        { 1,1,1,1 },
        true);

    add_calibration(engine, weights_dir, "fire3_expand3x3", fire3_squeeze1x1_calib, fire3_expand3x3_calib, topology);
    auto fire3_expand3x3_bias = file::create({ engine, join_path(weights_dir, "fire3_expand3x3_bias.nnd") });
    auto fire3_expand3x3 = convolution(
        "fire3_expand3x3",
        fire3_squeeze1x1,
        { "fire3_expand3x3_weights_int" },
        { fire3_expand3x3_bias },
        { "fire3_expand3x3_w_qf" },
        { "fire3_expand3x3_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0, 0, -1,-1 },
        { 1,1,1,1 },
        true);

    auto fire3_concat = concatenation(
        "fire3_concat",
        {
            fire3_expand1x1,
            fire3_expand3x3
        },
        concatenation::along_f
    );

    auto pool3 = pooling(
        "pool3",
        fire3_concat,
        pooling_mode::max,
        { 1,1,3,3 }, // kernel
        { 1,1,2,2 }); // strd

    add_calibration(engine, weights_dir, "fire4_squeeze1x1", fire3_concat_calib, fire4_squeeze1x1_calib, topology);
    auto fire4_squeeze1x1_bias = file::create({ engine, join_path(weights_dir, "fire4_squeeze1x1_bias.nnd") });
    auto fire4_squeeze1x1 = convolution(
        "fire4_squeeze1x1",
        pool3,
        { "fire4_squeeze1x1_weights_int" },
        { fire4_squeeze1x1_bias },
        { "fire4_squeeze1x1_w_qf" },
        { "fire4_squeeze1x1_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0,0,0,0 },
        { 1,1,1,1 },
        true);

    add_calibration(engine, weights_dir, "fire4_expand1x1", fire4_squeeze1x1_calib, fire4_expand1x1_calib, topology);
    auto fire4_expand1x1_bias = file::create({ engine, join_path(weights_dir, "fire4_expand1x1_bias.nnd") });
    auto fire4_expand1x1 = convolution(
        "fire4_expand1x1",
        fire4_squeeze1x1,
        { "fire4_expand1x1_weights_int" },
        { fire4_expand1x1_bias },
        { "fire4_expand1x1_w_qf" },
        { "fire4_expand1x1_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0,0,0,0 },
        { 1,1,1,1 },
        true);

    add_calibration(engine, weights_dir, "fire4_expand3x3", fire4_squeeze1x1_calib, fire4_expand3x3_calib, topology);
    auto fire4_expand3x3_bias = file::create({ engine, join_path(weights_dir, "fire4_expand3x3_bias.nnd") });
    auto fire4_expand3x3 = convolution(
        "fire4_expand3x3",
        fire4_squeeze1x1,
        { "fire4_expand3x3_weights_int" },
        { fire4_expand3x3_bias },
        { "fire4_expand3x3_w_qf" },
        { "fire4_expand3x3_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0, 0, -1,-1 },
        { 1,1,1,1 },
        true);

    auto fire4_concat = concatenation(
        "fire4_concat",
        {
            fire4_expand1x1,
            fire4_expand3x3
        },
        concatenation::along_f
    );

    add_calibration(engine, weights_dir, "fire5_squeeze1x1", fire4_concat_calib, fire5_squeeze1x1_calib, topology);
    auto fire5_squeeze1x1_bias = file::create({ engine, join_path(weights_dir, "fire5_squeeze1x1_bias.nnd") });
    auto fire5_squeeze1x1 = convolution(
        "fire5_squeeze1x1",
        fire4_concat,
        { "fire5_squeeze1x1_weights_int" },
        { fire5_squeeze1x1_bias },
        { "fire5_squeeze1x1_w_qf" },
        { "fire5_squeeze1x1_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0,0,0,0 },
        { 1,1,1,1 },
        true);

    add_calibration(engine, weights_dir, "fire5_expand1x1", fire5_squeeze1x1_calib, fire5_expand1x1_calib, topology);
    auto fire5_expand1x1_bias = file::create({ engine, join_path(weights_dir, "fire5_expand1x1_bias.nnd") });
    auto fire5_expand1x1 = convolution(
        "fire5_expand1x1",
        fire5_squeeze1x1,
        { "fire5_expand1x1_weights_int" },
        { fire5_expand1x1_bias },
        { "fire5_expand1x1_w_qf" },
        { "fire5_expand1x1_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0,0,0,0 },
        { 1,1,1,1 },
        true);

    add_calibration(engine, weights_dir, "fire5_expand3x3", fire5_squeeze1x1_calib, fire5_expand3x3_calib, topology);
    auto fire5_expand3x3_bias = file::create({ engine, join_path(weights_dir, "fire5_expand3x3_bias.nnd") });
    auto fire5_expand3x3 = convolution(
        "fire5_expand3x3",
        fire5_squeeze1x1,
        { "fire5_expand3x3_weights_int" },
        { fire5_expand3x3_bias },
        { "fire5_expand3x3_w_qf" },
        { "fire5_expand3x3_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0, 0, -1,-1 },
        { 1,1,1,1 },
        true);

    auto fire5_concat = concatenation(
        "fire5_concat",
        {
            fire5_expand1x1,
            fire5_expand3x3
        },
        concatenation::along_f
    );

    auto pool5 = pooling(
        "pool5",
        fire5_concat,
        pooling_mode::max,
        { 1,1,3,3 }, // kernel
        { 1,1,2,2 }); // strd

    add_calibration(engine, weights_dir, "fire6_squeeze1x1", fire5_concat_calib, fire6_squeeze1x1_calib, topology);

    auto fire6_squeeze1x1_bias = file::create({ engine, join_path(weights_dir, "fire6_squeeze1x1_bias.nnd") });
    auto fire6_squeeze1x1 = convolution(
        "fire6_squeeze1x1",
        pool5,
        { "fire6_squeeze1x1_weights_int" },
        { fire6_squeeze1x1_bias },
        { "fire6_squeeze1x1_w_qf" },
        { "fire6_squeeze1x1_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0,0,0,0 },
        { 1,1,1,1 },
        true);

    add_calibration(engine, weights_dir, "fire6_expand1x1", fire6_squeeze1x1_calib, fire6_expand1x1_calib, topology);
    auto fire6_expand1x1_bias = file::create({ engine, join_path(weights_dir, "fire6_expand1x1_bias.nnd") });
    auto fire6_expand1x1 = convolution(
        "fire6_expand1x1",
        fire6_squeeze1x1,
        { "fire6_expand1x1_weights_int" },
        { fire6_expand1x1_bias },
        { "fire6_expand1x1_w_qf" },
        { "fire6_expand1x1_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0,0,0,0 },
        { 1,1,1,1 },
        true);

    add_calibration(engine, weights_dir, "fire6_expand3x3", fire6_squeeze1x1_calib, fire6_expand3x3_calib, topology);
    auto fire6_expand3x3_bias = file::create({ engine, join_path(weights_dir, "fire6_expand3x3_bias.nnd") });
    auto fire6_expand3x3 = convolution(
        "fire6_expand3x3",
        fire6_squeeze1x1,
        { "fire6_expand3x3_weights_int" },
        { fire6_expand3x3_bias },
        { "fire6_expand3x3_w_qf" },
        { "fire6_expand3x3_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0, 0, -1,-1 },
        { 1,1,1,1 },
        true);

    auto fire6_concat = concatenation(
        "fire6_concat",
        {
            fire6_expand1x1,
            fire6_expand3x3
        },
        concatenation::along_f
    );
  
    add_calibration(engine, weights_dir, "fire7_squeeze1x1", fire6_concat_calib, fire7_squeeze1x1_calib, topology);
    auto fire7_squeeze1x1_bias = file::create({ engine, join_path(weights_dir, "fire7_squeeze1x1_bias.nnd")});
    auto fire7_squeeze1x1 = convolution(
        "fire7_squeeze1x1",
        fire6_concat,
        { "fire7_squeeze1x1_weights_int" },
        { fire7_squeeze1x1_bias },
        { "fire7_squeeze1x1_w_qf" },
        { "fire7_squeeze1x1_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0,0,0,0 },
        { 1,1,1,1 },
        true);
    
    add_calibration(engine, weights_dir, "fire7_expand1x1", fire7_squeeze1x1_calib, fire7_expand1x1_calib, topology);
    auto fire7_expand1x1_bias = file::create({ engine, join_path(weights_dir, "fire7_expand1x1_bias.nnd")});
    auto fire7_expand1x1 = convolution(
        "fire7_expand1x1",
        fire7_squeeze1x1,
        { "fire7_expand1x1_weights_int" },
        { fire7_expand1x1_bias },
        { "fire7_expand1x1_w_qf" },
        { "fire7_expand1x1_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0,0,0,0 },
        { 1,1,1,1 },
        true);

    add_calibration(engine, weights_dir, "fire7_expand3x3", fire7_squeeze1x1_calib, fire7_expand3x3_calib, topology);
    auto fire7_expand3x3_bias = file::create({ engine, join_path(weights_dir, "fire7_expand3x3_bias.nnd")});
    auto fire7_expand3x3 = convolution(
        "fire7_expand3x3",
        fire7_squeeze1x1,
        { "fire7_expand3x3_weights_int" },
        { fire7_expand3x3_bias },
        { "fire7_expand3x3_w_qf" },
        { "fire7_expand3x3_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0, 0, -1,-1 },
        { 1,1,1,1 },
        true);

    auto fire7_concat = concatenation(
        "fire7_concat",
        {
            fire7_expand1x1,
            fire7_expand3x3
        },
        concatenation::along_f
    );

    add_calibration(engine, weights_dir, "fire8_squeeze1x1", fire7_concat_calib, fire8_squeeze1x1_calib, topology);

    auto fire8_squeeze1x1_bias = file::create({ engine, join_path(weights_dir, "fire8_squeeze1x1_bias.nnd")});
    auto fire8_squeeze1x1 = convolution(
        "fire8_squeeze1x1",
        fire7_concat,
        { "fire8_squeeze1x1_weights_int" },
        { fire8_squeeze1x1_bias },
        { "fire8_squeeze1x1_w_qf" },
        { "fire8_squeeze1x1_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0,0,0,0 },
        { 1,1,1,1 },
        true);

    add_calibration(engine, weights_dir, "fire8_expand1x1", fire8_squeeze1x1_calib, fire8_expand1x1_calib, topology);
    auto fire8_expand1x1_bias = file::create({ engine, join_path(weights_dir, "fire8_expand1x1_bias.nnd")});
    auto fire8_expand1x1 = convolution(
        "fire8_expand1x1",
        fire8_squeeze1x1,
        { "fire8_expand1x1_weights_int" },
        { fire8_expand1x1_bias },
        { "fire8_expand1x1_w_qf" },
        { "fire8_expand1x1_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0,0,0,0 },
        { 1,1,1,1 },
        true);

    add_calibration(engine, weights_dir, "fire8_expand3x3", fire8_squeeze1x1_calib, fire8_expand3x3_calib, topology);
    auto fire8_expand3x3_bias = file::create({ engine, join_path(weights_dir, "fire8_expand3x3_bias.nnd") });
    auto fire8_expand3x3 = convolution(
        "fire8_expand3x3",
        fire8_squeeze1x1,
        { "fire8_expand3x3_weights_int" },
        { fire8_expand3x3_bias },
        { "fire8_expand3x3_w_qf" },
        { "fire8_expand3x3_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0, 0, -1,-1 },
        { 1,1,1,1 },
        true);

    auto fire8_concat = concatenation(
        "fire8_concat",
        {
            fire8_expand1x1,
            fire8_expand3x3
        },
        concatenation::along_f
    );

    add_calibration(engine, weights_dir, "fire9_squeeze1x1", fire8_concat_calib, fire9_squeeze1x1_calib, topology);
    auto fire9_squeeze1x1_bias = file::create({ engine, join_path(weights_dir, "fire9_squeeze1x1_bias.nnd")});

    auto fire9_squeeze1x1 = convolution(
        "fire9_squeeze1x1",
        fire8_concat,
        { "fire9_squeeze1x1_weights_int" },
        { fire9_squeeze1x1_bias },
        { "fire9_squeeze1x1_w_qf" },
        { "fire9_squeeze1x1_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0,0,0,0 },
        { 1,1,1,1 },
        true);

    add_calibration(engine, weights_dir, "fire9_expand1x1", fire9_squeeze1x1_calib, fire9_expand1x1_calib, topology);
    auto fire9_expand1x1_bias = file::create({ engine, join_path(weights_dir, "fire9_expand1x1_bias.nnd")});

    auto fire9_expand1x1 = convolution(
        "fire9_expand1x1",
        fire9_squeeze1x1,
        { "fire9_expand1x1_weights_int" },
        { fire9_expand1x1_bias },
        { "fire9_expand1x1_w_qf" },
        { "fire9_expand1x1_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0,0,0,0 },
        { 1,1,1,1 },
        true);

    add_calibration(engine, weights_dir, "fire9_expand3x3", fire9_squeeze1x1_calib, fire9_expand3x3_calib, topology);
    auto fire9_expand3x3_bias = file::create({ engine, join_path(weights_dir, "fire9_expand3x3_bias.nnd")});

    auto fire9_expand3x3 = convolution(
        "fire9_expand3x3",
        fire9_squeeze1x1,
        { "fire9_expand3x3_weights_int" },
        { fire9_expand3x3_bias },
        { "fire9_expand3x3_w_qf" },
        { "fire9_expand3x3_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0, 0, -1,-1 },
        { 1,1,1,1 },
        true);

    auto fire9_concat = concatenation(
        "fire9_concat",
        {
            fire9_expand1x1,
            fire9_expand3x3
        },
        concatenation::along_f
    );

    auto conv10_bias = file::create({ engine, join_path(weights_dir, "conv10_bias.nnd") });
    add_calibration(engine, weights_dir, "conv10", fire9_concat_calib, conv10_calib, topology);

    auto conv10 = convolution(
        "conv10",
        fire9_concat,
        { "conv10_weights_int" },
        { conv10_bias },
        { "conv10_w_qf" },
        { "conv10_o_qf" },
        1.0f, // do not scale input
        { 1,1,1,1 },
        { 0,0,0,0 },
        { 1,1,1,1 },
        true);
    auto conv10_decalibrator = reorder("conv10_decalib", "conv10",
        format::bfyx, data_types::f32, conv10_calib, cldnn_reorder_mean_mode::mean_div);

    auto pool10 = pooling(
        "pool10",
        conv10_decalibrator,
        pooling_mode::average,
        { 1,1,14,14 }, // kernel
        { 1,1,1,1 }); // strd

    auto softmax = cldnn::softmax(
        "output",
        pool10);

    topology.add(
        input,
        reordered_input,
        conv1, conv1_bias,
        pool1,
        fire2_squeeze1x1, fire2_squeeze1x1_bias
    );
    
    topology.add(fire2_expand1x1, fire2_expand1x1_bias);
    topology.add(fire2_expand3x3, fire2_expand3x3_bias);
        
    topology.add(
        fire2_concat);
    topology.add(
        fire3_squeeze1x1, fire3_squeeze1x1_bias,
        fire3_expand1x1,  fire3_expand1x1_bias,
        fire3_expand3x3,  fire3_expand3x3_bias,
        fire3_concat,
        pool3);
    topology.add(
        fire4_squeeze1x1, fire4_squeeze1x1_bias,
        fire4_expand1x1, fire4_expand1x1_bias,
        fire4_expand3x3, fire4_expand3x3_bias,
        fire4_concat);
    topology.add(
        fire5_squeeze1x1, fire5_squeeze1x1_bias,
        fire5_expand1x1,  fire5_expand1x1_bias,
        fire5_expand3x3,  fire5_expand3x3_bias,
        fire5_concat,
        pool5);
    topology.add(
        fire6_squeeze1x1,  fire6_squeeze1x1_bias,
        fire6_expand1x1,  fire6_expand1x1_bias,
        fire6_expand3x3,  fire6_expand3x3_bias,
        fire6_concat);
    topology.add(
        fire7_squeeze1x1, fire7_squeeze1x1_bias,
        fire7_expand1x1,  fire7_expand1x1_bias,
        fire7_expand3x3,  fire7_expand3x3_bias,
        fire7_concat);
    topology.add(
        fire8_squeeze1x1, fire8_squeeze1x1_bias,
        fire8_expand1x1,  fire8_expand1x1_bias,
        fire8_expand3x3,  fire8_expand3x3_bias,
        fire8_concat);
    topology.add(
        fire9_squeeze1x1, fire9_squeeze1x1_bias,
        fire9_expand1x1,  fire9_expand1x1_bias,
        fire9_expand3x3,  fire9_expand3x3_bias,
        fire9_concat);
    topology.add(
        conv10, conv10_bias,
        pool10,
        softmax);
    topology.add(
        conv10_decalibrator,
        conv1_calibrator
        );
    return topology;
}
